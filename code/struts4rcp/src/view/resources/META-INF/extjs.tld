<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE taglib PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.2//EN" "http://java.sun.com/dtd/web-jsptaglibrary_1_2.dtd">
<taglib>
	<tlib-version>2.2.3</tlib-version>
	<jsp-version>1.2</jsp-version>
	<short-name>extjs</short-name>
	<uri>/extjs</uri>
	<display-name>ExtJS Tags</display-name>
	<description><![CDATA[ExtJS Tags]]></description>
	<tag>
		<name>action</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.Action
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[An Action is a piece of reusable functionality that can be abstracted out of any particular component so that it can be usefully shared among multiple components. Actions let you share handlers, configuration options and UI updates across any components that support the Action interface (primarily Ext.Toolbar, Ext.Button and Ext.menu.Menu components).Aside from supporting the config object interface, any component that needs to use Actions must also support the following method list, as these will be called as needed by the Action class: setText(string), setIconCls(string), setDisabled(boolean), setVisible(boolean) and setHandler(function).Example usage:// Define the shared action.  Each component below will have the same// display text and icon, and will display the same message on click.var action = new Ext.Action({    text: 'Do something',    handler: function(){        Ext.Msg.alert('Click', 'You did something.');    },    iconCls: 'do-something'});var panel = new Ext.Panel({    title: 'Actions',    width:500,    height:300,    tbar: [        // Add the action directly to a toolbar as a menu button        action, {            text: 'Action Menu',            // Add the action to a menu as a text item            menu: [action]        }    ],    items: [        // Add the action to the panel body as a standard button        new Ext.Button(action)    ],    renderTo: Ext.getBody()});// Change the text for all components using the actionaction.setText('Something else');]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>disabled</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[disabled : Boolean
True to disable all components using this action, false to enable them (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>handler</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[handler : Function
The function that will be invoked by each component tied to this action when the component's primary event is triggered (defaults to undefined). ]]></description>
		</attribute>
		<attribute>
			<name>iconCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[iconCls : String
The icon CSS class for all components using this action (defaults to ''). The class should supply a background image that will be used as the icon image. ]]></description>
		</attribute>
		<attribute>
			<name>scope</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[scope : Object
The scope in which the handler function will execute. ]]></description>
		</attribute>
		<attribute>
			<name>text</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[text : String
The text to set for all components using this action (defaults to ''). ]]></description>
		</attribute>
		<attribute>
			<name>hidden</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hidden : Boolean
True to hide all components using this action, false to show them (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>ajax</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.Ajax
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Global Ajax request class. Provides a simple way to make Ajax requests with maximum flexibility. Example usage:// Basic requestExt.Ajax.request({   url: 'foo.php',   success: someFn,   failure: otherFn,   headers: {       'my-header': 'foo'   },   params: { foo: 'bar' }});// Simple ajax form submissionExt.Ajax.request({    form: 'some-form',    params: 'foo=bar'});// Default headers to pass in every requestExt.Ajax.defaultHeaders = {    'Powered-By': 'Ext'};// Global Ajax events can be handled on every request!Ext.Ajax.on('beforerequest', this.showSpinner, this);]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>autoAbort</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoAbort : Boolean
(Optional) Whether this request should abort any pending requests. (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>defaultHeaders</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[defaultHeaders : Object
(Optional) An object containing request headers which are added to each request made by this object. (defaults to undefined) ]]></description>
		</attribute>
		<attribute>
			<name>disableCaching</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[disableCaching : Boolean
(Optional) True to add a unique cache-buster param to GET requests. (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>extraParams</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[extraParams : Object
(Optional) An object containing properties which are used as extra parameters to each request made by this object. (defaults to undefined) ]]></description>
		</attribute>
		<attribute>
			<name>timeout</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[timeout : Number
(Optional) The timeout in milliseconds to be used for requests. (defaults to 30000) ]]></description>
		</attribute>
		<attribute>
			<name>url</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[url : String
(Optional) The default URL to be used for requests to the server. (defaults to undefined) ]]></description>
		</attribute>
		<attribute>
			<name>method</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[method : String
(Optional) The default HTTP method to be used for requests. (defaults to undefined; if not set but parms are present will use POST, otherwise GET)]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>boxComponent</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.BoxComponent
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Base class for any visual Ext.Component that uses a box container. BoxComponent provides automatic box model adjustments for sizing and positioning and will work correctly withnin the Component rendering model. All container classes should subclass BoxComponent so that they will work consistently when nested within other Ext layout containers. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>autoHeight</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoHeight : Boolean
True to use height:'auto', false to use fixed height (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>autoWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoWidth : Boolean
True to use width:'auto', false to use fixed width (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>height</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[height : Number
The height of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>width</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[width : Number
The width of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>button</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.Button
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Simple Button class ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>disabled</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[disabled : Boolean
True to start disabled (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>handler</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[A function called when the button is clicked (can be used instead of click event) ]]></description>
		</attribute>
		<attribute>
			<name>iconCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[iconCls : String
A css class which sets a background image to be used as the icon for this button ]]></description>
		</attribute>
		<attribute>
			<name>scope</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[scope : Object
The scope of the handler ]]></description>
		</attribute>
		<attribute>
			<name>clickEvent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[clickEvent : String
The type of event to map to the button's event handler (defaults to 'click') ]]></description>
		</attribute>
		<attribute>
			<name>enableToggle</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enableToggle : Boolean
True to enable pressed/not pressed toggling (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>handleMouseEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[handleMouseEvents : Boolean
False to disable visual cues on mouseover, mouseout and mousedown (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>menu</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[menu : Mixed
Standard menu attribute consisting of a reference to a menu object, a menu id or a menu config blob (defaults to undefined). ]]></description>
		</attribute>
		<attribute>
			<name>menuAlign</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[menuAlign : String
The position to align the menu to (see Ext.Element.alignTo for more details, defaults to 'tl-bl?'). ]]></description>
		</attribute>
		<attribute>
			<name>repeat</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[repeat : Boolean/Object
True to repeat fire the click event while the mouse is down. This can also be an Ext.util.ClickRepeater config object (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>tabIndex</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[tabIndex : Number
Set a DOM tabIndex for this button (defaults to undefined) ]]></description>
		</attribute>
		<attribute>
			<name>toggleGroup</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[toggleGroup : String
The group this toggle button is a member of (only 1 per group can be pressed, only applies if enableToggle = true) ]]></description>
		</attribute>
		<attribute>
			<name>tooltip</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tooltip : String/Object
The tooltip for the button - can be a string or QuickTips config object ]]></description>
		</attribute>
		<attribute>
			<name>tooltipType</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tooltipType : String
The type of tooltip to use. Either 'qtip' (default) for QuickTips or 'title' for title attribute. ]]></description>
		</attribute>
		<attribute>
			<name>text</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[text : String
The button text ]]></description>
		</attribute>
		<attribute>
			<name>icon</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[icon : String
The path to an image to display in the button (the image will be set as the background-image CSS property of the button by default, so if you want a mixed icon/text button, set cls:'x-btn-text-icon') ]]></description>
		</attribute>
		<attribute>
			<name>pressed</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[pressed : Boolean
True to start pressed (only if enableToggle = true) ]]></description>
		</attribute>
		<attribute>
			<name>type</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[type : String
submit, reset or button - defaults to 'button' ]]></description>
		</attribute>
		<attribute>
			<name>minWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[minWidth : Number
The minimum width for this button (used to give a set of buttons a common width) ]]></description>
		</attribute>
		<attribute>
			<name>hidden</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hidden : Boolean
True to start hidden (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>colorPalette</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.ColorPalette
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Simple color palette class for choosing colors. The palette can be rendered to any container.Here's an example of typical usage: var cp = new Ext.ColorPalette({value:'993300'});  // initial selected color cp.render('my-div'); cp.on('select', function(palette, selColor){     // do something with selColor });]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>allowReselect</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowReselect : Boolean
If set to true then reselecting a color that is already selected fires the selection event ]]></description>
		</attribute>
		<attribute>
			<name>itemCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[itemCls : String
The CSS class to apply to the containing element (defaults to 'x-color-palette') ]]></description>
		</attribute>
		<attribute>
			<name>value</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[value : String
The initial color to highlight (should be a valid 6-digit color hex code without the # symbol). Note that the hex codes are case-sensitive. ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>component</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.Component
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Base class for all Ext components. All subclasses of Component can automatically participate in the standard Ext component lifecycle of creation, rendering and destruction. They also have automatic support for basic hide/show and enable/disable behavior. Component allows any subclass to be lazy-rendered into any Ext.Container and to be automatically registered with the Ext.ComponentMgr so that it can be referenced at any time via Ext.getCmp. All visual widgets that require rendering into a layout should subclass Component (or Ext.BoxComponent if managed box model handling is required).Every component has a specific xtype, which is its Ext-specific type name, along with methods for checking the xtype like getXType and isXType. This is the list of all valid xtypes:xtype            Class-------------    ------------------box              Ext.BoxComponentbutton           Ext.Buttoncolorpalette     Ext.ColorPalettecomponent        Ext.Componentcontainer        Ext.Containercycle            Ext.CycleButtondataview         Ext.DataViewdatepicker       Ext.DatePickereditor           Ext.Editoreditorgrid       Ext.grid.EditorGridPanelgrid             Ext.grid.GridPanelpaging           Ext.PagingToolbarpanel            Ext.Panelprogress         Ext.ProgressBarsplitbutton      Ext.SplitButtontabpanel         Ext.TabPaneltreepanel        Ext.tree.TreePanelviewport         Ext.ViewPortwindow           Ext.WindowToolbar components---------------------------------------toolbar          Ext.Toolbartbbutton         Ext.Toolbar.Buttontbfill           Ext.Toolbar.Filltbitem           Ext.Toolbar.Itemtbseparator      Ext.Toolbar.Separatortbspacer         Ext.Toolbar.Spacertbsplit          Ext.Toolbar.SplitButtontbtext           Ext.Toolbar.TextItemForm components---------------------------------------form             Ext.FormPanelcheckbox         Ext.form.Checkboxcombo            Ext.form.ComboBoxdatefield        Ext.form.DateFieldfield            Ext.form.Fieldfieldset         Ext.form.FieldSethidden           Ext.form.Hiddenhtmleditor       Ext.form.HtmlEditornumberfield      Ext.form.NumberFieldradio            Ext.form.Radiotextarea         Ext.form.TextAreatextfield        Ext.form.TextFieldtimefield        Ext.form.TimeFieldtrigger          Ext.form.TriggerField]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>componentMgr</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.ComponentMgr
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Provides a registry of all Components (specifically subclasses of Ext.Component) on a page so that they can be easily accessed by component id (see Ext.getCmp).This object also provides a registry of available Component classes indexed by a mnemonic code known as the Component's Ext.Component.xtype. The xtype provides a way to avoid instantiating child Components when creating a full, nested config object for a complete Ext page.A child Component may be specified simply as a config object as long as the correct xtype is specified so that if and when the Component needs rendering, the correct type can be looked up for lazy instantiation.For a list of all available xtypes, see Ext.Component.This class is a singleton and cannot be created directly. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>compositeElement</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.CompositeElement
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Standard composite class. Creates a Ext.Element for every element in the collection. NOTE: Although they are not listed, this class supports all of the set/update methods of Ext.Element. All Ext.Element actions will be performed on all the elements in this collection.All methods return this and can be chained. var els = Ext.select('#some-el div.some-class', true); // or select directly from an existing element var el = Ext.get('some-el'); el.select('div.some-class', true); els.setWidth(100); // all elements become 100 width els.hide(true); // all elements fade out and hide // or els.setWidth(100).hide(true);]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>compositeElementLite</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.CompositeElementLite
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Flyweight composite class. Reuses the same Ext.Element for element operations.var els = Ext.select('#some-el div.some-class'); // or select directly from an existing element var el = Ext.get('some-el');el.select('div.some-class'); els.setWidth(100); // all elements become 100 width els.hide(true); // all elements fade out and hide // or els.setWidth(100).hide(true);]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>container</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.Container
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Base class for any Ext.BoxComponent that can contain other components. Containers handle the basic behavior of containing items, namely adding, inserting and removing them. The specific layout logic required to visually render contained items is delegated to any one of the different layout classes available. This class is intended to be extended and should generally not need to be created directly via the new keyword. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>activeItem</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[activeItem : String/Number
A string component id or the numeric index of the component that should be initially activated within the container's layout on render. For example, activeItem: 'item-1' or activeItem: 0 (index 0 = the first item in the container's collection). activeItem only applies to layout styles that can display items one at a time (like Ext.layout.Accordion, Ext.layout.CardLayout and Ext.layout.FitLayout). Related to Ext.layout.ContainerLayout.activeItem. ]]></description>
		</attribute>
		<attribute>
			<name>autoDestroy</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoDestroy : BooleanIf true the container will automatically destroy any contained component that is removed from it, else destruction must be handled manually (defaults to true).]]></description>
		</attribute>
		<attribute>
			<name>bufferResize</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[bufferResize : Boolean/Number
When set to true (100 milliseconds) or a number of milliseconds, the layout assigned for this container will buffer the frequency it calculates and does a re-layout of components. This is useful for heavy containers or containers with a large amount of sub components that frequent calls to layout are expensive. ]]></description>
		</attribute>
		<attribute>
			<name>defaultType</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[defaultType : String
The default type of container represented by this object as registered in Ext.ComponentMgr (defaults to 'panel'). ]]></description>
		</attribute>
		<attribute>
			<name>defaults</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[defaults : Object
A config object that will be applied to all components added to this container either via the items config or via the add or insert methods. The defaults config can contain any number of name/value property pairs to be added to each item, and should be valid for the types of items being added to the container. For example, to automatically apply padding to the body of each of a set of contained Ext.Panel items, you could pass: defaults: {bodyStyle:'padding:15px'}. ]]></description>
		</attribute>
		<attribute>
			<name>hideBorders</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideBorders : Boolean
True to hide the borders of each contained component, false to defer to the component's existing border settings (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>items</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[items : Mixed
A single item, or an array of child Components to be added to this container. Each item can be any type of object based on Ext.Component.Component config objects may also be specified in order to avoid the overhead of constructing a real Component object if lazy rendering might mean that the added Component will not be rendered immediately. To take advantage of this 'lazy instantiation', set the Ext.Component.xtype config property to the registered type of the Component wanted.For a list of all available xtypes, see Ext.Component. If a single item is being passed, it should be passed directly as an object reference (e.g., items: {...}). Multiple items should be passed as an array of objects (e.g., items: [{...}, {...}]). ]]></description>
		</attribute>
		<attribute>
			<name>layoutConfig</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[layoutConfig : Object
This is a config object containing properties specific to the chosen layout (to be used in conjunction with the layout config value). For complete details regarding the valid config options for each layout type, see the layout class corresponding to the type specified:Ext.layout.Accordion Ext.layout.AnchorLayoutExt.layout.BorderLayout Ext.layout.CardLayout Ext.layout.ColumnLayoutExt.layout.FitLayout Ext.layout.FormLayout Ext.layout.TableLayout]]></description>
		</attribute>
		<attribute>
			<name>monitorResize</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[monitorResize : Boolean
True to automatically monitor window resize events to handle anything that is sensitive to the current size of the viewport. This value is typically managed by the chosen layout and should not need to be set manually. ]]></description>
		</attribute>
		<attribute>
			<name>layout</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[layout : String
The layout type to be used in this container. If not specified, a default Ext.layout.ContainerLayout will be created and used. Valid values are: accordion, anchor, border, card, column, fit, form and table. Specific config values for the chosen layout type can be specified using layoutConfig. ]]></description>
		</attribute>
		<attribute>
			<name>autoHeight</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoHeight : Boolean
True to use height:'auto', false to use fixed height (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>autoWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoWidth : Boolean
True to use width:'auto', false to use fixed width (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>height</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[height : Number
The height of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>width</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[width : Number
The width of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>cycleButton</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.CycleButton
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[A specialized SplitButton that contains a menu of Ext.menu.CheckItem elements. The button automatically cycles through each menu item on click, raising the button's change event (or calling the button's changeHandler function, if supplied) for the active menu item. Clicking on the arrow section of the button displays the dropdown menu just like a normal SplitButton. Example usage:var btn = new Ext.CycleButton({    showText: true,    prependText: 'View as ',    items: [{        text:'text only',        iconCls:'view-text',        checked:true    },{        text:'HTML',        iconCls:'view-html'    }],    changeHandler:function(btn, item){        Ext.Msg.alert('Change View', item.text);    }});]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>items</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[items : Array
An array of Ext.menu.CheckItem config objects to be used when creating the button's menu items (e.g., {text:'Foo', iconCls:'foo-icon'}) ]]></description>
		</attribute>
		<attribute>
			<name>changeHandler</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[changeHandler : Function
A callback function that will be invoked each time the active menu item in the button's menu has changed. If this callback is not supplied, the SplitButton will instead fire the change event on active item change. The changeHandler function will be called with the following argument list: (SplitButton this, Ext.menu.CheckItem item) ]]></description>
		</attribute>
		<attribute>
			<name>prependText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[prependText : String
A static string to prepend before the active item's text when displayed as the button's text (only applies when showText = true, defaults to '') ]]></description>
		</attribute>
		<attribute>
			<name>showText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[showText : Boolean
True to display the active item's text as the button text (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>arrowHandler</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[arrowHandler : Function
A function called when the arrow button is clicked (can be used instead of click event) ]]></description>
		</attribute>
		<attribute>
			<name>arrowTooltip</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[arrowTooltip : String
The title attribute of the arrow ]]></description>
		</attribute>
		<attribute>
			<name>disabled</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[disabled : Boolean
True to start disabled (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>handler</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[A function called when the button is clicked (can be used instead of click event) ]]></description>
		</attribute>
		<attribute>
			<name>iconCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[iconCls : String
A css class which sets a background image to be used as the icon for this button ]]></description>
		</attribute>
		<attribute>
			<name>scope</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[scope : Object
The scope of the handler ]]></description>
		</attribute>
		<attribute>
			<name>clickEvent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[clickEvent : String
The type of event to map to the button's event handler (defaults to 'click') ]]></description>
		</attribute>
		<attribute>
			<name>enableToggle</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enableToggle : Boolean
True to enable pressed/not pressed toggling (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>handleMouseEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[handleMouseEvents : Boolean
False to disable visual cues on mouseover, mouseout and mousedown (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>menu</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[menu : Mixed
Standard menu attribute consisting of a reference to a menu object, a menu id or a menu config blob (defaults to undefined). ]]></description>
		</attribute>
		<attribute>
			<name>menuAlign</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[menuAlign : String
The position to align the menu to (see Ext.Element.alignTo for more details, defaults to 'tl-bl?'). ]]></description>
		</attribute>
		<attribute>
			<name>repeat</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[repeat : Boolean/Object
True to repeat fire the click event while the mouse is down. This can also be an Ext.util.ClickRepeater config object (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>tabIndex</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[tabIndex : Number
Set a DOM tabIndex for this button (defaults to undefined) ]]></description>
		</attribute>
		<attribute>
			<name>toggleGroup</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[toggleGroup : String
The group this toggle button is a member of (only 1 per group can be pressed, only applies if enableToggle = true) ]]></description>
		</attribute>
		<attribute>
			<name>tooltip</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tooltip : String/Object
The tooltip for the button - can be a string or QuickTips config object ]]></description>
		</attribute>
		<attribute>
			<name>tooltipType</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tooltipType : String
The type of tooltip to use. Either 'qtip' (default) for QuickTips or 'title' for title attribute. ]]></description>
		</attribute>
		<attribute>
			<name>text</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[text : String
The button text ]]></description>
		</attribute>
		<attribute>
			<name>icon</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[icon : String
The path to an image to display in the button (the image will be set as the background-image CSS property of the button by default, so if you want a mixed icon/text button, set cls:'x-btn-text-icon') ]]></description>
		</attribute>
		<attribute>
			<name>pressed</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[pressed : Boolean
True to start pressed (only if enableToggle = true) ]]></description>
		</attribute>
		<attribute>
			<name>type</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[type : String
submit, reset or button - defaults to 'button' ]]></description>
		</attribute>
		<attribute>
			<name>minWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[minWidth : Number
The minimum width for this button (used to give a set of buttons a common width) ]]></description>
		</attribute>
		<attribute>
			<name>hidden</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hidden : Boolean
True to start hidden (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>dataView</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.DataView
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[A mechanism for displaying data using custom layout templates and formatting. DataView uses an Ext.XTemplate as its internal templating mechanisma, and is bound to an Ext.data.Store so that as the data in the store changes the view is automatically updated to reflect the changes. The view also provides built-in behavior for many common events that can occur for its contained items including click, doubleclick, mouseover, mouseout, etc. as well as a built-in selection model. In order to use these features, an itemSelector config must be provided for the DataView to determine what nodes it will be working with.The example below binds a DataView to a Ext.data.Store and renders it into an Ext.Panel.var store = new Ext.data.JsonStore({    url: 'get-images.php',    root: 'images',    fields: [        'name', 'url',        {name:'size', type: 'float'},        {name:'lastmod', type:'date', dateFormat:'timestamp'}    ]});store.load();var tpl = new Ext.XTemplate(    '<tpl for='.'>',        '<div class='thumb-wrap' id='{name}'>',        '<div class='thumb'><img src='{url}' title='{name}'></div>',        '<span class='x-editable'>{shortName}</span></div>',    '</tpl>',    '<div class='x-clear'></div>');var panel = new Ext.Panel({    id:'images-view',    frame:true,    width:535,    autoHeight:true,    collapsible:true,    layout:'fit',    title:'Simple DataView',    items: new Ext.DataView({    	store: store,        tpl: tpl,        autoHeight:true,        multiSelect: true,        overClass:'x-view-over',        itemSelector:'div.thumb-wrap',emptyText: 'No images to display'    })});panel.render(document.body);]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>emptyText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>itemSelector</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>loadingText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>multiSelect</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>overClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>selectedClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>simpleSelect</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>singleSelect</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>store</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>tpl</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>autoHeight</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoHeight : Boolean
True to use height:'auto', false to use fixed height (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>autoWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoWidth : Boolean
True to use width:'auto', false to use fixed width (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>height</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[height : Number
The height of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>width</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[width : Number
The width of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>datePicker</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.DatePicker
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>cancelText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cancelText : String
The text to display on the cancel button ]]></description>
		</attribute>
		<attribute>
			<name>constrainToViewport</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[constrainToViewport : Boolean
True to constrain the date picker to the viewport (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>dayNames</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[dayNames : Array
An array of textual day names which can be overriden for localization support (defaults to Date.dayNames) ]]></description>
		</attribute>
		<attribute>
			<name>disabledDatesRE</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledDatesRE : RegExp
JavaScript regular expression used to disable a pattern of dates (defaults to null) ]]></description>
		</attribute>
		<attribute>
			<name>disabledDatesText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledDatesText : String
The tooltip text to display when the date falls on a disabled date (defaults to '') ]]></description>
		</attribute>
		<attribute>
			<name>disabledDays</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledDays : Array
An array of days to disable, 0-based. For example, [0, 6] disables Sunday and Saturday (defaults to null). ]]></description>
		</attribute>
		<attribute>
			<name>disabledDaysText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledDaysText : String
The tooltip to display when the date falls on a disabled day (defaults to '') ]]></description>
		</attribute>
		<attribute>
			<name>maxDate</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[maxDate : Date
Maximum allowable date (JavaScript date object, defaults to null) ]]></description>
		</attribute>
		<attribute>
			<name>maxText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[maxText : String
The error text to display if the maxDate validation fails (defaults to 'This date is after the maximum date') ]]></description>
		</attribute>
		<attribute>
			<name>minDate</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[minDate : Date
Minimum allowable date (JavaScript date object, defaults to null) ]]></description>
		</attribute>
		<attribute>
			<name>minText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[minText : String
The error text to display if the minDate validation fails (defaults to 'This date is before the minimum date') ]]></description>
		</attribute>
		<attribute>
			<name>monthNames</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[monthNames : Array
An array of textual month names which can be overriden for localization support (defaults to Date.monthNames) ]]></description>
		</attribute>
		<attribute>
			<name>monthYearText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[monthYearText : String
The header month selector tooltip (defaults to 'Choose a month (Control+Up/Down to move years)') ]]></description>
		</attribute>
		<attribute>
			<name>nextText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[nextText : String
The next month navigation button tooltip (defaults to 'Next Month (Control+Right)') ]]></description>
		</attribute>
		<attribute>
			<name>okText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[okText : String
The text to display on the ok button ]]></description>
		</attribute>
		<attribute>
			<name>prevText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[prevText : String
The previous month navigation button tooltip (defaults to 'Previous Month (Control+Left)') ]]></description>
		</attribute>
		<attribute>
			<name>startDay</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[startDay : Number
Day index at which the week should begin, 0-based (defaults to 0, which is Sunday) ]]></description>
		</attribute>
		<attribute>
			<name>todayText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[todayText : String
The text to display on the button that selects the current date (defaults to 'Today')]]></description>
		</attribute>
		<attribute>
			<name>todayTip</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[todayTip : String
The tooltip to display for the button that selects the current date (defaults to '{current date} (Spacebar)') ]]></description>
		</attribute>
		<attribute>
			<name>format</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[  format : String
The default date format string which can be overriden for localization support. The format must be valid according to Date.parseDate (defaults to 'm/d/y').  ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>domHelper</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.DomHelper
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Utility class for working with DOM and/or Templates. It transparently supports using HTML fragments or DOM.This is an example, where an unordered list with 5 children items is appended to an existing element with id 'my-div':var list = dh.append('my-div', {    tag: 'ul', cls: 'my-list', children: [        {tag: 'li', id: 'item0', html: 'List Item 0'},        {tag: 'li', id: 'item1', html: 'List Item 1'},         {tag: 'li', id: 'item2', html: 'List Item 2'},         {tag: 'li', id: 'item3', html: 'List Item 3'},         {tag: 'li', id: 'item4', html: 'List Item 4'}    ]});For more information and examples, see the original blog post.]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>domQuery</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.DomQuery
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[* Provides high performance selector/xpath processing by compiling queries into reusable functions. New pseudo classes and matchers can be plugged. It works on HTML and XML documents (if a content node is passed in).DomQuery supports most of the CSS3 selectors spec, along with some custom selectors and basic XPath.All selectors, attribute filters and pseudos below can be combined infinitely in any order. For example 'div.foo:nth-child(odd)[@foo=bar].bar:first' would be a perfectly valid selector. Node filters are processed in the order in which they appear, which allows you to optimize your queries for your document structure. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>editor</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.Editor
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[A base editor field that handles displaying/hiding on demand and has some built-in sizing and event handling logic. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>autosize</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autosize : Boolean/String
True for the editor to automatically adopt the size of the underlying field, 'width' to adopt the width only, or 'height' to adopt the height only (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>cancelOnEsc</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[cancelOnEsc : Boolean
True to cancel the edit when the escape key is pressed (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>completeOnEnter</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[completeOnEnter : Boolean
True to complete the edit when the enter key is pressed (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>constrain</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[constrain : Boolean
True to constrain the editor to the viewport ]]></description>
		</attribute>
		<attribute>
			<name>hideEl</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideEl : Boolean
False to keep the bound element visible while the editor is displayed (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>ignoreNoChange</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[ignoreNoChange : Boolean
True to skip the the edit completion process (no save, no events fired) if the user completes an edit and the value has not changed (defaults to false). Applies only to string values - edits for other data types will never be ignored. ]]></description>
		</attribute>
		<attribute>
			<name>revertInvalid</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[revertInvalid : Boolean
True to automatically revert the field value and cancel the edit when the user completes an edit and the field validation fails (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>shadow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[shadow : Boolean/String
'sides' for sides/bottom only, /frame' for 4-way shadow, and 'drop' for bottom-right shadow (defaults to 'frame') ]]></description>
		</attribute>
		<attribute>
			<name>swallowKeys</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[swallowKeys : Boolean
Handle the keydown/keypress events so they don't propagate (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>updateEl</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[updateEl : Boolean
True to update the innerHTML of the bound element when the update completes (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>value</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[value : Mixed
The data value of the underlying field (defaults to '') ]]></description>
		</attribute>
		<attribute>
			<name>alignment</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[alignment : String
The position to align to (see Ext.Element.alignTo for more details, defaults to 'c-c?'). ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>element</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.Element
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Represents an Element in the DOM.Usage:var el = Ext.get('my-div');// or with getElvar el = getEl('my-div');// or with a DOM elementvar el = Ext.get(myDivElement);Using Ext.get() or getEl() instead of calling the constructor directly ensures you get the same object each call instead of constructing a new one.AnimationsMany of the functions for manipulating an element have an optional 'animate' parameter. The animate parameter should either be a boolean (true) or an object literal with animation options. Note that the supported Element animation options are a subset of the Ext.Fx animation options specific to Fx effects. The Element animation options are:Option    Default   Description--------- --------  ---------------------------------------------duration  .35       The duration of the animation in secondseasing    easeOut   The easing methodcallback  none      A function to execute when the anim completesscope     this      The scope (this) of the callback functionAlso, the Anim object being used for the animation will be set on your options object as 'anim', which allows you to stop or manipulate the animation. Here's an example:var el = Ext.get('my-div');// no animationel.setWidth(100);// default animationel.setWidth(100, true);// animation with some options setel.setWidth(100, {    duration: 1,    callback: this.foo,    scope: this});// using the 'anim' property to get the Anim objectvar opt = {    duration: 1,    callback: this.foo,    scope: this};el.setWidth(100, opt);...if(opt.anim.isAnimated()){    opt.anim.stop();}Composite (Collections of) ElementsFor working with collections of Elements, see Ext.CompositeElement ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>eventManager</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.EventManager
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Registers event handlers that want to receive a normalized EventObject instead of the standard browser event and provides several useful events directly. See Ext.EventObject for more details on normalized event objects.This class is a singleton and cannot be created directly. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>eventObject</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.EventObject
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[EventObject exposes the Yahoo! UI Event functionality directly on the object passed to your event handler. It exists mostly for convenience. It also fixes the annoying null checks automatically to cleanup your code Example:function handleClick(e){ // e is not a standard event object, it is a Ext.EventObject    e.preventDefault();    var target = e.getTarget();    ... } var myDiv = Ext.get('myDiv'); myDiv.on('click', handleClick); //or Ext.EventManager.on('myDiv', 'click', handleClick); Ext.EventManager.addListener('myDiv', 'click', handleClick);]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>fx</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.Fx
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[A class to provide basic animation and visual effects support. Note: This class is automatically applied to the Ext.Element interface when included, so all effects calls should be performed via Element. Conversely, since the effects are not actually defined in Element, Ext.Fx must be included in order for the Element effects to work.It is important to note that although the Fx methods and many non-Fx Element methods support 'method chaining' in that they return the Element object itself as the method return value, it is not always possible to mix the two in a single method chain. The Fx methods use an internal effects queue so that each effect can be properly timed and sequenced. Non-Fx methods, on the other hand, have no such internal queueing and will always execute immediately. For this reason, while it may be possible to mix certain Fx and non-Fx method calls in a single chain, it may not always provide the expected results and should be done with care.Motion effects support 8-way anchoring, meaning that you can choose one of 8 different anchor points on the Element that will serve as either the start or end point of the animation. Following are all of the supported anchor positions:Value  Description-----  -----------------------------tl     The top left cornert      The center of the top edgetr     The top right cornerl      The center of the left edger      The center of the right edgebl     The bottom left cornerb      The center of the bottom edgebr     The bottom right cornerAlthough some Fx methods accept specific custom config parameters, the ones shown in the Config Options section below are common options that can be passed to any Fx method. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>scope</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[scope : Object
The scope of the effect function ]]></description>
		</attribute>
		<attribute>
			<name>afterCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[afterCls : String
A css class to apply after the effect ]]></description>
		</attribute>
		<attribute>
			<name>afterStyle</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[afterStyle : String/Object/Function
A style specification string, e.g. 'width:100px', or an object in the form {width:'100px'}, or a function which returns such a specification that will be applied to the Element after the effect finishes ]]></description>
		</attribute>
		<attribute>
			<name>block</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[block : Boolean
Whether the effect should block other effects from queueing while it runs ]]></description>
		</attribute>
		<attribute>
			<name>callback</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[callback : Function
A function called when the effect is finished. Note that effects are queued internally by the Fx class, so do not need to use the callback parameter to specify another effect -- effects can simply be chained together and called in sequence (e.g., el.slideIn().highlight();). The callback is intended for any additional code that should run once a particular effect has completed. ]]></description>
		</attribute>
		<attribute>
			<name>concurrent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[concurrent : Boolean
Whether to allow subsequently-queued effects to run at the same time as the current effect, or to ensure that they run in sequence ]]></description>
		</attribute>
		<attribute>
			<name>duration</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[duration : Number
The length of time (in seconds) that the effect should last ]]></description>
		</attribute>
		<attribute>
			<name>easing</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[easing : String
A valid Easing value for the effect ]]></description>
		</attribute>
		<attribute>
			<name>remove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[remove : Boolean
Whether the Element should be removed from the DOM and destroyed after the effect finishes ]]></description>
		</attribute>
		<attribute>
			<name>stopFx</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[stopFx : Boolean
Whether subsequent effects should be stopped and removed after the current effect finishes ]]></description>
		</attribute>
		<attribute>
			<name>useDisplay</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[useDisplay : Boolean
Whether to use the display CSS property instead of visibility when hiding Elements (only applies to effects that end with the element being visually hidden, ignored otherwise) ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>keyMap</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.KeyMap
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Handles mapping keys to actions for an element. One key map can be used for multiple actions. The constructor accepts the same config object as defined by addBinding. If you bind a callback function to a KeyMap, anytime the KeyMap handles an expected key combination it will call the function with this signature (if the match is a multi-key combination the callback will still be called only once): (String key, Ext.EventObject e) A KeyMap can also handle a string representation of keys.Usage: // map one key by key codevar map = new Ext.KeyMap('my-element', {    key: 13, // or Ext.EventObject.ENTER    fn: myHandler,    scope: myObject});// map multiple keys to one action by stringvar map = new Ext.KeyMap('my-element', {    key: 'a
	',    fn: myHandler,    scope: myObject});// map multiple keys to multiple actions by strings and array of codesvar map = new Ext.KeyMap('my-element', [    {        key: [10,13],        fn: function(){ alert('Return was pressed'); }    }, {        key: 'abc',        fn: function(){ alert('a, b or c was pressed'); }    }, {        key: '	',        ctrl:true,        shift:true,        fn: function(){ alert('Control + shift + tab was pressed.'); }    }]);Note: A KeyMap starts enabled ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>keyNav</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.KeyNav
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Provides a convenient wrapper for normalized keyboard navigation. KeyNav allows you to bind navigation keys to function calls that will get called when the keys are pressed, providing an easy way to implement custom navigation schemes for any UI component.The following are all of the possible keys that can be implemented: enter, left, right, up, down, tab, esc, pageUp, pageDown, del, home, end. Usage:var nav = new Ext.KeyNav('my-element', {    'left' : function(e){        this.moveLeft(e.ctrlKey);    },    'right' : function(e){        this.moveRight(e.ctrlKey);    },    'enter' : function(e){        this.save();    },    scope : this});]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>disabled</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[disabled : Boolean
True to disable this KeyNav instance (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>defaultEventAction</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[defaultEventAction : String
The method to call on the Ext.EventObject after this KeyNav intercepts a key. Valid values are Ext.EventObject.stopEvent, Ext.EventObject.preventDefault and Ext.EventObject.stopPropagation (defaults to 'stopEvent') ]]></description>
		</attribute>
		<attribute>
			<name>forceKeyDown</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[forceKeyDown : Boolean
Handle the keydown event instead of keypress (defaults to false). KeyNav automatically does this for IE since IE does not propagate special keys on keypress, but setting this to true will force other browsers to also handle keydown instead of keypress. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>layer</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.Layer
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[An extended Ext.Element object that supports a shadow and shim, constrain to viewport and automatic maintaining of shadow/shim positions. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
CSS class to add to the element ]]></description>
		</attribute>
		<attribute>
			<name>constrain</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[constrain : Boolean
False to disable constrain to viewport (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>shadow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[shadow : String/Boolean
True to create a shadow element with default class 'x-layer-shadow', or you can pass a string with a CSS class name. False turns off the shadow. ]]></description>
		</attribute>
		<attribute>
			<name>dh</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[dh : Object
DomHelper object config to create element with (defaults to {tag: 'div', cls: 'x-layer'}). ]]></description>
		</attribute>
		<attribute>
			<name>shadowOffset</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[shadowOffset : Number
Number of pixels to offset the shadow (defaults to 3) ]]></description>
		</attribute>
		<attribute>
			<name>shim</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[shim : Boolean
False to disable the iframe shim in browsers which need one (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>zindex</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[zindex : Number
Starting z-index (defaults to 11000) ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>loadMask</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.LoadMask
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[A simple utility class for generically masking elements while loading data. If the element being masked has an underlying Ext.data.Store, the masking will be automatically synchronized with the store's loading process and the mask element will be cached for reuse. For all other elements, this mask will replace the element's Updater load indicator and will be destroyed after the initial load. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>msg</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[msg : String
The text to display in a centered loading message box (defaults to 'Loading...') ]]></description>
		</attribute>
		<attribute>
			<name>msgCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[msgCls : String
The CSS class to apply to the loading message element (defaults to 'x-mask-loading') ]]></description>
		</attribute>
		<attribute>
			<name>removeMask</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[removeMask : Boolean
True to create a single-use mask that is automatically destroyed after loading (useful for page loads), False to persist the mask element reference for multiple uses (e.g., for paged data widgets). Defaults to false. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>messageBox</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.MessageBox
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Utility class for generating different styles of message boxes. The alias Ext.Msg can also be used.Note that the MessageBox is asynchronous. Unlike a regular JavaScript alert (which will halt browser execution), showing a MessageBox will not cause the code to stop. For this reason, if you have code that should only run after some user feedback from the MessageBox, you must use a callback function (see the function parameter for show for more details).Example usage:// Basic alert:Ext.Msg.alert('Status', 'Changes saved successfully.');// Prompt for user data and process the result using a callback:Ext.Msg.prompt('Name', 'Please enter your name:', function(btn, text){    if (btn == 'ok'){        // process text value and close...    }});// Show a dialog using config options:Ext.Msg.show({   title:'Save Changes?',   msg: 'Your are closing a tab that has unsaved changes. Would you like to save your changes?',   buttons: Ext.Msg.YESNOCANCEL,   fn: processResult,   animEl: 'elId',   icon: Ext.MessageBox.QUESTION});]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>pagingToolbar</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.PagingToolbar
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[A specialized toolbar that is bound to a Ext.data.Store and provides automatic paging controls. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>store</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[store : Ext.data.Store
The Ext.data.Store the paging toolbar should use as its data source (required). ]]></description>
		</attribute>
		<attribute>
			<name>displayInfo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[displayInfo : Boolean
True to display the displayMsg (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>displayMsg</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[displayMsg : String
The paging status message to display (defaults to 'Displaying {0} - {1} of {2}'). Note that this string is formatted using the braced numbers 0-2 as tokens that are replaced by the values for start, end and total respectively. These tokens should be preserved when overriding this string if showing those values is desired. ]]></description>
		</attribute>
		<attribute>
			<name>emptyMsg</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[emptyMsg : String
The message to display when no records are found (defaults to 'No data to display') ]]></description>
		</attribute>
		<attribute>
			<name>pageSize</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[pageSize : Number
The number of records to display per page (defaults to 20) ]]></description>
		</attribute>
		<attribute>
			<name>autoHeight</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoHeight : Boolean
True to use height:'auto', false to use fixed height (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>autoWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoWidth : Boolean
True to use width:'auto', false to use fixed width (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>height</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[height : Number
The height of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>width</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[width : Number
The width of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>panel</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.Panel
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Panel is a container that has specific functionality and structural components that make it the perfect building block for application-oriented user interfaces. The Panel contains bottom and top toolbars, along with separate header, footer and body sections. It also provides built-in expandable and collapsible behavior, along with a variety of prebuilt tool buttons that can be wired up to provide other customized behavior. Panels can be easily dropped into any Container or layout, and the layout and rendering pipeline is completely managed by the framework. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>iconCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[iconCls : String
A CSS class that will provide a background image to be used as the panel header icon (defaults to ''). ]]></description>
		</attribute>
		<attribute>
			<name>shadow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[minButtonWidth : Number
Minimum width in pixels of all buttons in this panel (defaults to 75) ]]></description>
		</attribute>
		<attribute>
			<name>shadowOffset</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[shadowOffset : Number
The number of pixels to offset the shadow if displayed (defaults to 4). Note that this option only applies when floating = true. ]]></description>
		</attribute>
		<attribute>
			<name>shim</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[shim : Boolean
False to disable the iframe shim in browsers which need one (defaults to true). Note that this option only applies when floating = true. ]]></description>
		</attribute>
		<attribute>
			<name>animCollapse</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[animCollapse : Boolean
True to animate the transition when the panel is collapsed, false to skip the animation (defaults to true if the Ext.Fx class is available, otherwise false). ]]></description>
		</attribute>
		<attribute>
			<name>autoLoad</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[autoLoad : Object/String/Function
A valid url spec according to the Updater Ext.Updater.update method. If autoLoad is not null, the panel will attempt to load its contents immediately upon render.The URL will become the default URL for this panel's body element, so it may be refreshed at any time.]]></description>
		</attribute>
		<attribute>
			<name>autoScroll</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoScroll : Boolean
True to use overflow:'auto' on the panel's body element and show scroll bars automatically when necessary, false to clip any overflowing content (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>baseCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[baseCls : String
The base CSS class to apply to this panel's element (defaults to 'x-panel').]]></description>
		</attribute>
		<attribute>
			<name>bbar</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[bbar : Object/Array
The bottom toolbar of the panel. This can be a Ext.Toolbar object, a toolbar config, or an array of buttons/button configs to be added to the toolbar. Note that this is not available as a property after render. To access the bottom toolbar after render, use getBottomToolbar. ]]></description>
		</attribute>
		<attribute>
			<name>bodyBorder</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[bodyBorder : Boolean
True to display an interior border on the body element of the panel, false to hide it (defaults to true). This only applies when border == true. If border == true and bodyBorder == false, the border will display as a 1px wide inset border, giving the entire body element an inset appearance. ]]></description>
		</attribute>
		<attribute>
			<name>bodyStyle</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[bodyStyle : String/Object/Function
Custom CSS styles to be applied to the body element in the format expected by Ext.Element.applyStyles (defaults to null). ]]></description>
		</attribute>
		<attribute>
			<name>buttonAlign</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[buttonAlign : String
The alignment of any buttons added to this panel. Valid values are 'right,' 'left' and 'center' (defaults to 'right'). ]]></description>
		</attribute>
		<attribute>
			<name>buttons</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[buttons : Array
An array of Ext.Button configs used to add buttons to the footer of this panel. ]]></description>
		</attribute>
		<attribute>
			<name>collapseFirst</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[collapseFirst : Boolean
True to make sure the collapse/expand toggle button always renders first (to the left of) any other tools in the panel's title bar, false to render it last (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>collapsed</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[collapsed : Boolean
True to render the panel collapsed, false to render it expanded (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>collapsedCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[collapsedCls : String
A CSS class to add to the panel's element after it has been collapsed (defaults to 'x-panel-collapsed'). ]]></description>
		</attribute>
		<attribute>
			<name>collapsible</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[collapsible : Boolean
True to make the panel collapsible and have the expand/collapse toggle button automatically rendered into the header tool button area, false to keep the panel statically sized with no button (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>contentEl</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[contentEl : String
The id of an existing HTML node to use as the panel's body content (defaults to ''). ]]></description>
		</attribute>
		<attribute>
			<name>draggable</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[draggable : Boolean
True to enable dragging of this Panel (defaults to false). For custom drag/drop implementations, an Ext.Panel.DD config could also be passed in this config instead of true, although Ext.Panel.DD is an internal, undocumented class]]></description>
		</attribute>
		<attribute>
			<name>elements</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[elements : String
A comma-delimited list of panel elements to initialize when the panel is rendered. Normally, this list will be generated automatically based on the items added to the panel at config time, but sometimes it might be useful to make sure a structural element is rendered even if not specified at config time (for example, you may want to add a button or toolbar dynamically after the panel has been rendered). Adding those elements to this list will allocate the required placeholders in the panel when it is rendered. Valid values areheader tbar (top bar)body bbar (bottom bar)footer Defaults to 'body'. ]]></description>
		</attribute>
		<attribute>
			<name>footer</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[footer : Boolean
True to create the footer element explicitly, false to skip creating it. By default, when footer is not specified, if one or more buttons have been added to the panel the footer will be created automatically, otherwise it will not. ]]></description>
		</attribute>
		<attribute>
			<name>header</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[header : Boolean
True to create the header element explicitly, false to skip creating it. By default, when header is not specified, if a title is set the header will be created automatically, otherwise it will not. If a title is set but header is explicitly set to false, the header will not be rendered. ]]></description>
		</attribute>
		<attribute>
			<name>headerAsText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[headerAsText : Boolean
True to display the panel title in the header, false to hide it (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>hideCollapseTool</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideCollapseTool : Boolean
True to hide the expand/collapse toggle button when collapsible = true, false to display it (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>html</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[html : String/Object
An HTML fragment, or a DomHelper specification to use as the panel's body content (defaults to ''). ]]></description>
		</attribute>
		<attribute>
			<name>keys</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[keys : Object/Array
A KeyMap config object (in the format expected by Ext.KeyMap.addBinding used to assign custom key handling to this panel (defaults to null). ]]></description>
		</attribute>
		<attribute>
			<name>maskDisabled</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[maskDisabled : Boolean
True to mask the panel when it is disabled, false to not mask it (defaults to true). Either way, the panel will always tell its contained elements to disable themselves when it is disabled, but masking the panel can provide an additional visual cue that the panel is disabled. ]]></description>
		</attribute>
		<attribute>
			<name>minButtonWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>tbar</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tbar : Object/Array
The top toolbar of the panel. This can be either an Ext.Toolbar object or an array of buttons/button configs to be added to the toolbar. Note that this is not available as a property after render. To access the top toolbar after render, use getTopToolbar. ]]></description>
		</attribute>
		<attribute>
			<name>titleCollapse</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[titleCollapse : Boolean
True to allow expanding and collapsing the panel (when collapsible = true) by clicking anywhere in the header bar, false to allow it only by clicking to tool button (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>tools</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tools : Array
An array of tool button configs to be added to the header tool area. Each tool config may contain the following properties:id : String Required. The type of tool to create. Values may betoggle (Created by default when collapsible is true)close minimizemaximize restore gear pin unpin right left up downrefreshminus plus help searchsave handler : FunctionRequired. The function to call when clicked. Arguments passed are:event : Ext.EventObject The click event.toolEl : Ext.ElementThe tool Element.Panel : Ext.Panel The host Panelscope : Object The scope in which to call the handler.qtip : String/Object A tip string, or a config argument to Ext.QuickTip.registerhidden : Boolean True to initially render hidden.on : Object A listener config object specifiying event listeners in the format of an argument to addListenerExample usage: tools:[{    id:'refresh',    // hidden:true,    handler: function(event, toolEl, panel){        // refresh logic    }}]Note that apart from the toggle tool which is provided when a panel is collapsible, these tools only provide the visual button. Any required functionality must be provided by adding handlers that implement the necessary behavior. ]]></description>
		</attribute>
		<attribute>
			<name>region</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>title</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[title : String
The title text to display in the panel header (defaults to ''). When a title is specified the header element will automatically be created and displayed unless header is explicitly set to false. If you don't want to specify a title at config time, but you may want one later, you must either specify a non-empty title (a blank space ' ' will do) or header:true so that the container element will get created. ]]></description>
		</attribute>
		<attribute>
			<name>frame</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[frame : Boolean
True to render the panel with custom rounded borders, false to render with plain 1px square borders (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>border</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[border : Boolean
True to display the borders of the panel's body element, false to hide them (defaults to true). By default, the border is a 2px wide inset border, but this can be further altered by setting bodyBorder to false. ]]></description>
		</attribute>
		<attribute>
			<name>floating</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[floating : Boolean
True to float the panel (absolute position it with automatic shimming and shadow), false to display it inline where it is rendered (defaults to false). Note that by default, setting floating to true will cause the panel to display at negative offsets so that it is hidden -- because the panel is absolute positioned, the position must be set explicitly after render (e.g., myPanel.setPosition(100,100);). Also, when floating a panel you should always assign a fixed width, otherwise it will be auto width and will expand to fill to the right edge of the viewport. ]]></description>
		</attribute>
		<attribute>
			<name>activeItem</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[activeItem : String/Number
A string component id or the numeric index of the component that should be initially activated within the container's layout on render. For example, activeItem: 'item-1' or activeItem: 0 (index 0 = the first item in the container's collection). activeItem only applies to layout styles that can display items one at a time (like Ext.layout.Accordion, Ext.layout.CardLayout and Ext.layout.FitLayout). Related to Ext.layout.ContainerLayout.activeItem. ]]></description>
		</attribute>
		<attribute>
			<name>autoDestroy</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoDestroy : BooleanIf true the container will automatically destroy any contained component that is removed from it, else destruction must be handled manually (defaults to true).]]></description>
		</attribute>
		<attribute>
			<name>bufferResize</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[bufferResize : Boolean/Number
When set to true (100 milliseconds) or a number of milliseconds, the layout assigned for this container will buffer the frequency it calculates and does a re-layout of components. This is useful for heavy containers or containers with a large amount of sub components that frequent calls to layout are expensive. ]]></description>
		</attribute>
		<attribute>
			<name>defaultType</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[defaultType : String
The default type of container represented by this object as registered in Ext.ComponentMgr (defaults to 'panel'). ]]></description>
		</attribute>
		<attribute>
			<name>defaults</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[defaults : Object
A config object that will be applied to all components added to this container either via the items config or via the add or insert methods. The defaults config can contain any number of name/value property pairs to be added to each item, and should be valid for the types of items being added to the container. For example, to automatically apply padding to the body of each of a set of contained Ext.Panel items, you could pass: defaults: {bodyStyle:'padding:15px'}. ]]></description>
		</attribute>
		<attribute>
			<name>hideBorders</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideBorders : Boolean
True to hide the borders of each contained component, false to defer to the component's existing border settings (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>items</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[items : Mixed
A single item, or an array of child Components to be added to this container. Each item can be any type of object based on Ext.Component.Component config objects may also be specified in order to avoid the overhead of constructing a real Component object if lazy rendering might mean that the added Component will not be rendered immediately. To take advantage of this 'lazy instantiation', set the Ext.Component.xtype config property to the registered type of the Component wanted.For a list of all available xtypes, see Ext.Component. If a single item is being passed, it should be passed directly as an object reference (e.g., items: {...}). Multiple items should be passed as an array of objects (e.g., items: [{...}, {...}]). ]]></description>
		</attribute>
		<attribute>
			<name>layoutConfig</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[layoutConfig : Object
This is a config object containing properties specific to the chosen layout (to be used in conjunction with the layout config value). For complete details regarding the valid config options for each layout type, see the layout class corresponding to the type specified:Ext.layout.Accordion Ext.layout.AnchorLayoutExt.layout.BorderLayout Ext.layout.CardLayout Ext.layout.ColumnLayoutExt.layout.FitLayout Ext.layout.FormLayout Ext.layout.TableLayout]]></description>
		</attribute>
		<attribute>
			<name>monitorResize</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[monitorResize : Boolean
True to automatically monitor window resize events to handle anything that is sensitive to the current size of the viewport. This value is typically managed by the chosen layout and should not need to be set manually. ]]></description>
		</attribute>
		<attribute>
			<name>layout</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[layout : String
The layout type to be used in this container. If not specified, a default Ext.layout.ContainerLayout will be created and used. Valid values are: accordion, anchor, border, card, column, fit, form and table. Specific config values for the chosen layout type can be specified using layoutConfig. ]]></description>
		</attribute>
		<attribute>
			<name>autoHeight</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoHeight : Boolean
True to use height:'auto', false to use fixed height (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>autoWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoWidth : Boolean
True to use width:'auto', false to use fixed width (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>height</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[height : Number
The height of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>width</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[width : Number
The width of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>progressBar</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.ProgressBar
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[An updateable progress bar component. The progress bar supports two different modes: manual and automatic.In manual mode, you are responsible for showing, updating (via updateProgress) and clearing the progress bar as needed from your own code. This method is most appropriate when you want to show progress throughout an operation that has predictable points of interest at which you can update the control.In automatic mode, you simply call wait and let the progress bar run indefinitely, only clearing it once the operation is complete. You can optionally have the progress bar wait for a specific amount of time and then clear itself. Automatic mode is most appropriate for timed operations or asymchronous operations in which you have no need for indicating intermediate progress.]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>baseCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[baseCls : String
The base CSS class to apply to the progress bar's wrapper element (defaults to 'x-progress') ]]></description>
		</attribute>
		<attribute>
			<name>textEl</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[textEl : Mixed
The element to render the progress text to (defaults to the progress bar's internal text element) ]]></description>
		</attribute>
		<attribute>
			<name>value</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Float</type>
			<description><![CDATA[value : Float
A floating point value between 0 and 1 (e.g., .5, defaults to 0) ]]></description>
		</attribute>
		<attribute>
			<name>text</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[text : String
The progress bar text (defaults to '') ]]></description>
		</attribute>
		<attribute>
			<name>autoHeight</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoHeight : Boolean
True to use height:'auto', false to use fixed height (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>autoWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoWidth : Boolean
True to use width:'auto', false to use fixed width (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>height</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[height : Number
The height of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>width</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[width : Number
The width of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>quickTip</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.QuickTip
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[A specialized tooltip class for tooltips that can be specified in markup and automatically managed by the global Ext.QuickTips instance. See the QuickTips class header for additional usage details and examples. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>interceptTitles</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[interceptTitles : Boolean
True to automatically use the element's DOM title value if available (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>autoHide</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoHide : Boolean
True to automatically hide the tooltip after the mouse exits the target element or after the dismissDelay has expired if set (defaults to true). If closable = true a close tool button will be rendered into the tooltip header. ]]></description>
		</attribute>
		<attribute>
			<name>hideDelay</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[hideDelay : Number
Delay in milliseconds after the mouse exits the target element but before the tooltip actually hides (defaults to 200). Set to 0 for the tooltip to hide immediately. ]]></description>
		</attribute>
		<attribute>
			<name>mouseOffset</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[mouseOffset : Array
An XY offset from the mouse position where the tooltip should be shown (defaults to [15,18]). ]]></description>
		</attribute>
		<attribute>
			<name>showDelay</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[showDelay : Number
Delay in milliseconds before the tooltip displays after the mouse enters the target element (defaults to 500) ]]></description>
		</attribute>
		<attribute>
			<name>trackMouse</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[trackMouse : Boolean
True to have the tooltip follow the mouse as it moves over the target element (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>dismissDelay</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[dismissDelay : Number
Delay in milliseconds before the tooltip automatically hides (defaults to 5000). To disable automatic hiding, set dismissDelay = 0. ]]></description>
		</attribute>
		<attribute>
			<name>target</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[target : Mixed
The target HTMLElement, Ext.Element or id to associate with this tooltip. ]]></description>
		</attribute>
		<attribute>
			<name>shadow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[shadow : Boolean/String
True or 'sides' for the default effect, 'frame' for 4-way shadow, and 'drop' for bottom-right shadow (defaults to 'sides'). ]]></description>
		</attribute>
		<attribute>
			<name>defaultAlign</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[defaultAlign : String
Experimental. The default Ext.Element.alignTo anchor position value for this tip relative to its element of origin (defaults to 'tl-bl?'). ]]></description>
		</attribute>
		<attribute>
			<name>closable</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[closable : Boolean
True to render a close tool button into the tooltip header (defaults to false).]]></description>
		</attribute>
		<attribute>
			<name>maxWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[maxWidth : Number
The maximum width of the tip in pixels (defaults to 300). ]]></description>
		</attribute>
		<attribute>
			<name>minWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[minWidth : Number
The minimum width of the tip in pixels (defaults to 40). ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>quickTips</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.QuickTips
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Provides attractive and customizable tooltips for any element. The QuickTips singleton is used to configure and manage tooltips globally for multiple elements in a generic manner. To create individual tooltips with maximum customizability, you should consider either Ext.Tip or Ext.ToolTip.Quicktips can be configured via tag attributes directly in markup, or by registering quick tips programmatically via the register method.The singleton's instance of Ext.QuickTip is available via getQuickTip, and supports all the methods, and all the all the configuration properties of Ext.QuickTip. These settings will apply to all tooltips shown by the singleton.Below is the summary of the configuration properties which can be used. For detailed descriptions see getQuickTipQuickTips singleton configs (all are optional)dismissDelay hideDelay maxWidth minWidth showDelay trackMouseTarget element configs (optional unless otherwise noted)autoHide cls dismissDelay (overrides singleton value)target (required) text (required) title widthHere is an example showing how some of these config options could be used:// Init the singleton.  Any tag-based quick tips will start working.Ext.QuickTips.init();// Apply a set of config properties to the singletonExt.apply(Ext.QuickTips.getQuickTip(), {    maxWidth: 200,    minWidth: 100,    showDelay: 50,    trackMouse: true});// Manually register a quick tip for a specific elementq.register({    target: 'my-div',    title: 'My Tooltip',    text: 'This tooltip was added in code',    width: 100,    dismissDelay: 20});To register a quick tip in markup, you simply add one or more of the valid QuickTip attributes prefixed with the ext: namespace. The HTML element itself is automatically set as the quick tip target. Here is the summary of supported attributes (optional unless otherwise noted):hide: Specifying 'user' is equivalent to setting autoHide = false. Any other value will be the same as autoHide = true. qclass: A CSS class to be applied to the quick tip (equivalent to the 'cls' target element config). qtip (required): The quick tip text (equivalent to the 'text' target element config). qtitle: The quick tip title (equivalent to the 'title' target element config). qwidth: The quick tip width (equivalent to the 'width' target element config).Here is an example of configuring an HTML element to display a tooltip from markup:// Add a quick tip to an HTML button<input type='button' value='OK' ext:qtitle='OK Button' ext:qwidth='100'     ext:qtip='This is a quick tip from markup!'></input>This class is a singleton and cannot be created directly. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>resizable</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.Resizable
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Applies drag handles to an element to make it resizable. The drag handles are inserted into the element and positioned absolute. Some elements, such as a textarea or image, don't support this. To overcome that, you can wrap the textarea in a div and set 'resizeChild' to true (or to the id of the element), or set wrap:true in your config and the element will be wrapped for you automatically.Here is the list of valid resize handles:Value   Description------  ------------------- 'n'     north 's'     south 'e'     east 'w'     west 'nw'    northwest 'sw'    southwest 'se'    southeast 'ne'    northeast 'all'   allHere's an example showing the creation of a typical Resizable:var resizer = new Ext.Resizable('element-id', {    handles: 'all',    minWidth: 200,    minHeight: 100,    maxWidth: 500,    maxHeight: 400,    pinned: true});resizer.on('resize', myHandler);To hide a particular handle, set its display to none in CSS, or through script:resizer.east.setDisplayed(false);]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>height</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[height : Number
The height of the element in pixels (defaults to null) ]]></description>
		</attribute>
		<attribute>
			<name>duration</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[duration : Number
Animation duration if animate = true (defaults to .35) ]]></description>
		</attribute>
		<attribute>
			<name>easing</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[easing : String
Animation easing if animate = true (defaults to 'easingOutStrong') ]]></description>
		</attribute>
		<attribute>
			<name>draggable</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[draggable : Boolean
Convenience to initialize drag drop (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>adjustments</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[adjustments : Array/String
String 'auto' or an array [width, height] with values to be added to the resize operation's new size (defaults to [0, 0]) ]]></description>
		</attribute>
		<attribute>
			<name>animate</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[animate : Boolean
True to animate the resize (not compatible with dynamic sizing, defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>disableTrackOver</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[disableTrackOver : Boolean
True to disable mouse tracking. This is only applied at config time. (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>dynamic</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[dynamic : Boolean
True to resize the element while dragging instead of using a proxy (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>handles</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[handles : String
String consisting of the resize handles to display (defaults to undefined) ]]></description>
		</attribute>
		<attribute>
			<name>heightIncrement</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[heightIncrement : Number
The increment to snap the height resize in pixels (dynamic must be true, defaults to 0) ]]></description>
		</attribute>
		<attribute>
			<name>maxHeight</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[minHeight : Number
The minimum height for the element (defaults to 5) ]]></description>
		</attribute>
		<attribute>
			<name>minHeight</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[minHeight : Number
The minimum height for the element (defaults to 5) ]]></description>
		</attribute>
		<attribute>
			<name>minX</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[minX : Number
The minimum allowed page X for the element (only used for west resizing, defaults to 0) ]]></description>
		</attribute>
		<attribute>
			<name>minY</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[minY : Number
The minimum allowed page Y for the element (only used for north resizing, defaults to 0) ]]></description>
		</attribute>
		<attribute>
			<name>multiDirectional</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[multiDirectional : Boolean
Deprecated. The old style of adding multi-direction resize handles, deprecated in favor of the handles config option (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>pinned</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[pinned : Boolean
True to ensure that the resize handles are always visible, false to display them only when the user mouses over the resizable borders. This is only applied at config time. (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>preserveRatio</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[preserveRatio : Boolean
True to preserve the original ratio between height and width during resize (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>resizeChild</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[resizeChild : Boolean/String/Element
True to resize the first child, or id/element to resize (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>resizeRegion</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[resizeRegion : Ext.lib.Region
Constrain the resize to a particular region ]]></description>
		</attribute>
		<attribute>
			<name>transparent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[transparent : Boolean
True for transparent handles. This is only applied at config time. (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>widthIncrement</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[widthIncrement : Number
The increment to snap the width resize in pixels (dynamic must be true, defaults to 0) ]]></description>
		</attribute>
		<attribute>
			<name>wrap</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[wrap : Boolean
True to wrap an element with a div if needed (required for textareas and images, defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>enabled</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enabled : Boolean
False to disable resizing (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>width</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[width : Number
The width of the element in pixels (defaults to null) ]]></description>
		</attribute>
		<attribute>
			<name>maxWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[maxWidth : Number
The maximum width for the element (defaults to 10000) ]]></description>
		</attribute>
		<attribute>
			<name>minWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[minWidth : Number
The minimum width for the element (defaults to 5) ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>shadow</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.Shadow
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Simple class that can provide a shadow effect for any element. Note that the element MUST be absolutely positioned, and the shadow does not provide any shimming. This should be used only in simple cases -- for more advanced functionality that can also provide the same shadow effect, see the Ext.Layer class. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>offset</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[offset : String
The number of pixels to offset the shadow from the element (defaults to 4) ]]></description>
		</attribute>
		<attribute>
			<name>mode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[mode : String
The shadow display mode. Supports the following options:sides: Shadow displays on both sides and bottom onlyframe: Shadow displays equally on all four sidesdrop: Traditional bottom-right drop shadow (default) ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>splitBar</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.SplitBar
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Creates draggable splitter bar functionality from two elements (element to be dragged and element to be resized). Usage: var split = new Ext.SplitBar('elementToDrag', 'elementToSize',                   Ext.SplitBar.HORIZONTAL, Ext.SplitBar.LEFT);split.setAdapter(new Ext.SplitBar.AbsoluteLayoutAdapter('container'));split.minSize = 100;split.maxSize = 600;split.animate = true;split.on('moved', splitterMoved);]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>splitButton</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.SplitButton
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[A split button that provides a built-in dropdown arrow that can fire an event separately from the default click event of the button. Typically this would be used to display a dropdown menu that provides additional options to the primary button action, but any custom handler can provide the arrowclick implementation. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>arrowHandler</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[arrowHandler : Function
A function called when the arrow button is clicked (can be used instead of click event) ]]></description>
		</attribute>
		<attribute>
			<name>arrowTooltip</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[arrowTooltip : String
The title attribute of the arrow ]]></description>
		</attribute>
		<attribute>
			<name>disabled</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[disabled : Boolean
True to start disabled (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>handler</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[A function called when the button is clicked (can be used instead of click event) ]]></description>
		</attribute>
		<attribute>
			<name>iconCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[iconCls : String
A css class which sets a background image to be used as the icon for this button ]]></description>
		</attribute>
		<attribute>
			<name>scope</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[scope : Object
The scope of the handler ]]></description>
		</attribute>
		<attribute>
			<name>clickEvent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[clickEvent : String
The type of event to map to the button's event handler (defaults to 'click') ]]></description>
		</attribute>
		<attribute>
			<name>enableToggle</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enableToggle : Boolean
True to enable pressed/not pressed toggling (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>handleMouseEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[handleMouseEvents : Boolean
False to disable visual cues on mouseover, mouseout and mousedown (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>menu</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[menu : Mixed
Standard menu attribute consisting of a reference to a menu object, a menu id or a menu config blob (defaults to undefined). ]]></description>
		</attribute>
		<attribute>
			<name>menuAlign</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[menuAlign : String
The position to align the menu to (see Ext.Element.alignTo for more details, defaults to 'tl-bl?'). ]]></description>
		</attribute>
		<attribute>
			<name>repeat</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[repeat : Boolean/Object
True to repeat fire the click event while the mouse is down. This can also be an Ext.util.ClickRepeater config object (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>tabIndex</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[tabIndex : Number
Set a DOM tabIndex for this button (defaults to undefined) ]]></description>
		</attribute>
		<attribute>
			<name>toggleGroup</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[toggleGroup : String
The group this toggle button is a member of (only 1 per group can be pressed, only applies if enableToggle = true) ]]></description>
		</attribute>
		<attribute>
			<name>tooltip</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tooltip : String/Object
The tooltip for the button - can be a string or QuickTips config object ]]></description>
		</attribute>
		<attribute>
			<name>tooltipType</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tooltipType : String
The type of tooltip to use. Either 'qtip' (default) for QuickTips or 'title' for title attribute. ]]></description>
		</attribute>
		<attribute>
			<name>text</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[text : String
The button text ]]></description>
		</attribute>
		<attribute>
			<name>icon</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[icon : String
The path to an image to display in the button (the image will be set as the background-image CSS property of the button by default, so if you want a mixed icon/text button, set cls:'x-btn-text-icon') ]]></description>
		</attribute>
		<attribute>
			<name>pressed</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[pressed : Boolean
True to start pressed (only if enableToggle = true) ]]></description>
		</attribute>
		<attribute>
			<name>type</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[type : String
submit, reset or button - defaults to 'button' ]]></description>
		</attribute>
		<attribute>
			<name>minWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[minWidth : Number
The minimum width for this button (used to give a set of buttons a common width) ]]></description>
		</attribute>
		<attribute>
			<name>hidden</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hidden : Boolean
True to start hidden (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>storeMgr</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.StoreMgr
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[The default global group of stores.This class is a singleton and cannot be created directly. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>tabPanel</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.TabPanel
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[A basic tab container. Tab panels can be used exactly like a standard Ext.Panel for layout purposes, but also have special support for containing child Panels that get automatically converted into tabs.There is no actual tab class �� each tab is simply an Ext.Panel. However, when rendered in a TabPanel, each child Panel can fire additional events that only exist for tabs and are not available to other Panels. These are:activate: Fires when this Panel becomes the active tab. Listeners will be called with the following arguments:tab : Panel The tab that was activateddeactivate: Fires when this Panel that was the active tab becomes deactivated.Listeners will be called with the following arguments:tab : Panel The tab that was deactivatedThere are several methods available for creating TabPanels. The output of the following examples should be exactly the same. The tabs can be created and rendered completely in code, as in this example:var tabs = new Ext.TabPanel({    renderTo: Ext.getBody(),    activeTab: 0,    items: [{        title: 'Tab 1',        html: 'A simple tab'    },{        title: 'Tab 2',        html: 'Another one'    }]});TabPanels can also be rendered from markup in a couple of ways. See the autoTabs example for rendering entirely from markup that is already structured correctly as a TabPanel (a container div with one or more nested tab divs with class 'x-tab'). You can also render from markup that is not strictly structured by simply specifying by id which elements should be the container and the tabs. Using this method, tab content can be pulled from different elements within the page by id regardless of page structure. Note that the tab divs in this example contain the class 'x-hide-display' so that they can be rendered deferred without displaying outside the tabs. You could alternately set deferredRender to false to render all content tabs on page load. For example:var tabs = new Ext.TabPanel({    renderTo: 'my-tabs',    activeTab: 0,    items:[        {contentEl:'tab1', title:'Tab 1'},        {contentEl:'tab2', title:'Tab 2'}    ]});// Note that the tabs do not have to be nested within the container (although they can be)<div id='my-tabs'></div><div id='tab1' class='x-hide-display'>A simple tab</div><div id='tab2' class='x-hide-display'>Another one</div>]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>activeTab</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[activeTab : String/Number
A string id or the numeric index of the tab that should be initially activated on render (defaults to none). ]]></description>
		</attribute>
		<attribute>
			<name>animScroll</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[animScroll : Boolean
True to animate tab scrolling so that hidden tabs slide smoothly into view (defaults to true). Only applies when enableTabScroll = true. ]]></description>
		</attribute>
		<attribute>
			<name>autoTabSelector</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[autoTabSelector : String
The CSS selector used to search for tabs in existing markup when autoTabs = true (defaults to 'div.x-tab'). This can be any valid selector supported by Ext.DomQuery.select. Note that the query will be executed within the scope of this tab panel only (so that multiple tab panels from markup can be supported on a page). ]]></description>
		</attribute>
		<attribute>
			<name>autoTabs</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoTabs : Boolean
True to query the DOM for any divs with a class of 'x-tab' to be automatically converted to tabs and added to this panel (defaults to false). Note that the query will be executed within the scope of the container element only (so that multiple tab panels from markup can be supported via this method).This method is only possible when the markup is structured correctly as a container with nested divs containing the class 'x-tab'. To create TabPanels without these limitations, or to pull tab content from other elements on the page, see the example at the top of the class for generating tabs from markup.There are a couple of things to note when using this method: When using the autoTabs config (as opposed to passing individual tab configs in the TabPanel's items collection), you must use applyTo to correctly use the specified id as the tab container. The autoTabs method replaces existing content with the TabPanel components. Make sure that you set deferredRender to false so that the content elements for each tab will be rendered into the TabPanel immediately upon page load, otherwise they will not be transformed until each tab is activated and will be visible outside the TabPanel.Example usage: var tabs = new Ext.TabPanel({    applyTo: 'my-tabs',   activeTab: 0,    deferredRender: false,    autoTabs: true});// This markup will be converted to a TabPanel from the code above<div id='my-tabs'>    <div class='x-tab' title='Tab 1'>A simple tab</div>    <div class='x-tab' title='Tab 2'>Another one</div></div>]]></description>
		</attribute>
		<attribute>
			<name>deferredRender</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[deferredRender : Boolean
Internally, the TabPanel uses a Ext.layout.CardLayout to manage its tabs. This property will be passed on to the layout as its Ext.layout.CardLayout.deferredRender config value, determining whether or not each tab is rendered only when first accessed (defaults to true).]]></description>
		</attribute>
		<attribute>
			<name>enableTabScroll</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enableTabScroll : Number
True to enable scrolling to tabs that may be invisible due to overflowing the overall TabPanel width. Only available with tabs on top. (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>layoutOnTabChange</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[layoutOnTabChange : Boolean
Set to true to do a layout of tab items as tabs are changed. ]]></description>
		</attribute>
		<attribute>
			<name>minTabWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[minTabWidth : Number
The minimum width in pixels for each tab when resizeTabs = true (defaults to 30). ]]></description>
		</attribute>
		<attribute>
			<name>plain</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[plain : Boolean
True to render the tab strip without a background container image (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>resizeTabs</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[resizeTabs : Boolean
True to automatically resize each tab so that the tabs will completely fill the tab strip (defaults to false). Setting this to true may cause specific widths that might be set per tab to be overridden in order to fit them all into view (although minTabWidth will always be honored). ]]></description>
		</attribute>
		<attribute>
			<name>scrollDuration</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Float</type>
			<description><![CDATA[scrollDuration : Float
The number of milliseconds that each scroll animation should last (defaults to .35). Only applies when animScroll = true. ]]></description>
		</attribute>
		<attribute>
			<name>scrollIncrement</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[scrollIncrement : Number
The number of pixels to scroll each time a tab scroll button is pressed (defaults to 100, or if resizeTabs = true, the calculated tab width). Only applies when enableTabScroll = true. ]]></description>
		</attribute>
		<attribute>
			<name>scrollRepeatInterval</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[scrollRepeatInterval : Number
Number of milliseconds between each scroll while a tab scroll button is continuously pressed (defaults to 400). ]]></description>
		</attribute>
		<attribute>
			<name>tabMargin</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[tabMargin : Number
The number of pixels of space to calculate into the sizing and scrolling of tabs. If you change the margin in CSS, you will need to update this value so calculations are correct with either resizeTabs or scrolling tabs. (defaults to 2) ]]></description>
		</attribute>
		<attribute>
			<name>tabPosition</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tabPosition : String
The position where the tab strip should be rendered (defaults to 'top'). The only other supported value is 'bottom'. Note that tab scrolling is only supported for position 'top'. ]]></description>
		</attribute>
		<attribute>
			<name>tabWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[tabWidth : Number
The initial width in pixels of each new tab (defaults to 120). ]]></description>
		</attribute>
		<attribute>
			<name>wheelIncrement</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[wheelIncrement : Number
For scrolling tabs, the number of pixels to increment on mouse wheel scrolling (defaults to 20). ]]></description>
		</attribute>
		<attribute>
			<name>iconCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[iconCls : String
A CSS class that will provide a background image to be used as the panel header icon (defaults to ''). ]]></description>
		</attribute>
		<attribute>
			<name>shadow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[minButtonWidth : Number
Minimum width in pixels of all buttons in this panel (defaults to 75) ]]></description>
		</attribute>
		<attribute>
			<name>shadowOffset</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[shadowOffset : Number
The number of pixels to offset the shadow if displayed (defaults to 4). Note that this option only applies when floating = true. ]]></description>
		</attribute>
		<attribute>
			<name>shim</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[shim : Boolean
False to disable the iframe shim in browsers which need one (defaults to true). Note that this option only applies when floating = true. ]]></description>
		</attribute>
		<attribute>
			<name>animCollapse</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[animCollapse : Boolean
True to animate the transition when the panel is collapsed, false to skip the animation (defaults to true if the Ext.Fx class is available, otherwise false). ]]></description>
		</attribute>
		<attribute>
			<name>autoLoad</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[autoLoad : Object/String/Function
A valid url spec according to the Updater Ext.Updater.update method. If autoLoad is not null, the panel will attempt to load its contents immediately upon render.The URL will become the default URL for this panel's body element, so it may be refreshed at any time.]]></description>
		</attribute>
		<attribute>
			<name>autoScroll</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoScroll : Boolean
True to use overflow:'auto' on the panel's body element and show scroll bars automatically when necessary, false to clip any overflowing content (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>baseCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[baseCls : String
The base CSS class to apply to this panel's element (defaults to 'x-panel').]]></description>
		</attribute>
		<attribute>
			<name>bbar</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[bbar : Object/Array
The bottom toolbar of the panel. This can be a Ext.Toolbar object, a toolbar config, or an array of buttons/button configs to be added to the toolbar. Note that this is not available as a property after render. To access the bottom toolbar after render, use getBottomToolbar. ]]></description>
		</attribute>
		<attribute>
			<name>bodyBorder</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[bodyBorder : Boolean
True to display an interior border on the body element of the panel, false to hide it (defaults to true). This only applies when border == true. If border == true and bodyBorder == false, the border will display as a 1px wide inset border, giving the entire body element an inset appearance. ]]></description>
		</attribute>
		<attribute>
			<name>bodyStyle</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[bodyStyle : String/Object/Function
Custom CSS styles to be applied to the body element in the format expected by Ext.Element.applyStyles (defaults to null). ]]></description>
		</attribute>
		<attribute>
			<name>buttonAlign</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[buttonAlign : String
The alignment of any buttons added to this panel. Valid values are 'right,' 'left' and 'center' (defaults to 'right'). ]]></description>
		</attribute>
		<attribute>
			<name>buttons</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[buttons : Array
An array of Ext.Button configs used to add buttons to the footer of this panel. ]]></description>
		</attribute>
		<attribute>
			<name>collapseFirst</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[collapseFirst : Boolean
True to make sure the collapse/expand toggle button always renders first (to the left of) any other tools in the panel's title bar, false to render it last (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>collapsed</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[collapsed : Boolean
True to render the panel collapsed, false to render it expanded (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>collapsedCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[collapsedCls : String
A CSS class to add to the panel's element after it has been collapsed (defaults to 'x-panel-collapsed'). ]]></description>
		</attribute>
		<attribute>
			<name>collapsible</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[collapsible : Boolean
True to make the panel collapsible and have the expand/collapse toggle button automatically rendered into the header tool button area, false to keep the panel statically sized with no button (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>contentEl</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[contentEl : String
The id of an existing HTML node to use as the panel's body content (defaults to ''). ]]></description>
		</attribute>
		<attribute>
			<name>draggable</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[draggable : Boolean
True to enable dragging of this Panel (defaults to false). For custom drag/drop implementations, an Ext.Panel.DD config could also be passed in this config instead of true, although Ext.Panel.DD is an internal, undocumented class]]></description>
		</attribute>
		<attribute>
			<name>elements</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[elements : String
A comma-delimited list of panel elements to initialize when the panel is rendered. Normally, this list will be generated automatically based on the items added to the panel at config time, but sometimes it might be useful to make sure a structural element is rendered even if not specified at config time (for example, you may want to add a button or toolbar dynamically after the panel has been rendered). Adding those elements to this list will allocate the required placeholders in the panel when it is rendered. Valid values areheader tbar (top bar)body bbar (bottom bar)footer Defaults to 'body'. ]]></description>
		</attribute>
		<attribute>
			<name>footer</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[footer : Boolean
True to create the footer element explicitly, false to skip creating it. By default, when footer is not specified, if one or more buttons have been added to the panel the footer will be created automatically, otherwise it will not. ]]></description>
		</attribute>
		<attribute>
			<name>header</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[header : Boolean
True to create the header element explicitly, false to skip creating it. By default, when header is not specified, if a title is set the header will be created automatically, otherwise it will not. If a title is set but header is explicitly set to false, the header will not be rendered. ]]></description>
		</attribute>
		<attribute>
			<name>headerAsText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[headerAsText : Boolean
True to display the panel title in the header, false to hide it (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>hideCollapseTool</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideCollapseTool : Boolean
True to hide the expand/collapse toggle button when collapsible = true, false to display it (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>html</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[html : String/Object
An HTML fragment, or a DomHelper specification to use as the panel's body content (defaults to ''). ]]></description>
		</attribute>
		<attribute>
			<name>keys</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[keys : Object/Array
A KeyMap config object (in the format expected by Ext.KeyMap.addBinding used to assign custom key handling to this panel (defaults to null). ]]></description>
		</attribute>
		<attribute>
			<name>maskDisabled</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[maskDisabled : Boolean
True to mask the panel when it is disabled, false to not mask it (defaults to true). Either way, the panel will always tell its contained elements to disable themselves when it is disabled, but masking the panel can provide an additional visual cue that the panel is disabled. ]]></description>
		</attribute>
		<attribute>
			<name>minButtonWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>tbar</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tbar : Object/Array
The top toolbar of the panel. This can be either an Ext.Toolbar object or an array of buttons/button configs to be added to the toolbar. Note that this is not available as a property after render. To access the top toolbar after render, use getTopToolbar. ]]></description>
		</attribute>
		<attribute>
			<name>titleCollapse</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[titleCollapse : Boolean
True to allow expanding and collapsing the panel (when collapsible = true) by clicking anywhere in the header bar, false to allow it only by clicking to tool button (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>tools</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tools : Array
An array of tool button configs to be added to the header tool area. Each tool config may contain the following properties:id : String Required. The type of tool to create. Values may betoggle (Created by default when collapsible is true)close minimizemaximize restore gear pin unpin right left up downrefreshminus plus help searchsave handler : FunctionRequired. The function to call when clicked. Arguments passed are:event : Ext.EventObject The click event.toolEl : Ext.ElementThe tool Element.Panel : Ext.Panel The host Panelscope : Object The scope in which to call the handler.qtip : String/Object A tip string, or a config argument to Ext.QuickTip.registerhidden : Boolean True to initially render hidden.on : Object A listener config object specifiying event listeners in the format of an argument to addListenerExample usage: tools:[{    id:'refresh',    // hidden:true,    handler: function(event, toolEl, panel){        // refresh logic    }}]Note that apart from the toggle tool which is provided when a panel is collapsible, these tools only provide the visual button. Any required functionality must be provided by adding handlers that implement the necessary behavior. ]]></description>
		</attribute>
		<attribute>
			<name>region</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>title</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[title : String
The title text to display in the panel header (defaults to ''). When a title is specified the header element will automatically be created and displayed unless header is explicitly set to false. If you don't want to specify a title at config time, but you may want one later, you must either specify a non-empty title (a blank space ' ' will do) or header:true so that the container element will get created. ]]></description>
		</attribute>
		<attribute>
			<name>frame</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[frame : Boolean
True to render the panel with custom rounded borders, false to render with plain 1px square borders (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>border</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[border : Boolean
True to display the borders of the panel's body element, false to hide them (defaults to true). By default, the border is a 2px wide inset border, but this can be further altered by setting bodyBorder to false. ]]></description>
		</attribute>
		<attribute>
			<name>floating</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[floating : Boolean
True to float the panel (absolute position it with automatic shimming and shadow), false to display it inline where it is rendered (defaults to false). Note that by default, setting floating to true will cause the panel to display at negative offsets so that it is hidden -- because the panel is absolute positioned, the position must be set explicitly after render (e.g., myPanel.setPosition(100,100);). Also, when floating a panel you should always assign a fixed width, otherwise it will be auto width and will expand to fill to the right edge of the viewport. ]]></description>
		</attribute>
		<attribute>
			<name>activeItem</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[activeItem : String/Number
A string component id or the numeric index of the component that should be initially activated within the container's layout on render. For example, activeItem: 'item-1' or activeItem: 0 (index 0 = the first item in the container's collection). activeItem only applies to layout styles that can display items one at a time (like Ext.layout.Accordion, Ext.layout.CardLayout and Ext.layout.FitLayout). Related to Ext.layout.ContainerLayout.activeItem. ]]></description>
		</attribute>
		<attribute>
			<name>autoDestroy</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoDestroy : BooleanIf true the container will automatically destroy any contained component that is removed from it, else destruction must be handled manually (defaults to true).]]></description>
		</attribute>
		<attribute>
			<name>bufferResize</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[bufferResize : Boolean/Number
When set to true (100 milliseconds) or a number of milliseconds, the layout assigned for this container will buffer the frequency it calculates and does a re-layout of components. This is useful for heavy containers or containers with a large amount of sub components that frequent calls to layout are expensive. ]]></description>
		</attribute>
		<attribute>
			<name>defaultType</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[defaultType : String
The default type of container represented by this object as registered in Ext.ComponentMgr (defaults to 'panel'). ]]></description>
		</attribute>
		<attribute>
			<name>defaults</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[defaults : Object
A config object that will be applied to all components added to this container either via the items config or via the add or insert methods. The defaults config can contain any number of name/value property pairs to be added to each item, and should be valid for the types of items being added to the container. For example, to automatically apply padding to the body of each of a set of contained Ext.Panel items, you could pass: defaults: {bodyStyle:'padding:15px'}. ]]></description>
		</attribute>
		<attribute>
			<name>hideBorders</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideBorders : Boolean
True to hide the borders of each contained component, false to defer to the component's existing border settings (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>items</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[items : Mixed
A single item, or an array of child Components to be added to this container. Each item can be any type of object based on Ext.Component.Component config objects may also be specified in order to avoid the overhead of constructing a real Component object if lazy rendering might mean that the added Component will not be rendered immediately. To take advantage of this 'lazy instantiation', set the Ext.Component.xtype config property to the registered type of the Component wanted.For a list of all available xtypes, see Ext.Component. If a single item is being passed, it should be passed directly as an object reference (e.g., items: {...}). Multiple items should be passed as an array of objects (e.g., items: [{...}, {...}]). ]]></description>
		</attribute>
		<attribute>
			<name>layoutConfig</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[layoutConfig : Object
This is a config object containing properties specific to the chosen layout (to be used in conjunction with the layout config value). For complete details regarding the valid config options for each layout type, see the layout class corresponding to the type specified:Ext.layout.Accordion Ext.layout.AnchorLayoutExt.layout.BorderLayout Ext.layout.CardLayout Ext.layout.ColumnLayoutExt.layout.FitLayout Ext.layout.FormLayout Ext.layout.TableLayout]]></description>
		</attribute>
		<attribute>
			<name>monitorResize</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[monitorResize : Boolean
True to automatically monitor window resize events to handle anything that is sensitive to the current size of the viewport. This value is typically managed by the chosen layout and should not need to be set manually. ]]></description>
		</attribute>
		<attribute>
			<name>layout</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[layout : String
The layout type to be used in this container. If not specified, a default Ext.layout.ContainerLayout will be created and used. Valid values are: accordion, anchor, border, card, column, fit, form and table. Specific config values for the chosen layout type can be specified using layoutConfig. ]]></description>
		</attribute>
		<attribute>
			<name>autoHeight</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoHeight : Boolean
True to use height:'auto', false to use fixed height (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>autoWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoWidth : Boolean
True to use width:'auto', false to use fixed width (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>height</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[height : Number
The height of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>width</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[width : Number
The width of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>taskMgr</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.TaskMgr
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[A static Ext.util.TaskRunner instance that can be used to start and stop arbitrary tasks. See Ext.util.TaskRunner for supported methods and task config properties.// Start a simple clock task that updates a div once per secondvar task = {    run: function(){        Ext.fly('clock').update(new Date().format('g:i:s A'));    },    interval: 1000 //1 second}Ext.TaskMgr.start(task);This class is a singleton and cannot be created directly. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>template</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.Template
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Represents an HTML fragment template. Templates can be precompiled for greater performance. For a list of available format functions, see Ext.util.Format.Usage: var t = new Ext.Template(    '<div name='{id}'>',        '<span class='{cls}'>{name:trim} {value:ellipsis(10)}</span>',    '</div>');t.append('some-element', {id: 'myid', cls: 'myclass', name: 'foo', value: 'bar'});For more information see this blog post with examples: DomHelper - Create Elements using DOM, HTML fragments and Templates. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>tip</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.Tip
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[This is the base class for Ext.QuickTip and Ext.Tooltip that provides the basic layout and positioning that all tip-based classes require. This class can be used directly for simple, statically-positioned tips that are displayed programmatically, or it can be extended to provide custom tip implementations. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>shadow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[shadow : Boolean/String
True or 'sides' for the default effect, 'frame' for 4-way shadow, and 'drop' for bottom-right shadow (defaults to 'sides'). ]]></description>
		</attribute>
		<attribute>
			<name>defaultAlign</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[defaultAlign : String
Experimental. The default Ext.Element.alignTo anchor position value for this tip relative to its element of origin (defaults to 'tl-bl?'). ]]></description>
		</attribute>
		<attribute>
			<name>closable</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[closable : Boolean
True to render a close tool button into the tooltip header (defaults to false).]]></description>
		</attribute>
		<attribute>
			<name>maxWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[maxWidth : Number
The maximum width of the tip in pixels (defaults to 300). ]]></description>
		</attribute>
		<attribute>
			<name>minWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[minWidth : Number
The minimum width of the tip in pixels (defaults to 40). ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>toolBarSpacer</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.ToolBarSpacer
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>toolTip</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.ToolTip
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[A standard tooltip implementation for providing additional information when hovering over a target element. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>autoHide</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoHide : Boolean
True to automatically hide the tooltip after the mouse exits the target element or after the dismissDelay has expired if set (defaults to true). If closable = true a close tool button will be rendered into the tooltip header. ]]></description>
		</attribute>
		<attribute>
			<name>hideDelay</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[hideDelay : Number
Delay in milliseconds after the mouse exits the target element but before the tooltip actually hides (defaults to 200). Set to 0 for the tooltip to hide immediately. ]]></description>
		</attribute>
		<attribute>
			<name>mouseOffset</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[mouseOffset : Array
An XY offset from the mouse position where the tooltip should be shown (defaults to [15,18]). ]]></description>
		</attribute>
		<attribute>
			<name>showDelay</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[showDelay : Number
Delay in milliseconds before the tooltip displays after the mouse enters the target element (defaults to 500) ]]></description>
		</attribute>
		<attribute>
			<name>trackMouse</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[trackMouse : Boolean
True to have the tooltip follow the mouse as it moves over the target element (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>dismissDelay</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[dismissDelay : Number
Delay in milliseconds before the tooltip automatically hides (defaults to 5000). To disable automatic hiding, set dismissDelay = 0. ]]></description>
		</attribute>
		<attribute>
			<name>target</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[target : Mixed
The target HTMLElement, Ext.Element or id to associate with this tooltip. ]]></description>
		</attribute>
		<attribute>
			<name>shadow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[shadow : Boolean/String
True or 'sides' for the default effect, 'frame' for 4-way shadow, and 'drop' for bottom-right shadow (defaults to 'sides'). ]]></description>
		</attribute>
		<attribute>
			<name>defaultAlign</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[defaultAlign : String
Experimental. The default Ext.Element.alignTo anchor position value for this tip relative to its element of origin (defaults to 'tl-bl?'). ]]></description>
		</attribute>
		<attribute>
			<name>closable</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[closable : Boolean
True to render a close tool button into the tooltip header (defaults to false).]]></description>
		</attribute>
		<attribute>
			<name>maxWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[maxWidth : Number
The maximum width of the tip in pixels (defaults to 300). ]]></description>
		</attribute>
		<attribute>
			<name>minWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[minWidth : Number
The minimum width of the tip in pixels (defaults to 40). ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>toolbar</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.Toolbar
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Basic Toolbar class. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>autoHeight</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoHeight : Boolean
True to use height:'auto', false to use fixed height (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>autoWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoWidth : Boolean
True to use width:'auto', false to use fixed width (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>height</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[height : Number
The height of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>width</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[width : Number
The width of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>toolbarButton</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.ToolbarButton
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>disabled</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[disabled : Boolean
True to start disabled (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>handler</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[A function called when the button is clicked (can be used instead of click event) ]]></description>
		</attribute>
		<attribute>
			<name>iconCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[iconCls : String
A css class which sets a background image to be used as the icon for this button ]]></description>
		</attribute>
		<attribute>
			<name>scope</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[scope : Object
The scope of the handler ]]></description>
		</attribute>
		<attribute>
			<name>clickEvent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[clickEvent : String
The type of event to map to the button's event handler (defaults to 'click') ]]></description>
		</attribute>
		<attribute>
			<name>enableToggle</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enableToggle : Boolean
True to enable pressed/not pressed toggling (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>handleMouseEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[handleMouseEvents : Boolean
False to disable visual cues on mouseover, mouseout and mousedown (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>menu</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[menu : Mixed
Standard menu attribute consisting of a reference to a menu object, a menu id or a menu config blob (defaults to undefined). ]]></description>
		</attribute>
		<attribute>
			<name>menuAlign</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[menuAlign : String
The position to align the menu to (see Ext.Element.alignTo for more details, defaults to 'tl-bl?'). ]]></description>
		</attribute>
		<attribute>
			<name>repeat</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[repeat : Boolean/Object
True to repeat fire the click event while the mouse is down. This can also be an Ext.util.ClickRepeater config object (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>tabIndex</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[tabIndex : Number
Set a DOM tabIndex for this button (defaults to undefined) ]]></description>
		</attribute>
		<attribute>
			<name>toggleGroup</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[toggleGroup : String
The group this toggle button is a member of (only 1 per group can be pressed, only applies if enableToggle = true) ]]></description>
		</attribute>
		<attribute>
			<name>tooltip</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tooltip : String/Object
The tooltip for the button - can be a string or QuickTips config object ]]></description>
		</attribute>
		<attribute>
			<name>tooltipType</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tooltipType : String
The type of tooltip to use. Either 'qtip' (default) for QuickTips or 'title' for title attribute. ]]></description>
		</attribute>
		<attribute>
			<name>text</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[text : String
The button text ]]></description>
		</attribute>
		<attribute>
			<name>icon</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[icon : String
The path to an image to display in the button (the image will be set as the background-image CSS property of the button by default, so if you want a mixed icon/text button, set cls:'x-btn-text-icon') ]]></description>
		</attribute>
		<attribute>
			<name>pressed</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[pressed : Boolean
True to start pressed (only if enableToggle = true) ]]></description>
		</attribute>
		<attribute>
			<name>type</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[type : String
submit, reset or button - defaults to 'button' ]]></description>
		</attribute>
		<attribute>
			<name>minWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[minWidth : Number
The minimum width for this button (used to give a set of buttons a common width) ]]></description>
		</attribute>
		<attribute>
			<name>hidden</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hidden : Boolean
True to start hidden (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>toolbarFill</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.ToolbarFill
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>toolbarItem</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.ToolbarItem
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>toolbarSeparator</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.ToolbarSeparator
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>toolbarSplitButton</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.ToolbarSplitButton
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>arrowHandler</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[arrowHandler : Function
A function called when the arrow button is clicked (can be used instead of click event) ]]></description>
		</attribute>
		<attribute>
			<name>arrowTooltip</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[arrowTooltip : String
The title attribute of the arrow ]]></description>
		</attribute>
		<attribute>
			<name>disabled</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[disabled : Boolean
True to start disabled (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>handler</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[A function called when the button is clicked (can be used instead of click event) ]]></description>
		</attribute>
		<attribute>
			<name>iconCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[iconCls : String
A css class which sets a background image to be used as the icon for this button ]]></description>
		</attribute>
		<attribute>
			<name>scope</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[scope : Object
The scope of the handler ]]></description>
		</attribute>
		<attribute>
			<name>clickEvent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[clickEvent : String
The type of event to map to the button's event handler (defaults to 'click') ]]></description>
		</attribute>
		<attribute>
			<name>enableToggle</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enableToggle : Boolean
True to enable pressed/not pressed toggling (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>handleMouseEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[handleMouseEvents : Boolean
False to disable visual cues on mouseover, mouseout and mousedown (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>menu</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[menu : Mixed
Standard menu attribute consisting of a reference to a menu object, a menu id or a menu config blob (defaults to undefined). ]]></description>
		</attribute>
		<attribute>
			<name>menuAlign</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[menuAlign : String
The position to align the menu to (see Ext.Element.alignTo for more details, defaults to 'tl-bl?'). ]]></description>
		</attribute>
		<attribute>
			<name>repeat</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[repeat : Boolean/Object
True to repeat fire the click event while the mouse is down. This can also be an Ext.util.ClickRepeater config object (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>tabIndex</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[tabIndex : Number
Set a DOM tabIndex for this button (defaults to undefined) ]]></description>
		</attribute>
		<attribute>
			<name>toggleGroup</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[toggleGroup : String
The group this toggle button is a member of (only 1 per group can be pressed, only applies if enableToggle = true) ]]></description>
		</attribute>
		<attribute>
			<name>tooltip</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tooltip : String/Object
The tooltip for the button - can be a string or QuickTips config object ]]></description>
		</attribute>
		<attribute>
			<name>tooltipType</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tooltipType : String
The type of tooltip to use. Either 'qtip' (default) for QuickTips or 'title' for title attribute. ]]></description>
		</attribute>
		<attribute>
			<name>text</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[text : String
The button text ]]></description>
		</attribute>
		<attribute>
			<name>icon</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[icon : String
The path to an image to display in the button (the image will be set as the background-image CSS property of the button by default, so if you want a mixed icon/text button, set cls:'x-btn-text-icon') ]]></description>
		</attribute>
		<attribute>
			<name>pressed</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[pressed : Boolean
True to start pressed (only if enableToggle = true) ]]></description>
		</attribute>
		<attribute>
			<name>type</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[type : String
submit, reset or button - defaults to 'button' ]]></description>
		</attribute>
		<attribute>
			<name>minWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[minWidth : Number
The minimum width for this button (used to give a set of buttons a common width) ]]></description>
		</attribute>
		<attribute>
			<name>hidden</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hidden : Boolean
True to start hidden (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>toolbarSplitor</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.ToolbarSplitor
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>toolbarTextItem</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.ToolbarTextItem
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>updater</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.Updater
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Provides AJAX-style update for Element object.Usage:// Get it from a Ext.Element objectvar el = Ext.get('foo');var mgr = el.getUpdater();mgr.update({url: 'http://myserver.com/index.php',params: {param1: 'foo',param2: 'bar'}});...mgr.formUpdate('myFormId', 'http://myserver.com/index.php');// or directly (returns the same Updater instance)var mgr = new Ext.Updater('myElementId');mgr.startAutoRefresh(60, 'http://myserver.com/index.php');mgr.on('update', myFcnNeedsToKnow);   // short handed call directly from the element object   Ext.get('foo').load({        url: 'bar.php',        scripts: true,        params: 'param1=foo&param2=bar',        text: 'Loading Foo...'   });]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>viewport</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.Viewport
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[A specialized container representing the viewable application area (the browser viewport).The Viewport renders itself to the document body, and automatically sizes itself to the size of the browser viewport and manages window resizing. There may only be one Viewport created in a page. Inner layouts are available by virtue of the fact that all Panels added to the Viewport, either through its items, or through the items, or the add method of any of its child Panels may themselves have a layout.The Viewport does not provide scrolling, so child Panels within the Viewport should provide for scrolling if needed using the autoScroll config.Example showing a classic application border layout :new Ext.Viewport({    layout: 'border',    defaults: {        activeItem: 0,    },    items: [{        region: 'north',        html: 'Page Title',        autoHeight: true,        border: false,        margins: '0 0 5 0'    }, {        region: 'west',        collapsible: true,        title: 'Navigation',        xtype: 'treepanel',        width: 200,        autoScroll: true,        split: true,        loader: new Ext.tree.TreeLoader(),        root: new Ext.tree.AsyncTreeNode({            expanded: true,            children: [{                text: 'Menu Option 1',                leaf: true            }, {                text: 'Menu Option 2',                leaf: true            }, {                text: 'Menu Option 3',                leaf: true            }]        }),        rootVisible: false,        listeners: {            click: function(n) {                Ext.Msg.alert('Navigation Tree Click', 'You clicked: ' + n.attributes.text + '');            }        }    }, {        region: 'center',        xtype: 'tabpanel',        items: {            title: 'Default Tab',            html: 'The first tab's content. Others may be added dynamically'        }    }, {        region: 'south',        title: 'Information',        collapsible: true,        html: 'Information goes here',        split: true,        height: 100,        minHeight: 100    }]});]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>activeItem</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[activeItem : String/Number
A string component id or the numeric index of the component that should be initially activated within the container's layout on render. For example, activeItem: 'item-1' or activeItem: 0 (index 0 = the first item in the container's collection). activeItem only applies to layout styles that can display items one at a time (like Ext.layout.Accordion, Ext.layout.CardLayout and Ext.layout.FitLayout). Related to Ext.layout.ContainerLayout.activeItem. ]]></description>
		</attribute>
		<attribute>
			<name>autoDestroy</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoDestroy : BooleanIf true the container will automatically destroy any contained component that is removed from it, else destruction must be handled manually (defaults to true).]]></description>
		</attribute>
		<attribute>
			<name>bufferResize</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[bufferResize : Boolean/Number
When set to true (100 milliseconds) or a number of milliseconds, the layout assigned for this container will buffer the frequency it calculates and does a re-layout of components. This is useful for heavy containers or containers with a large amount of sub components that frequent calls to layout are expensive. ]]></description>
		</attribute>
		<attribute>
			<name>defaultType</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[defaultType : String
The default type of container represented by this object as registered in Ext.ComponentMgr (defaults to 'panel'). ]]></description>
		</attribute>
		<attribute>
			<name>defaults</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[defaults : Object
A config object that will be applied to all components added to this container either via the items config or via the add or insert methods. The defaults config can contain any number of name/value property pairs to be added to each item, and should be valid for the types of items being added to the container. For example, to automatically apply padding to the body of each of a set of contained Ext.Panel items, you could pass: defaults: {bodyStyle:'padding:15px'}. ]]></description>
		</attribute>
		<attribute>
			<name>hideBorders</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideBorders : Boolean
True to hide the borders of each contained component, false to defer to the component's existing border settings (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>items</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[items : Mixed
A single item, or an array of child Components to be added to this container. Each item can be any type of object based on Ext.Component.Component config objects may also be specified in order to avoid the overhead of constructing a real Component object if lazy rendering might mean that the added Component will not be rendered immediately. To take advantage of this 'lazy instantiation', set the Ext.Component.xtype config property to the registered type of the Component wanted.For a list of all available xtypes, see Ext.Component. If a single item is being passed, it should be passed directly as an object reference (e.g., items: {...}). Multiple items should be passed as an array of objects (e.g., items: [{...}, {...}]). ]]></description>
		</attribute>
		<attribute>
			<name>layoutConfig</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[layoutConfig : Object
This is a config object containing properties specific to the chosen layout (to be used in conjunction with the layout config value). For complete details regarding the valid config options for each layout type, see the layout class corresponding to the type specified:Ext.layout.Accordion Ext.layout.AnchorLayoutExt.layout.BorderLayout Ext.layout.CardLayout Ext.layout.ColumnLayoutExt.layout.FitLayout Ext.layout.FormLayout Ext.layout.TableLayout]]></description>
		</attribute>
		<attribute>
			<name>monitorResize</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[monitorResize : Boolean
True to automatically monitor window resize events to handle anything that is sensitive to the current size of the viewport. This value is typically managed by the chosen layout and should not need to be set manually. ]]></description>
		</attribute>
		<attribute>
			<name>layout</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[layout : String
The layout type to be used in this container. If not specified, a default Ext.layout.ContainerLayout will be created and used. Valid values are: accordion, anchor, border, card, column, fit, form and table. Specific config values for the chosen layout type can be specified using layoutConfig. ]]></description>
		</attribute>
		<attribute>
			<name>autoHeight</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoHeight : Boolean
True to use height:'auto', false to use fixed height (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>autoWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoWidth : Boolean
True to use width:'auto', false to use fixed width (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>height</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[height : Number
The height of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>width</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[width : Number
The width of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>window</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.Window
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[A specialized panel intended for use as an application window. Windows are floated and draggable by default, and also provide specific behavior like the ability to maximize and restore (with an event for minimizing, since the minimize behavior is application-specific). Windows can also be linked to a Ext.WindowGroup or managed by the Ext.WindowManager to provide grouping, activation, to front/back and other application-specific behavior.]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>constrain</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[constrain : Boolean
True to constrain the window to the viewport, false to allow it to fall outside of the viewport (defaults to false). Optionally the header only can be constrained using constrainHeader. ]]></description>
		</attribute>
		<attribute>
			<name>minHeight</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[minHeight : Number
The minimum height in pixels allowed for this window (defaults to 100). Only applies when resizable = true. ]]></description>
		</attribute>
		<attribute>
			<name>plain</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[plain : Boolean
True to render the window body with a transparent background so that it will blend into the framing elements, false to add a lighter background color to visually highlight the body element and separate it more distinctly from the surrounding frame (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>animateTarget</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[animateTarget : String/Element
Id or element from which the window should animate while opening (defaults to null with no animation).]]></description>
		</attribute>
		<attribute>
			<name>closeAction</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[closeAction : String
The action to take when the close button is clicked. The default action is 'close' which will actually remove the window from the DOM and destroy it. The other valid option is 'hide' which will simply hide the window by setting visibility to hidden and applying negative offsets, keeping the window available to be redisplayed via the show method. ]]></description>
		</attribute>
		<attribute>
			<name>constrainHeader</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[constrainHeader : Boolean
True to constrain the window header to the viewport, allowing the window body to fall outside of the viewport, false to allow the header to fall outside the viewport (defaults to false). Optionally the entire window can be constrained using constrain. ]]></description>
		</attribute>
		<attribute>
			<name>expandOnShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[expandOnShow : Boolean
True to always expand the window when it is displayed, false to keep it in its current state (which may be collapsed) when displayed (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>manager</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[manager : Ext.WindowGroup
A reference to the WindowGroup that should manage this window (defaults to Ext.WindowMgr). ]]></description>
		</attribute>
		<attribute>
			<name>minimizable</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[minimizable : Boolean
True to display the 'minimize' tool button and allow the user to minimize the window, false to hide the button and disallow minimizing the window (defaults to false). Note that this button provides no implementation -- the behavior of minimizing a window is implementation-specific, so the minimize event must be handled and a custom minimize behavior implemented for this option to be useful. ]]></description>
		</attribute>
		<attribute>
			<name>onEsc</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[onEsc : Function
Allows override of the built-in processing for the escape key. Default action is to close the Window (performing whatever action is specified in closeAction. To prevent the Window closing when the escape key is pressed, specify this as Ext.emptyFn (See Ext.emptyFn). ]]></description>
		</attribute>
		<attribute>
			<name>resizeHandles</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[resizeHandles : String
A valid Ext.Resizable handles config string (defaults to 'all'). Only applies when resizable = true. ]]></description>
		</attribute>
		<attribute>
			<name>resizable</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[resizable : Boolean
True to allow user resizing at each edge and corner of the window, false to disable resizing (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>defaultButton</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[defaultButton : String/Number/Button
The id / index of a button or a button instance to focus when this window received the focus. ]]></description>
		</attribute>
		<attribute>
			<name>closable</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[closable : Boolean
True to display the 'close' tool button and allow the user to close the window, false to hide the button and disallow closing the window (default to true). ]]></description>
		</attribute>
		<attribute>
			<name>maximizable</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[maximizable : Boolean
True to display the 'maximize' tool button and allow the user to maximize the window, false to hide the button and disallow maximizing the window (defaults to false). Note that when a window is maximized, the tool button will automatically change to a 'restore' button with the appropriate behavior already built-in that will restore the window to its previous size. ]]></description>
		</attribute>
		<attribute>
			<name>modal</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[modal : Boolean
True to make the window modal and mask everything behind it when displayed, false to display it without restricting access to other UI elements (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>minWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[minWidth : Number
The minimum width in pixels allowed for this window (defaults to 200). Only applies when resizable = true. ]]></description>
		</attribute>
		<attribute>
			<name>iconCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[iconCls : String
A CSS class that will provide a background image to be used as the panel header icon (defaults to ''). ]]></description>
		</attribute>
		<attribute>
			<name>shadow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[minButtonWidth : Number
Minimum width in pixels of all buttons in this panel (defaults to 75) ]]></description>
		</attribute>
		<attribute>
			<name>shadowOffset</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[shadowOffset : Number
The number of pixels to offset the shadow if displayed (defaults to 4). Note that this option only applies when floating = true. ]]></description>
		</attribute>
		<attribute>
			<name>shim</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[shim : Boolean
False to disable the iframe shim in browsers which need one (defaults to true). Note that this option only applies when floating = true. ]]></description>
		</attribute>
		<attribute>
			<name>animCollapse</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[animCollapse : Boolean
True to animate the transition when the panel is collapsed, false to skip the animation (defaults to true if the Ext.Fx class is available, otherwise false). ]]></description>
		</attribute>
		<attribute>
			<name>autoLoad</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[autoLoad : Object/String/Function
A valid url spec according to the Updater Ext.Updater.update method. If autoLoad is not null, the panel will attempt to load its contents immediately upon render.The URL will become the default URL for this panel's body element, so it may be refreshed at any time.]]></description>
		</attribute>
		<attribute>
			<name>autoScroll</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoScroll : Boolean
True to use overflow:'auto' on the panel's body element and show scroll bars automatically when necessary, false to clip any overflowing content (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>baseCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[baseCls : String
The base CSS class to apply to this panel's element (defaults to 'x-panel').]]></description>
		</attribute>
		<attribute>
			<name>bbar</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[bbar : Object/Array
The bottom toolbar of the panel. This can be a Ext.Toolbar object, a toolbar config, or an array of buttons/button configs to be added to the toolbar. Note that this is not available as a property after render. To access the bottom toolbar after render, use getBottomToolbar. ]]></description>
		</attribute>
		<attribute>
			<name>bodyBorder</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[bodyBorder : Boolean
True to display an interior border on the body element of the panel, false to hide it (defaults to true). This only applies when border == true. If border == true and bodyBorder == false, the border will display as a 1px wide inset border, giving the entire body element an inset appearance. ]]></description>
		</attribute>
		<attribute>
			<name>bodyStyle</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[bodyStyle : String/Object/Function
Custom CSS styles to be applied to the body element in the format expected by Ext.Element.applyStyles (defaults to null). ]]></description>
		</attribute>
		<attribute>
			<name>buttonAlign</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[buttonAlign : String
The alignment of any buttons added to this panel. Valid values are 'right,' 'left' and 'center' (defaults to 'right'). ]]></description>
		</attribute>
		<attribute>
			<name>buttons</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[buttons : Array
An array of Ext.Button configs used to add buttons to the footer of this panel. ]]></description>
		</attribute>
		<attribute>
			<name>collapseFirst</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[collapseFirst : Boolean
True to make sure the collapse/expand toggle button always renders first (to the left of) any other tools in the panel's title bar, false to render it last (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>collapsed</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[collapsed : Boolean
True to render the panel collapsed, false to render it expanded (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>collapsedCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[collapsedCls : String
A CSS class to add to the panel's element after it has been collapsed (defaults to 'x-panel-collapsed'). ]]></description>
		</attribute>
		<attribute>
			<name>collapsible</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[collapsible : Boolean
True to make the panel collapsible and have the expand/collapse toggle button automatically rendered into the header tool button area, false to keep the panel statically sized with no button (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>contentEl</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[contentEl : String
The id of an existing HTML node to use as the panel's body content (defaults to ''). ]]></description>
		</attribute>
		<attribute>
			<name>draggable</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[draggable : Boolean
True to enable dragging of this Panel (defaults to false). For custom drag/drop implementations, an Ext.Panel.DD config could also be passed in this config instead of true, although Ext.Panel.DD is an internal, undocumented class]]></description>
		</attribute>
		<attribute>
			<name>elements</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[elements : String
A comma-delimited list of panel elements to initialize when the panel is rendered. Normally, this list will be generated automatically based on the items added to the panel at config time, but sometimes it might be useful to make sure a structural element is rendered even if not specified at config time (for example, you may want to add a button or toolbar dynamically after the panel has been rendered). Adding those elements to this list will allocate the required placeholders in the panel when it is rendered. Valid values areheader tbar (top bar)body bbar (bottom bar)footer Defaults to 'body'. ]]></description>
		</attribute>
		<attribute>
			<name>footer</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[footer : Boolean
True to create the footer element explicitly, false to skip creating it. By default, when footer is not specified, if one or more buttons have been added to the panel the footer will be created automatically, otherwise it will not. ]]></description>
		</attribute>
		<attribute>
			<name>header</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[header : Boolean
True to create the header element explicitly, false to skip creating it. By default, when header is not specified, if a title is set the header will be created automatically, otherwise it will not. If a title is set but header is explicitly set to false, the header will not be rendered. ]]></description>
		</attribute>
		<attribute>
			<name>headerAsText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[headerAsText : Boolean
True to display the panel title in the header, false to hide it (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>hideCollapseTool</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideCollapseTool : Boolean
True to hide the expand/collapse toggle button when collapsible = true, false to display it (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>html</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[html : String/Object
An HTML fragment, or a DomHelper specification to use as the panel's body content (defaults to ''). ]]></description>
		</attribute>
		<attribute>
			<name>keys</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[keys : Object/Array
A KeyMap config object (in the format expected by Ext.KeyMap.addBinding used to assign custom key handling to this panel (defaults to null). ]]></description>
		</attribute>
		<attribute>
			<name>maskDisabled</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[maskDisabled : Boolean
True to mask the panel when it is disabled, false to not mask it (defaults to true). Either way, the panel will always tell its contained elements to disable themselves when it is disabled, but masking the panel can provide an additional visual cue that the panel is disabled. ]]></description>
		</attribute>
		<attribute>
			<name>minButtonWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>tbar</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tbar : Object/Array
The top toolbar of the panel. This can be either an Ext.Toolbar object or an array of buttons/button configs to be added to the toolbar. Note that this is not available as a property after render. To access the top toolbar after render, use getTopToolbar. ]]></description>
		</attribute>
		<attribute>
			<name>titleCollapse</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[titleCollapse : Boolean
True to allow expanding and collapsing the panel (when collapsible = true) by clicking anywhere in the header bar, false to allow it only by clicking to tool button (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>tools</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tools : Array
An array of tool button configs to be added to the header tool area. Each tool config may contain the following properties:id : String Required. The type of tool to create. Values may betoggle (Created by default when collapsible is true)close minimizemaximize restore gear pin unpin right left up downrefreshminus plus help searchsave handler : FunctionRequired. The function to call when clicked. Arguments passed are:event : Ext.EventObject The click event.toolEl : Ext.ElementThe tool Element.Panel : Ext.Panel The host Panelscope : Object The scope in which to call the handler.qtip : String/Object A tip string, or a config argument to Ext.QuickTip.registerhidden : Boolean True to initially render hidden.on : Object A listener config object specifiying event listeners in the format of an argument to addListenerExample usage: tools:[{    id:'refresh',    // hidden:true,    handler: function(event, toolEl, panel){        // refresh logic    }}]Note that apart from the toggle tool which is provided when a panel is collapsible, these tools only provide the visual button. Any required functionality must be provided by adding handlers that implement the necessary behavior. ]]></description>
		</attribute>
		<attribute>
			<name>region</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>title</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[title : String
The title text to display in the panel header (defaults to ''). When a title is specified the header element will automatically be created and displayed unless header is explicitly set to false. If you don't want to specify a title at config time, but you may want one later, you must either specify a non-empty title (a blank space ' ' will do) or header:true so that the container element will get created. ]]></description>
		</attribute>
		<attribute>
			<name>frame</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[frame : Boolean
True to render the panel with custom rounded borders, false to render with plain 1px square borders (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>border</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[border : Boolean
True to display the borders of the panel's body element, false to hide them (defaults to true). By default, the border is a 2px wide inset border, but this can be further altered by setting bodyBorder to false. ]]></description>
		</attribute>
		<attribute>
			<name>floating</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[floating : Boolean
True to float the panel (absolute position it with automatic shimming and shadow), false to display it inline where it is rendered (defaults to false). Note that by default, setting floating to true will cause the panel to display at negative offsets so that it is hidden -- because the panel is absolute positioned, the position must be set explicitly after render (e.g., myPanel.setPosition(100,100);). Also, when floating a panel you should always assign a fixed width, otherwise it will be auto width and will expand to fill to the right edge of the viewport. ]]></description>
		</attribute>
		<attribute>
			<name>activeItem</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[activeItem : String/Number
A string component id or the numeric index of the component that should be initially activated within the container's layout on render. For example, activeItem: 'item-1' or activeItem: 0 (index 0 = the first item in the container's collection). activeItem only applies to layout styles that can display items one at a time (like Ext.layout.Accordion, Ext.layout.CardLayout and Ext.layout.FitLayout). Related to Ext.layout.ContainerLayout.activeItem. ]]></description>
		</attribute>
		<attribute>
			<name>autoDestroy</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoDestroy : BooleanIf true the container will automatically destroy any contained component that is removed from it, else destruction must be handled manually (defaults to true).]]></description>
		</attribute>
		<attribute>
			<name>bufferResize</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[bufferResize : Boolean/Number
When set to true (100 milliseconds) or a number of milliseconds, the layout assigned for this container will buffer the frequency it calculates and does a re-layout of components. This is useful for heavy containers or containers with a large amount of sub components that frequent calls to layout are expensive. ]]></description>
		</attribute>
		<attribute>
			<name>defaultType</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[defaultType : String
The default type of container represented by this object as registered in Ext.ComponentMgr (defaults to 'panel'). ]]></description>
		</attribute>
		<attribute>
			<name>defaults</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[defaults : Object
A config object that will be applied to all components added to this container either via the items config or via the add or insert methods. The defaults config can contain any number of name/value property pairs to be added to each item, and should be valid for the types of items being added to the container. For example, to automatically apply padding to the body of each of a set of contained Ext.Panel items, you could pass: defaults: {bodyStyle:'padding:15px'}. ]]></description>
		</attribute>
		<attribute>
			<name>hideBorders</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideBorders : Boolean
True to hide the borders of each contained component, false to defer to the component's existing border settings (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>items</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[items : Mixed
A single item, or an array of child Components to be added to this container. Each item can be any type of object based on Ext.Component.Component config objects may also be specified in order to avoid the overhead of constructing a real Component object if lazy rendering might mean that the added Component will not be rendered immediately. To take advantage of this 'lazy instantiation', set the Ext.Component.xtype config property to the registered type of the Component wanted.For a list of all available xtypes, see Ext.Component. If a single item is being passed, it should be passed directly as an object reference (e.g., items: {...}). Multiple items should be passed as an array of objects (e.g., items: [{...}, {...}]). ]]></description>
		</attribute>
		<attribute>
			<name>layoutConfig</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[layoutConfig : Object
This is a config object containing properties specific to the chosen layout (to be used in conjunction with the layout config value). For complete details regarding the valid config options for each layout type, see the layout class corresponding to the type specified:Ext.layout.Accordion Ext.layout.AnchorLayoutExt.layout.BorderLayout Ext.layout.CardLayout Ext.layout.ColumnLayoutExt.layout.FitLayout Ext.layout.FormLayout Ext.layout.TableLayout]]></description>
		</attribute>
		<attribute>
			<name>monitorResize</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[monitorResize : Boolean
True to automatically monitor window resize events to handle anything that is sensitive to the current size of the viewport. This value is typically managed by the chosen layout and should not need to be set manually. ]]></description>
		</attribute>
		<attribute>
			<name>layout</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[layout : String
The layout type to be used in this container. If not specified, a default Ext.layout.ContainerLayout will be created and used. Valid values are: accordion, anchor, border, card, column, fit, form and table. Specific config values for the chosen layout type can be specified using layoutConfig. ]]></description>
		</attribute>
		<attribute>
			<name>autoHeight</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoHeight : Boolean
True to use height:'auto', false to use fixed height (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>autoWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoWidth : Boolean
True to use width:'auto', false to use fixed width (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>height</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[height : Number
The height of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>width</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[width : Number
The width of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>windowGroup</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.WindowGroup
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[An object that represents a group of Ext.Window instances and provides z-order management and window activation behavior. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>windowMgr</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.WindowMgr
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[The default global window group that is available automatically. To have more than one group of windows with separate z-order stacks, create additional instances of Ext.WindowGroup as needed.This class is a singleton and cannot be created directly. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>xTemplate</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.XTemplate
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[A template class that supports advanced functionality like autofilling arrays, conditional processing with basic comparison operators, sub-templates, basic math function support, special built-in template variables, inline code execution and more. XTemplate also provides the templating mechanism built into Ext.DataView.XTemplate supports many special tags and built-in operators that aren't defined as part of the API, but are supported in the templates that can be created. The following examples demonstrate all of the supported features. This is the data object used for reference in each code example:var data = {    name: 'Jack Slocum',    title: 'Lead Developer',    company: 'Ext JS, LLC',    email: 'jack@extjs.com',    address: '4 Red Bulls Drive',    city: 'Cleveland',    state: 'Ohio',    zip: '44102',    drinks: ['Red Bull', 'Coffee', 'Water'],    kids: [{        name: 'Sara Grace',        age:3    },{        name: 'Zachary',        age:2    },{        name: 'John James',        age:0    }]};Auto filling of arrays and scope switchingUsing the tpl tag and the for operator, you can switch to the scope of the object specified by for and access its members to populate the teamplte. If the variable in for is an array, it will auto-fill, repeating the template block inside the tpl tag for each item in the array:var tpl = new Ext.XTemplate(    '<p>Name: {name}</p>',    '<p>Title: {title}</p>',    '<p>Company: {company}</p>',    '<p>Kids: ',    '<tpl for='kids'>',        '<p>{name}</p>',    '</tpl></p>');tpl.overwrite(panel.body, data);Access to parent object from within sub-template scopeWhen processing a sub-template, for example while looping through a child array, you can access the parent object's members via the parent object:var tpl = new Ext.XTemplate(    '<p>Name: {name}</p>',    '<p>Kids: ',    '<tpl for='kids'>',        '<tpl if='age > 1'>',           '<p>{name}</p>',            '<p>Dad: {parent.name}</p>',        '</tpl>',    '</tpl></p>');tpl.overwrite(panel.body, data);Array item index and basic math supportWhile processing an array, the special variable {#} will provide the current array index + 1 (starts at 1, not 0). Templates also support the basic math operators + - * and / that can be applied directly on numeric data values:var tpl = new Ext.XTemplate(    '<p>Name: {name}</p>',    '<p>Kids: ',    '<tpl for='kids'>',        '<tpl if='age > 1'>',            '<p>{#}: {name}</p>',  // <-- Auto-number each item            '<p>In 5 Years: {age+5}</p>',  // <-- Basic math            '<p>Dad: {parent.name}</p>',        '</tpl>',    '</tpl></p>');tpl.overwrite(panel.body, data);Auto-rendering of flat arrays Flat arrays that contain values (and not objects) can be auto-rendered using the special {.} variable inside a loop. This variable will represent the value of the array at the current index:var tpl = new Ext.XTemplate(    '<p>{name}'s favorite beverages:</p>',    '<tpl for='drinks'>',       '<div> - {.}</div>',    '</tpl>');tpl.overwrite(panel.body, data);Basic conditional logic Using the tpl tag and the if operator you can provide conditional checks for deciding whether or not to render specific parts of the template. Note that there is no else operator �� if needed, you should use two opposite if statements. Properly-encoded attributes are required as seen in the following example:var tpl = new Ext.XTemplate(    '<p>Name: {name}</p>',    '<p>Kids: ',    '<tpl for='kids'>',        '<tpl if='age < 1'>',  // <-- Note that the > is encoded            '<p>{name}</p>',        '</tpl>',    '</tpl></p>');tpl.overwrite(panel.body, data);Ability to execute arbitrary inline codeIn an XTemplate, anything between {[ ... ]} is considered code to be executed in the scope of the template. There are some special variables available in that code:values: The values in the current scope. If you are using scope changing sub-templates, you can change what values is. parent: The scope (values) of the ancestor template. xindex: If you are in a looping template, the index of the loop you are in (1-based).xcount: If you are in a looping template, the total length of the array you are looping.fm: An alias for Ext.util.Format. This example demonstrates basic row striping using an inline code block and the xindex variable:var tpl = new Ext.XTemplate(    '<p>Name: {name}</p>',    '<p>Company: {[company.toUpperCase() + ', ' + title]}</p>',    '<p>Kids: ',    '<tpl for='kids'>',       '<div class='{[xindex % 2 === 0 ? 'even' : 'odd']}'>,        '{name}',        '</div>',    '</tpl></p>');tpl.overwrite(panel.body, data);Template member functions One or more member functions can be defined directly on the config object passed into the XTemplate constructor for more complex processing:var tpl = new Ext.XTemplate(    '<p>Name: {name}</p>',    '<p>Kids: ',    '<tpl for='kids'>',        '<tpl if='this.isGirl(name)'>',            '<p>Girl: {name} - {age}</p>',        '</tpl>',        '<tpl if='this.isGirl(name) == false'>',            '<p>Boy: {name} - {age}</p>',        '</tpl>',        '<tpl if='this.isBaby(age)'>',            '<p>{name} is a baby!</p>',        '</tpl>',    '</tpl></p>', {     isGirl: function(name){         return name == 'Sara Grace';     },     isBaby: function(age){        return age < 1;     }});tpl.overwrite(panel.body, data);]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>arrayReader</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.data.ArrayReader
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Data reader class to create an Array of Ext.data.Record objects from an Array. Each element of that Array represents a row of data fields. The fields are pulled into a Record object using as a subscript, the mapping property of the field definition if it exists, or the field's ordinal position in the definition Example code:. var Employee = Ext.data.Record.create([{name: 'name', mapping: 1},         // 'mapping' only needed if an 'id' field is present which{name: 'occupation', mapping: 2}    // precludes using the ordinal position as the index.	]);var myReader = new Ext.data.ArrayReader({id: 0                     // The subscript within row Array that provides an ID for the Record (optional)}, Employee);This would consume an Array like this: [ [1, 'Bill', 'Gardener'], [2, 'Ben', 'Horticulturalist'] ]]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id:String
(optional) The subscript within row Array that provides an ID for the Record ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>connection</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.data.Connection
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[The class encapsulates a connection to the page's originating domain, allowing requests to be made either to a configured URL, or to a URL specified at request time.Requests made by this class are asynchronous, and will return immediately. No data from the server will be available to the statement immediately following the request call. To process returned data, use a callback in the request options object, or an event listener.Note: If you are doing a file upload, you will not get a normal response object sent back to your callback or event handler. Since the upload is handled via in IFRAME, there is no XMLHttpRequest. The response object is created using the innerHTML of the IFRAME's document as the responseText property and, if present, the IFRAME's XML document as the responseXML property.This means that a valid XML or HTML document must be returned. If JSON data is required, it is suggested that it be placed either inside a <textarea> in an HTML document and retrieved from the responseText using a regex, or inside a CDATA section in an XML document and retrieved from the responseXML using standard DOM methods. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>autoAbort</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoAbort : Boolean
(Optional) Whether this request should abort any pending requests. (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>defaultHeaders</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[defaultHeaders : Object
(Optional) An object containing request headers which are added to each request made by this object. (defaults to undefined) ]]></description>
		</attribute>
		<attribute>
			<name>disableCaching</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[disableCaching : Boolean
(Optional) True to add a unique cache-buster param to GET requests. (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>extraParams</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[extraParams : Object
(Optional) An object containing properties which are used as extra parameters to each request made by this object. (defaults to undefined) ]]></description>
		</attribute>
		<attribute>
			<name>timeout</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[timeout : Number
(Optional) The timeout in milliseconds to be used for requests. (defaults to 30000) ]]></description>
		</attribute>
		<attribute>
			<name>url</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[url : String
(Optional) The default URL to be used for requests to the server. (defaults to undefined) ]]></description>
		</attribute>
		<attribute>
			<name>method</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[method : String
(Optional) The default HTTP method to be used for requests. (defaults to undefined; if not set but parms are present will use POST, otherwise GET)]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>dataProxy</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.data.DataProxy
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[This class is an abstract base class for implementations which provide retrieval of unformatted data objects.DataProxy implementations are usually used in conjunction with an implementation of Ext.data.DataReader (of the appropriate type which knows how to parse the data object) to provide a block of Ext.data.Records to an Ext.data.Store.Custom implementations must implement the load method as described in Ext.data.HttpProxy.load.]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>dataReader</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.data.DataReader
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Abstract base class for reading structured data from a data source and converting it into an object containing Ext.data.Record objects and metadata for use by an Ext.data.Store. This class is intended to be extended and should not be created directly. For existing implementations, see Ext.data.ArrayReader, Ext.data.JsonReader and Ext.data.XmlReader. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>groupingStore</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.data.GroupingStore
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[A specialized store implementation that provides for grouping records by one of the available fields. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>groupField</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[groupField : StringThe field name by which to sort the store's data (defaults to ''). ]]></description>
		</attribute>
		<attribute>
			<name>groupOnSort</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[groupOnSort : Boolean True to sort the data on the grouping field when a grouping operation occurs, false to sort based on the existing sort info (defaults to false).]]></description>
		</attribute>
		<attribute>
			<name>remoteGroup</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[remoteGroup : BooleanTrue if the grouping should apply on the server side, false if it is local only (defaults to false). If the grouping is local, it can be applied immediately to the data. If it is remote, then it will simply act as a helper, automatically sending the grouping field name as the 'groupBy' param with each XHR call. ]]></description>
		</attribute>
		<attribute>
			<name>url</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>autoLoad</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoLoad : Boolean/ObjectIf passed, this store's load method is automatically called after creation with the autoLoad object ]]></description>
		</attribute>
		<attribute>
			<name>baseParams</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[baseParams : ObjectAn object containing properties which are to be sent as parameters on any HTTP request ]]></description>
		</attribute>
		<attribute>
			<name>proxy</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[proxy : Ext.data.DataProxyThe Proxy object which provides access to a data object. ]]></description>
		</attribute>
		<attribute>
			<name>pruneModifiedRecords</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[pruneModifiedRecords : booleanTrue to clear all modified record information each time the store is loaded or when a record is removed. (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>reader</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>remoteSort</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>sortInfo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>storeId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>data</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[data : ArrayInline data to be loaded when the store is initialized. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>httpProxy</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.data.HttpProxy
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[An implementation of Ext.data.DataProxy that reads a data object from a Connection object configured to reference a certain URL.Note that this class cannot be used to retrieve data from a domain other than the domain from which the running page was served.For cross-domain access to remote data, use a ScriptTagProxy.Be aware that to enable the browser to parse an XML document, the server must set the Content-Type header in the HTTP response to 'text/xml'.]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>jsonReader</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.data.JsonReader
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[var Employee = Ext.data.Record.create([ {name: 'name', mapping: 'name'},     // 'mapping' property not needed if it's the same as 'name' {name: 'occupation'}                 // This field will use 'occupation' as the mapping.]);var myReader = new Ext.data.JsonReader({    totalProperty: 'results',    // The property which contains the total dataset size (optional)    root: 'rows',                // The property which contains an Array of row objects    id: 'id'                     // The property within each row object that provides an ID for the record (optional)}, Employee);This would consume a JSON file like this:{ 'results': 2, 'rows': [    { 'id': 1, 'name': 'Bill', occupation: 'Gardener' },    { 'id': 2, 'name': 'Ben', occupation: 'Horticulturalist' } ]}It is possible to change a JsonReader's metadata at any time by including a MetaData property in the data object. If this is detected in the object, a Store object using this Reader will fire its metachange event.The MetaData property may contain any of the configuration options for this class. Additionally, it may contain a fields property which the JsonReader will use that as an argument to Ext.data.Record.create to configure the layout of the Records which it will produce.Using the MetaData property, and the Store's metachange event, it is possible to have a Store-driven control initialize itself. The metachange event handler may interrogate the MetaData property (which may contain any user-defined properties needed) and the MetaData.fields property to perform any configuration required.To use this facility to send the same data as the above example without having to code the creation of the Record constructor, you would create the JsonReader like this:var myReader = new Ext.data.JsonReader();The first data packet from the server would configure the reader by containing a metaData property as well as the data:{  'metaData': {    totalProperty: 'results',    root: 'rows',    id: 'id',    fields: [      {name: 'name'},      {name: 'occupation'} ]   },  'results': 2, 'rows': [    { 'id': 1, 'name': 'Bill', occupation: 'Gardener' },    { 'id': 2, 'name': 'Ben', occupation: 'Horticulturalist' } ]}]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : StringName of the property within a row object that contains a record identifier value. ]]></description>
		</attribute>
		<attribute>
			<name>successProperty</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[successProperty : StringName of the property from which to retrieve the success attribute used by forms. ]]></description>
		</attribute>
		<attribute>
			<name>totalProperty</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[totalProperty : String Name of the property from which to retrieve the total number of records in the dataset. This is only needed if the whole dataset is not passed in one go, but is being paged from the remote server. ]]></description>
		</attribute>
		<attribute>
			<name>record</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>root</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[root : Stringname of the property which contains the Array of row objects]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>jsonStore</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.data.JsonStore
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Small helper class to make creating Stores for JSON data easier. var store = new Ext.data.JsonStore({    url: 'get-images.php',    root: 'images',    fields: ['name', 'url', {name:'size', type: 'float'}, {name:'lastmod', type:'date'}]});This would consume a returned object of the form:{    images: [        {name: 'Image one', url:'/GetImage.php?id=1', size:46.5, lastmod: new Date(2007, 10, 29)},        {name: 'Image Two', url:'/GetImage.php?id=2', size:43.2, lastmod: new Date(2007, 10, 30)}    ]}An object literal of this form could also be used as the data config option. Note: Although they are not listed, this class inherits all of the config options of Store, JsonReader.]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>fields</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[fields : Array
Either an Array of field definition objects as passed to Ext.data.Record.create, or a Record constructor created using Ext.data.Record.create. ]]></description>
		</attribute>
		<attribute>
			<name>root</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[root : String
 json list root]]></description>
		</attribute>
		<attribute>
			<name>url</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>autoLoad</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoLoad : Boolean/ObjectIf passed, this store's load method is automatically called after creation with the autoLoad object ]]></description>
		</attribute>
		<attribute>
			<name>baseParams</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[baseParams : ObjectAn object containing properties which are to be sent as parameters on any HTTP request ]]></description>
		</attribute>
		<attribute>
			<name>proxy</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[proxy : Ext.data.DataProxyThe Proxy object which provides access to a data object. ]]></description>
		</attribute>
		<attribute>
			<name>pruneModifiedRecords</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[pruneModifiedRecords : booleanTrue to clear all modified record information each time the store is loaded or when a record is removed. (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>reader</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>remoteSort</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>sortInfo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>storeId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>data</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[data : ArrayInline data to be loaded when the store is initialized. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>memoryProxy</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.data.MemoryProxy
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[An implementation of Ext.data.DataProxy that simply passes the data specified in its constructor to the Reader when its load method is called. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>node</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.data.Node
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id:String
 The id for this node. If one is not specified, one is generated. ]]></description>
		</attribute>
		<attribute>
			<name>leaf</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[isLeaf :boolean
 true if this node is a leaf and does not have children ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>record</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.data.Record
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[@Description('Instances of this class encapsulate both record definition information, and record value information for use in Ext.data.Store objects, or any code which needs to access Records cached in an Ext.data.Store object.Constructors for this class are generated by passing an Array of field definition objects to create. Instances are usually only created by Ext.data.Reader implementations when processing unformatted data objects.Record objects generated by this constructor inherit all the methods of Ext.data.Record listed below.]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>scriptTagProxy</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.data.ScriptTagProxy
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[An implementation of Ext.data.DataProxy that reads a data object from a URL which may be in a domain other than the originating domain of the running page.Note that if you are retrieving data from a page that is in a domain that is NOT the same as the originating domain of the running page, you must use this class, rather than HttpProxy.The content passed back from a server resource requested by a ScriptTagProxy is executable JavaScript source code that is used as the source inside a <script> tag.In order for the browser to process the returned data, the server must wrap the data object with a call to a callback function, the name of which is passed as a parameter by the ScriptTagProxy. Below is a Java example for a servlet which returns data for either a ScriptTagProxy, or an HttpProxy depending on whether the callback name was passed:boolean scriptTag = false;String cb = request.getParameter('callback');if (cb != null) {    scriptTag = true;    response.setContentType('text/javascript');} else {    response.setContentType('application/x-json');}Writer out = response.getWriter();if (scriptTag) {    out.write(cb + '('');}out.print(dataBlock.toJsonString());if (scriptTag) {out.write(')';');}]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>timeout</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[timeout : Number
(Optional) The number of milliseconds to wait for a response. Defaults to 30 seconds. ]]></description>
		</attribute>
		<attribute>
			<name>url</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[url : String
 The URL from which to request the data object. ]]></description>
		</attribute>
		<attribute>
			<name>callbackParam</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[callbackParam : String
(Optional) The name of the parameter to pass to the server which tells the server the name of the callback function set up by the load call to process the returned data object. Defaults to 'callback'.The server-side processing must read this parameter value, and generate javascript output which calls this named function passing the data object as its only parameter.]]></description>
		</attribute>
		<attribute>
			<name>nocache</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[nocache : Boolean
(Optional) Defaults to true. Disable cacheing by adding a unique parameter name to the request. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>simpleStore</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.data.SimpleStore
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Small helper class to make creating Stores from Array data easier. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>fields</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[fields : ArrayAn array of field definition objects, or field name strings. ]]></description>
		</attribute>
		<attribute>
			<name>url</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>autoLoad</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoLoad : Boolean/ObjectIf passed, this store's load method is automatically called after creation with the autoLoad object ]]></description>
		</attribute>
		<attribute>
			<name>baseParams</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[baseParams : ObjectAn object containing properties which are to be sent as parameters on any HTTP request ]]></description>
		</attribute>
		<attribute>
			<name>proxy</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[proxy : Ext.data.DataProxyThe Proxy object which provides access to a data object. ]]></description>
		</attribute>
		<attribute>
			<name>pruneModifiedRecords</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[pruneModifiedRecords : booleanTrue to clear all modified record information each time the store is loaded or when a record is removed. (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>reader</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>remoteSort</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>sortInfo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>storeId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>data</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[data : ArrayInline data to be loaded when the store is initialized. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>sortTypes</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.data.SortTypes
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[This class is a singleton and cannot be created directly. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>store</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.data.Store
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[The Store class encapsulates a client side cache of Record objects which provide input data for Components such as the GridPanel, the ComboBox, or the DataViewA Store object uses its configured implementation of DataProxy to access a data object unless you call loadData directly and pass in your data.A Store object has no knowledge of the format of the data returned by the Proxy.A Store object uses its configured implementation of DataReader to create Record instances from the data object. These Records are cached and made available through accessor functions.]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>url</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>autoLoad</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoLoad : Boolean/ObjectIf passed, this store's load method is automatically called after creation with the autoLoad object ]]></description>
		</attribute>
		<attribute>
			<name>baseParams</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[baseParams : ObjectAn object containing properties which are to be sent as parameters on any HTTP request ]]></description>
		</attribute>
		<attribute>
			<name>proxy</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[proxy : Ext.data.DataProxyThe Proxy object which provides access to a data object. ]]></description>
		</attribute>
		<attribute>
			<name>pruneModifiedRecords</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[pruneModifiedRecords : booleanTrue to clear all modified record information each time the store is loaded or when a record is removed. (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>reader</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>remoteSort</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>sortInfo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>storeId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>data</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[data : ArrayInline data to be loaded when the store is initialized. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>tree</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.data.Tree
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Represents a tree data structure and bubbles all the events for its nodes. The nodes in the tree have most standard DOM functionality. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>pathSeparator</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[pathSeparator : StringThe token used to separate paths in node ids (defaults to '/'). ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>xmlReader</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.data.XmlReader
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Data reader class to create an Array of Ext.data.Record objects from an XML document based on mappings in a provided Ext.data.Record constructor.Note that in order for the browser to parse a returned XML document, the Content-Type header in the HTTP response must be set to 'text/xml'.Example code:var Employee = Ext.data.Record.create([   {name: 'name', mapping: 'name'},     // 'mapping' property not needed if it's the same as 'name'    {name: 'occupation'}                 // This field will use 'occupation' as the mapping.]);var myReader = new Ext.data.XmlReader({   totalRecords: 'results', // The element which contains the total dataset size (optional)   record: 'row',           // The repeated element which contains row information   id: 'id'                 // The element within the row that provides an ID for the record (optional)}, Employee);This would consume an XML file like this:<?xml?><dataset> <results>2</results> <row>   <id>1</id>   <name>Bill</name>   <occupation>Gardener</occupation> </row> <row>   <id>2</id>   <name>Ben</name>   <occupation>Horticulturalist</occupation> </row></dataset>]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String The DomQuery path relative from the record element to the element that contains a record identifier value. ]]></description>
		</attribute>
		<attribute>
			<name>record</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[record : StringThe DomQuery path to the repeated element which contains record information. ]]></description>
		</attribute>
		<attribute>
			<name>success</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[success : StringThe DomQuery path to the success attribute used by forms. ]]></description>
		</attribute>
		<attribute>
			<name>totalRecords</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[totalRecords : String The DomQuery path from which to retrieve the total number of records in the dataset. This is only needed if the whole dataset is not passed in one go, but is being paged from the remote server. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>dd</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.dd.DD
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[A DragDrop implementation where the linked element follows the mouse cursor during a drag. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>dDProxy</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.dd.DDProxy
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[A DragDrop implementation that inserts an empty, bordered div into the document that follows the cursor during drag operations. At the time of the click, the frame div is resized to the dimensions of the linked html element, and moved to the exact location of the linked element. References to the 'frame' element refer to the single proxy element that was created to be dragged in place of all DDProxy elements on the page. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>dDTarget</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.dd.DDTarget
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[A DragDrop implementation that does not move, but can be a drop target. You would get the same result by simply omitting implementation for the event callbacks, but this way we reduce the processing cost of the event listener and the callbacks. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>dragDrop</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.dd.DragDrop
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Defines the interface and base operation of items that that can be dragged or can be drop targets. It was designed to be extended, overriding the event handlers for startDrag, onDrag, onDragOver and onDragOut. Up to three html elements can be associated with a DragDrop instance:linked element: the element that is passed into the constructor. This is the element which defines the boundaries for interaction with other DragDrop objects.handle element(s): The drag operation only occurs if the element that was clicked matches a handle element. By default this is the linked element, but there are times that you will want only a portion of the linked element to initiate the drag operation, and the setHandleElId() method provides a way to define this.drag element: this represents the element that would be moved along with the cursor during a drag operation. By default, this is the linked element itself as in Ext.dd.DD. setDragElId() lets you define a separate element that would be moved, as in Ext.dd.DDProxy.This class should not be instantiated until the onload event to ensure that the associated elements are available. The following would define a DragDrop obj that would interact with any other DragDrop obj in the 'group1' group: dd = new Ext.dd.DragDrop('div1', 'group1');Since none of the event handlers have been implemented, nothing would actually happen if you were to run the code above. Normally you would override this class or one of the default implementations, but you can also override the methods you want on an instance of the class...dd.onDragDrop = function(e, id) {alert('dd was dropped on ' + id);}]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>dragDropMgr</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.dd.DragDropMgr
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[DragDropMgr is a singleton that tracks the element interaction for all DragDrop items in the window. Generally, you will not call this class directly, but it does have helper methods that could be useful in your DragDrop implementations.This class is a singleton and cannot be created directly.]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>dragSource</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.dd.DragSource
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[A simple class that provides the basic implementation needed to make any element draggable. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>ddGroup</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ddGroup : String A named drag drop group to which this object belongs. If a group is specified, then this object will only interact with other drag drop objects in the same group (defaults to undefined). ]]></description>
		</attribute>
		<attribute>
			<name>dropAllowed</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[dropAllowed : StringThe CSS class returned to the drag source when drop is allowed (defaults to 'x-dd-drop-ok'). ]]></description>
		</attribute>
		<attribute>
			<name>dropNotAllowed</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[dropNotAllowed : StringThe CSS class returned to the drag source when drop is not allowed (defaults to 'x-dd-drop-nodrop'). ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>dragZone</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.dd.DragZone
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[This class provides a container DD instance that proxies for multiple child node sources.By default, this class requires that draggable child nodes are registered with Ext.dd.Registry. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>containerScroll</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[containerScroll : BooleanTrue to register this container with the Scrollmanager for auto scrolling during drag operations.]]></description>
		</attribute>
		<attribute>
			<name>hlColor</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hlColor : String The color to use when visually highlighting the drag source in the afterRepair method after a failed drop (defaults to 'c3daf9' - light blue) ]]></description>
		</attribute>
		<attribute>
			<name>ddGroup</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ddGroup : String A named drag drop group to which this object belongs. If a group is specified, then this object will only interact with other drag drop objects in the same group (defaults to undefined). ]]></description>
		</attribute>
		<attribute>
			<name>dropAllowed</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[dropAllowed : StringThe CSS class returned to the drag source when drop is allowed (defaults to 'x-dd-drop-ok'). ]]></description>
		</attribute>
		<attribute>
			<name>dropNotAllowed</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[dropNotAllowed : StringThe CSS class returned to the drag source when drop is not allowed (defaults to 'x-dd-drop-nodrop'). ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>dropTarget</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.dd.DropTarget
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[A simple class that provides the basic implementation needed to make any element a drop target that can have draggable items dropped onto it. The drop has no effect until an implementation of notifyDrop is provided. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>overClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[overClass : StringThe CSS class applied to the drop target element while the drag source is over it (defaults to ''). ]]></description>
		</attribute>
		<attribute>
			<name>ddGroup</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ddGroup : String A named drag drop group to which this object belongs. If a group is specified, then this object will only interact with other drag drop objects in the same group (defaults to undefined). ]]></description>
		</attribute>
		<attribute>
			<name>dropAllowed</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[dropAllowed : StringThe CSS class returned to the drag source when drop is allowed (defaults to 'x-dd-drop-ok'). ]]></description>
		</attribute>
		<attribute>
			<name>dropNotAllowed</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[dropNotAllowed : StringThe CSS class returned to the drag source when drop is not allowed (defaults to 'x-dd-drop-nodrop'). ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>dropZone</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.dd.DropZone
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[This class provides a container DD instance that proxies for multiple child node targets.By default, this class requires that child nodes accepting drop are registered with Ext.dd.Registry. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>overClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[overClass : StringThe CSS class applied to the drop target element while the drag source is over it (defaults to ''). ]]></description>
		</attribute>
		<attribute>
			<name>ddGroup</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ddGroup : String A named drag drop group to which this object belongs. If a group is specified, then this object will only interact with other drag drop objects in the same group (defaults to undefined). ]]></description>
		</attribute>
		<attribute>
			<name>dropAllowed</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[dropAllowed : StringThe CSS class returned to the drag source when drop is allowed (defaults to 'x-dd-drop-ok'). ]]></description>
		</attribute>
		<attribute>
			<name>dropNotAllowed</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[dropNotAllowed : StringThe CSS class returned to the drag source when drop is not allowed (defaults to 'x-dd-drop-nodrop'). ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>registry</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.dd.Registry
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Provides easy access to all drag drop components that are registered on a page. Items can be retrieved either directly by DOM node id, or by passing in the drag drop event that occurred and looking up the event target.This class is a singleton and cannot be created directly. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>scrollManager</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.dd.ScrollManager
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Provides automatic scrolling of overflow regions in the page during drag operations.Note: This class uses 'Point Mode' and is untested in 'Intersect Mode'.This class is a singleton and cannot be created directly. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>statusProxy</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.dd.StatusProxy
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[A specialized drag proxy that supports a drop status icon, Ext.Layer styles and auto-repair. This is the default drag proxy used by all Ext.dd components. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>dropAllowed</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[dropAllowed : StringThe CSS class to apply to the status element when drop is allowed (defaults to 'x-dd-drop-ok'). ]]></description>
		</attribute>
		<attribute>
			<name>dropNotAllowed</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[dropNotAllowed : StringThe CSS class to apply to the status element when drop is not allowed (defaults to 'x-dd-drop-nodrop'). ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>basicForm</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.form.BasicForm
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Supplies the functionality to do 'actions' on forms and initialize Ext.form.Field types on existing markup.By default, Ext Forms are submitted through Ajax, using Ext.form.Action. To enable normal browser submission of an Ext Form, override the Form's onSubmit, and submit methods:var myForm = new Ext.form.BasicForm('form-el-id', {        onSubmit: Ext.emptyFn,        submit: function() {            this.getEl().dom.submit();        }    });]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>timeout</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[timeout : NumberTimeout for form actions in seconds (default is 30 seconds). ]]></description>
		</attribute>
		<attribute>
			<name>url</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[url : StringThe URL to use for form actions if one isn't supplied in the action options. ]]></description>
		</attribute>
		<attribute>
			<name>baseParams</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[baseParams : ObjectParameters to pass with all requests. e.g. baseParams: {id: '123', foo: 'bar'}. ]]></description>
		</attribute>
		<attribute>
			<name>reader</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[reader : DataReaderAn Ext.data.DataReader (e.g. Ext.data.XmlReader) to be used to read data when executing 'load' actions. This is optional as there is built-in support for processing JSON. ]]></description>
		</attribute>
		<attribute>
			<name>errorReader</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[errorReader : DataReaderAn Ext.data.DataReader (e.g. Ext.data.XmlReader) to be used to read data when reading validation errors on 'submit' actions. This is completely optional as there is built-in support for processing JSON. ]]></description>
		</attribute>
		<attribute>
			<name>fileUpload</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[fileUpload : BooleanSet to true if this form is a file upload. ]]></description>
		</attribute>
		<attribute>
			<name>trackResetOnLoad</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[trackResetOnLoad : BooleanIf set to true, form.reset() resets to the last loaded or setValues() data instead of when the form was first created. ]]></description>
		</attribute>
		<attribute>
			<name>method</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[method : StringThe request method to use (GET or POST) for form actions if one isn't supplied in the action options. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>checkbox</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.form.Checkbox
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Single checkbox field. Can be used as a direct replacement for traditional checkbox fields. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>boxLabel</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[boxLabel : StringThe text that appears beside the checkbox ]]></description>
		</attribute>
		<attribute>
			<name>checked</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[checked : BooleanTrue if the the checkbox should render already checked (defaults to false)]]></description>
		</attribute>
		<attribute>
			<name>inputValue</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[inputValue : StringThe value that should go into the generated input element's value attribute ]]></description>
		</attribute>
		<attribute>
			<name>disabled</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[disabled : BooleanTrue to disable the field (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>tabIndex</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[tabIndex : Number The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined). ]]></description>
		</attribute>
		<attribute>
			<name>itemCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[itemCls : String An additional CSS class to apply to this field (defaults to the container's itemCls value if set, or '') ]]></description>
		</attribute>
		<attribute>
			<name>autoCreate</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[autoCreate : String/Object A DomHelper element spec, or true for a default element spec (defaults to {tag: 'input', type: 'text', size: '20', autocomplete: 'off'}) ]]></description>
		</attribute>
		<attribute>
			<name>clearCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[clearCls : StringThe CSS class used to provide field clearing (defaults to 'x-form-clear-left') ]]></description>
		</attribute>
		<attribute>
			<name>fieldClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[fieldClass : StringThe default CSS class for the field (defaults to 'x-form-field') ]]></description>
		</attribute>
		<attribute>
			<name>fieldLabel</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[fieldLabel : String The label text to display next to this field (defaults to '') ]]></description>
		</attribute>
		<attribute>
			<name>focusClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[focusClass : StringThe CSS class to use when the field receives focus (defaults to 'x-form-focus') ]]></description>
		</attribute>
		<attribute>
			<name>hideLabel</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideLabel : BooleanTrue to completely hide the label element (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>inputType</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[inputType : StringThe type attribute for input fields -- e.g. radio, text, password (defaults to 'text'). ]]></description>
		</attribute>
		<attribute>
			<name>invalidClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[invalidClass : StringThe CSS class to use when marking a field invalid (defaults to 'x-form-invalid') ]]></description>
		</attribute>
		<attribute>
			<name>invalidText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[invalidText : StringThe error text to use when marking a field invalid and no message is provided (defaults to 'The value in this field is invalid') ]]></description>
		</attribute>
		<attribute>
			<name>labelSeparator</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[labelSeparator : StringThe standard separator to display after the text of each form label (defaults to the value of Ext.layout.FormLayout.labelSeparator, which is a colon ':' by default). To display no separator for this field's label specify empty string ''. ]]></description>
		</attribute>
		<attribute>
			<name>labelStyle</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[labelStyle : StringA CSS style specification to apply directly to this field's label (defaults to the container's labelStyle value if set, or ''). For example, labelStyle: 'font-weight:bold;'. ]]></description>
		</attribute>
		<attribute>
			<name>msgFx</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[msgFx : StringExperimental The effect used when displaying a validation message under the field (defaults to 'normal'). ]]></description>
		</attribute>
		<attribute>
			<name>msgTarget</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[msgTarget : StringThe location where error text should display. Should be one of the following values (defaults to 'qtip'):Value         Description-----------   ----------------------------------------------------------------------qtip          Display a quick tip when the user hovers over the fieldtitle         Display a default browser title attribute popupunder         Add a block div beneath the field containing the error textside          Add an error icon to the right of the field with a popup on hover[element id]  Add the error text directly to the innerHTML of the specified element]]></description>
		</attribute>
		<attribute>
			<name>validateOnBlur</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[validateOnBlur : BooleanWhether the field should validate when it loses focus (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>validationDelay</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[validationDelay : NumberThe length of time in milliseconds after user input begins until validation is initiated (defaults to 250) ]]></description>
		</attribute>
		<attribute>
			<name>validationEvent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[validationEvent : String/BooleanThe event that should initiate field validation. Set to false to disable automatic validation (defaults to 'keyup'). ]]></description>
		</attribute>
		<attribute>
			<name>readOnly</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[readOnly : Boolean True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute. ]]></description>
		</attribute>
		<attribute>
			<name>name</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[name : StringThe field's HTML name attribute. ]]></description>
		</attribute>
		<attribute>
			<name>value</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[value : MixedA value to initialize this field with. ]]></description>
		</attribute>
		<attribute>
			<name>autoHeight</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoHeight : Boolean
True to use height:'auto', false to use fixed height (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>autoWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoWidth : Boolean
True to use width:'auto', false to use fixed width (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>height</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[height : Number
The height of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>width</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[width : Number
The width of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>comboBox</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.form.ComboBox
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[A combobox control with support for autocomplete, remote-loading, paging and many other features. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>url</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>loadingText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>selectedClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>store</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>tpl</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>shadow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>pageSize</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>maxHeight</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>autoCreate</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoCreate : Boolean/ObjectA DomHelper element spec, or true for a default element spec (defaults to: {tag: 'input', type: 'text', size: '24', autocomplete: 'off'}) ]]></description>
		</attribute>
		<attribute>
			<name>allQuery</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[allQuery : StringThe text query to send to the server to return all records for the list with no filtering (defaults to '') ]]></description>
		</attribute>
		<attribute>
			<name>displayField</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[displayField : StringThe underlying data field name to bind to this ComboBox (defaults to undefined if mode = 'remote' or 'text' if transforming a select) ]]></description>
		</attribute>
		<attribute>
			<name>forceSelection</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[forceSelection : Boolean True to restrict the selected value to one of the values in the list, false to allow the user to set arbitrary text into the field (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>handleHeight</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[handleHeight : NumberThe height in pixels of the dropdown list resize handle if resizable = true (defaults to 8) ]]></description>
		</attribute>
		<attribute>
			<name>hiddenName</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hiddenName : StringIf specified, a hidden form field with this name is dynamically generated to store the field's data value (defaults to the underlying DOM element's name). Required for the combo's value to automatically post during a form submission. ]]></description>
		</attribute>
		<attribute>
			<name>lazyInit</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[lazyInit : BooleanTrue to not initialize the list for this combo until the field is focused. (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>lazyRender</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>listAlign</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>listClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>listWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>minChars</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>minListWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>queryDelay</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>queryParam</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>triggerAction</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>typeAhead</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>valueField</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>valueNotFoundText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>resizable</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>title</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>transform</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>data</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[data : ArrayInline data to be loaded when the store is initialized. ]]></description>
		</attribute>
		<attribute>
			<name>editable</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[editable : BooleanFalse to prevent the user from typing text directly into the field, just like a traditional select (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>root</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[root : Stringname of the property which contains the Array of row objects]]></description>
		</attribute>
		<attribute>
			<name>mode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>hideTrigger</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideTrigger : BooleanTrue to hide the trigger element and display only the base text field (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>triggerClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[triggerClass : StringA CSS class to apply to the trigger ]]></description>
		</attribute>
		<attribute>
			<name>emptyText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[emptyText : StringThe default text to display in an empty field (defaults to null). ]]></description>
		</attribute>
		<attribute>
			<name>allowBlank</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowBlank : BooleanFalse to validate that the value length > 0 (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>blankText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[blankText : StringError text to display if the allow blank validation fails (defaults to 'This field is required')]]></description>
		</attribute>
		<attribute>
			<name>disableKeyFilter</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[disableKeyFilter : BooleanTrue to disable input keystroke filtering (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>emptyClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[emptyClass : StringThe CSS class to apply to an empty field to style the emptyText (defaults to 'x-form-empty-field'). This class is automatically added and removed as needed depending on the current field value. ]]></description>
		</attribute>
		<attribute>
			<name>grow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[grow : BooleanTrue if this field should automatically grow and shrink to its content ]]></description>
		</attribute>
		<attribute>
			<name>growMax</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[growMax : NumberThe maximum width to allow when grow = true (defaults to 800) ]]></description>
		</attribute>
		<attribute>
			<name>growMin</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[growMin : NumberThe minimum width to allow when grow = true (defaults to 30) ]]></description>
		</attribute>
		<attribute>
			<name>maskRe</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[maskRe : RegExpAn input mask regular expression that will be used to filter keystrokes that don't match (defaults to null) ]]></description>
		</attribute>
		<attribute>
			<name>maxLength</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[maxLength : NumberMaximum input field length allowed (defaults to Number.MAX_VALUE) ]]></description>
		</attribute>
		<attribute>
			<name>maxLengthText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[maxLengthText : StringError text to display if the maximum length validation fails (defaults to 'The maximum length for this field is {maxLength}') ]]></description>
		</attribute>
		<attribute>
			<name>minLength</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[minLength : NumberMinimum input field length required (defaults to 0) ]]></description>
		</attribute>
		<attribute>
			<name>minLengthText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[minLengthText : String Error text to display if the minimum length validation fails (defaults to 'The minimum length for this field is {minLength}') ]]></description>
		</attribute>
		<attribute>
			<name>regex</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[regex : RegExp A JavaScript RegExp object to be tested against the field value during validation (defaults to null). If available, this regex will be evaluated only after the basic validators all return true, and will be passed the current field value. If the test fails, the field will be marked invalid using regexText. ]]></description>
		</attribute>
		<attribute>
			<name>regexText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[regexText : StringThe error text to display if regex is used and the test fails during validation (defaults to '') ]]></description>
		</attribute>
		<attribute>
			<name>selectOnFocus</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[selectOnFocus : BooleanTrue to automatically select any existing field text when the field receives input focus (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>validator</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[validator : Function A custom validation function to be called during field validation (defaults to null). If available, this function will be called only after the basic validators all return true, and will be passed the current field value and expected to return boolean true if the value is valid or a string error message if invalid. ]]></description>
		</attribute>
		<attribute>
			<name>vtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[vtype : StringA validation type name as defined in Ext.form.VTypes (defaults to null) ]]></description>
		</attribute>
		<attribute>
			<name>vtypeText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[vtypeText : String A custom error message to display in place of the default message provided for the vtype currently set for this field (defaults to ''). Only applies if vtype is set, else ignored. ]]></description>
		</attribute>
		<attribute>
			<name>disabled</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[disabled : BooleanTrue to disable the field (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>tabIndex</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[tabIndex : Number The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined). ]]></description>
		</attribute>
		<attribute>
			<name>itemCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[itemCls : String An additional CSS class to apply to this field (defaults to the container's itemCls value if set, or '') ]]></description>
		</attribute>
		<attribute>
			<name>autoCreate</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[autoCreate : String/Object A DomHelper element spec, or true for a default element spec (defaults to {tag: 'input', type: 'text', size: '20', autocomplete: 'off'}) ]]></description>
		</attribute>
		<attribute>
			<name>clearCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[clearCls : StringThe CSS class used to provide field clearing (defaults to 'x-form-clear-left') ]]></description>
		</attribute>
		<attribute>
			<name>fieldClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[fieldClass : StringThe default CSS class for the field (defaults to 'x-form-field') ]]></description>
		</attribute>
		<attribute>
			<name>fieldLabel</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[fieldLabel : String The label text to display next to this field (defaults to '') ]]></description>
		</attribute>
		<attribute>
			<name>focusClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[focusClass : StringThe CSS class to use when the field receives focus (defaults to 'x-form-focus') ]]></description>
		</attribute>
		<attribute>
			<name>hideLabel</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideLabel : BooleanTrue to completely hide the label element (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>inputType</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[inputType : StringThe type attribute for input fields -- e.g. radio, text, password (defaults to 'text'). ]]></description>
		</attribute>
		<attribute>
			<name>invalidClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[invalidClass : StringThe CSS class to use when marking a field invalid (defaults to 'x-form-invalid') ]]></description>
		</attribute>
		<attribute>
			<name>invalidText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[invalidText : StringThe error text to use when marking a field invalid and no message is provided (defaults to 'The value in this field is invalid') ]]></description>
		</attribute>
		<attribute>
			<name>labelSeparator</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[labelSeparator : StringThe standard separator to display after the text of each form label (defaults to the value of Ext.layout.FormLayout.labelSeparator, which is a colon ':' by default). To display no separator for this field's label specify empty string ''. ]]></description>
		</attribute>
		<attribute>
			<name>labelStyle</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[labelStyle : StringA CSS style specification to apply directly to this field's label (defaults to the container's labelStyle value if set, or ''). For example, labelStyle: 'font-weight:bold;'. ]]></description>
		</attribute>
		<attribute>
			<name>msgFx</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[msgFx : StringExperimental The effect used when displaying a validation message under the field (defaults to 'normal'). ]]></description>
		</attribute>
		<attribute>
			<name>msgTarget</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[msgTarget : StringThe location where error text should display. Should be one of the following values (defaults to 'qtip'):Value         Description-----------   ----------------------------------------------------------------------qtip          Display a quick tip when the user hovers over the fieldtitle         Display a default browser title attribute popupunder         Add a block div beneath the field containing the error textside          Add an error icon to the right of the field with a popup on hover[element id]  Add the error text directly to the innerHTML of the specified element]]></description>
		</attribute>
		<attribute>
			<name>validateOnBlur</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[validateOnBlur : BooleanWhether the field should validate when it loses focus (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>validationDelay</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[validationDelay : NumberThe length of time in milliseconds after user input begins until validation is initiated (defaults to 250) ]]></description>
		</attribute>
		<attribute>
			<name>validationEvent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[validationEvent : String/BooleanThe event that should initiate field validation. Set to false to disable automatic validation (defaults to 'keyup'). ]]></description>
		</attribute>
		<attribute>
			<name>readOnly</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[readOnly : Boolean True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute. ]]></description>
		</attribute>
		<attribute>
			<name>name</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[name : StringThe field's HTML name attribute. ]]></description>
		</attribute>
		<attribute>
			<name>value</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[value : MixedA value to initialize this field with. ]]></description>
		</attribute>
		<attribute>
			<name>autoHeight</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoHeight : Boolean
True to use height:'auto', false to use fixed height (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>autoWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoWidth : Boolean
True to use width:'auto', false to use fixed width (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>height</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[height : Number
The height of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>width</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[width : Number
The width of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>dateField</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.form.DateField
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Provides a date input field with a Ext.DatePicker dropdown and automatic date validation. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>disabledDatesText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledDatesText : StringThe tooltip text to display when the date falls on a disabled date (defaults to 'Disabled')]]></description>
		</attribute>
		<attribute>
			<name>disabledDays</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledDays : ArrayAn array of days to disable, 0 based. For example, [0, 6] disables Sunday and Saturday (defaults to null). ]]></description>
		</attribute>
		<attribute>
			<name>disabledDaysText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledDaysText : StringThe tooltip to display when the date falls on a disabled day (defaults to 'Disabled') ]]></description>
		</attribute>
		<attribute>
			<name>maxText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[maxText : String The error text to display when the date in the cell is after maxValue (defaults to 'The date in this field must be before {maxValue}'). ]]></description>
		</attribute>
		<attribute>
			<name>minText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[minText : String The error text to display when the date in the cell is before minValue (defaults to 'The date in this field must be after {minValue}'). ]]></description>
		</attribute>
		<attribute>
			<name>altFormats</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[altFormats : StringMultiple date formats separated by '|' to try when parsing a user input value and it doesn't match the defined format (defaults to 'm/d/Y|m-d-y|m-d-Y|m/d|m-d|d'). ]]></description>
		</attribute>
		<attribute>
			<name>disabledDates</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledDates : Array An array of 'dates' to disable, as strings. These strings will be used to build a dynamic regular expression so they are very powerful. Some examples:['03/08/2003', '09/16/2003'] would disable those exact dates ['03/08', '09/16'] would disable those days for every year['^03/08'] would only match the beginning (useful if you are using short years)['03/../2006'] would disable every day in March 2006[^03'] would disable every day in every MarchIn order to support regular expressions, if you are using a date format that has '.' in it, you will have to escape the dot when restricting dates. For example: ['03\.08\.03']. ]]></description>
		</attribute>
		<attribute>
			<name>maxValue</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[maxValue : Date/StringThe maximum allowed date. Can be either a Javascript date object or a string date in a valid format (defaults to null). ]]></description>
		</attribute>
		<attribute>
			<name>minValue</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[minValue : Date/StringThe minimum allowed date. Can be either a Javascript date object or a string date in a valid format (defaults to null). ]]></description>
		</attribute>
		<attribute>
			<name>format</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[format : String The default date format string which can be overriden for localization support. The format must be valid according to Date.parseDate (defaults to 'm/d/y'). ]]></description>
		</attribute>
		<attribute>
			<name>hideTrigger</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideTrigger : BooleanTrue to hide the trigger element and display only the base text field (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>triggerClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[triggerClass : StringA CSS class to apply to the trigger ]]></description>
		</attribute>
		<attribute>
			<name>emptyText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[emptyText : StringThe default text to display in an empty field (defaults to null). ]]></description>
		</attribute>
		<attribute>
			<name>allowBlank</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowBlank : BooleanFalse to validate that the value length > 0 (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>blankText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[blankText : StringError text to display if the allow blank validation fails (defaults to 'This field is required')]]></description>
		</attribute>
		<attribute>
			<name>disableKeyFilter</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[disableKeyFilter : BooleanTrue to disable input keystroke filtering (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>emptyClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[emptyClass : StringThe CSS class to apply to an empty field to style the emptyText (defaults to 'x-form-empty-field'). This class is automatically added and removed as needed depending on the current field value. ]]></description>
		</attribute>
		<attribute>
			<name>grow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[grow : BooleanTrue if this field should automatically grow and shrink to its content ]]></description>
		</attribute>
		<attribute>
			<name>growMax</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[growMax : NumberThe maximum width to allow when grow = true (defaults to 800) ]]></description>
		</attribute>
		<attribute>
			<name>growMin</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[growMin : NumberThe minimum width to allow when grow = true (defaults to 30) ]]></description>
		</attribute>
		<attribute>
			<name>maskRe</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[maskRe : RegExpAn input mask regular expression that will be used to filter keystrokes that don't match (defaults to null) ]]></description>
		</attribute>
		<attribute>
			<name>maxLength</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[maxLength : NumberMaximum input field length allowed (defaults to Number.MAX_VALUE) ]]></description>
		</attribute>
		<attribute>
			<name>maxLengthText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[maxLengthText : StringError text to display if the maximum length validation fails (defaults to 'The maximum length for this field is {maxLength}') ]]></description>
		</attribute>
		<attribute>
			<name>minLength</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[minLength : NumberMinimum input field length required (defaults to 0) ]]></description>
		</attribute>
		<attribute>
			<name>minLengthText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[minLengthText : String Error text to display if the minimum length validation fails (defaults to 'The minimum length for this field is {minLength}') ]]></description>
		</attribute>
		<attribute>
			<name>regex</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[regex : RegExp A JavaScript RegExp object to be tested against the field value during validation (defaults to null). If available, this regex will be evaluated only after the basic validators all return true, and will be passed the current field value. If the test fails, the field will be marked invalid using regexText. ]]></description>
		</attribute>
		<attribute>
			<name>regexText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[regexText : StringThe error text to display if regex is used and the test fails during validation (defaults to '') ]]></description>
		</attribute>
		<attribute>
			<name>selectOnFocus</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[selectOnFocus : BooleanTrue to automatically select any existing field text when the field receives input focus (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>validator</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[validator : Function A custom validation function to be called during field validation (defaults to null). If available, this function will be called only after the basic validators all return true, and will be passed the current field value and expected to return boolean true if the value is valid or a string error message if invalid. ]]></description>
		</attribute>
		<attribute>
			<name>vtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[vtype : StringA validation type name as defined in Ext.form.VTypes (defaults to null) ]]></description>
		</attribute>
		<attribute>
			<name>vtypeText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[vtypeText : String A custom error message to display in place of the default message provided for the vtype currently set for this field (defaults to ''). Only applies if vtype is set, else ignored. ]]></description>
		</attribute>
		<attribute>
			<name>disabled</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[disabled : BooleanTrue to disable the field (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>tabIndex</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[tabIndex : Number The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined). ]]></description>
		</attribute>
		<attribute>
			<name>itemCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[itemCls : String An additional CSS class to apply to this field (defaults to the container's itemCls value if set, or '') ]]></description>
		</attribute>
		<attribute>
			<name>autoCreate</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[autoCreate : String/Object A DomHelper element spec, or true for a default element spec (defaults to {tag: 'input', type: 'text', size: '20', autocomplete: 'off'}) ]]></description>
		</attribute>
		<attribute>
			<name>clearCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[clearCls : StringThe CSS class used to provide field clearing (defaults to 'x-form-clear-left') ]]></description>
		</attribute>
		<attribute>
			<name>fieldClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[fieldClass : StringThe default CSS class for the field (defaults to 'x-form-field') ]]></description>
		</attribute>
		<attribute>
			<name>fieldLabel</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[fieldLabel : String The label text to display next to this field (defaults to '') ]]></description>
		</attribute>
		<attribute>
			<name>focusClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[focusClass : StringThe CSS class to use when the field receives focus (defaults to 'x-form-focus') ]]></description>
		</attribute>
		<attribute>
			<name>hideLabel</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideLabel : BooleanTrue to completely hide the label element (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>inputType</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[inputType : StringThe type attribute for input fields -- e.g. radio, text, password (defaults to 'text'). ]]></description>
		</attribute>
		<attribute>
			<name>invalidClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[invalidClass : StringThe CSS class to use when marking a field invalid (defaults to 'x-form-invalid') ]]></description>
		</attribute>
		<attribute>
			<name>invalidText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[invalidText : StringThe error text to use when marking a field invalid and no message is provided (defaults to 'The value in this field is invalid') ]]></description>
		</attribute>
		<attribute>
			<name>labelSeparator</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[labelSeparator : StringThe standard separator to display after the text of each form label (defaults to the value of Ext.layout.FormLayout.labelSeparator, which is a colon ':' by default). To display no separator for this field's label specify empty string ''. ]]></description>
		</attribute>
		<attribute>
			<name>labelStyle</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[labelStyle : StringA CSS style specification to apply directly to this field's label (defaults to the container's labelStyle value if set, or ''). For example, labelStyle: 'font-weight:bold;'. ]]></description>
		</attribute>
		<attribute>
			<name>msgFx</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[msgFx : StringExperimental The effect used when displaying a validation message under the field (defaults to 'normal'). ]]></description>
		</attribute>
		<attribute>
			<name>msgTarget</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[msgTarget : StringThe location where error text should display. Should be one of the following values (defaults to 'qtip'):Value         Description-----------   ----------------------------------------------------------------------qtip          Display a quick tip when the user hovers over the fieldtitle         Display a default browser title attribute popupunder         Add a block div beneath the field containing the error textside          Add an error icon to the right of the field with a popup on hover[element id]  Add the error text directly to the innerHTML of the specified element]]></description>
		</attribute>
		<attribute>
			<name>validateOnBlur</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[validateOnBlur : BooleanWhether the field should validate when it loses focus (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>validationDelay</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[validationDelay : NumberThe length of time in milliseconds after user input begins until validation is initiated (defaults to 250) ]]></description>
		</attribute>
		<attribute>
			<name>validationEvent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[validationEvent : String/BooleanThe event that should initiate field validation. Set to false to disable automatic validation (defaults to 'keyup'). ]]></description>
		</attribute>
		<attribute>
			<name>readOnly</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[readOnly : Boolean True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute. ]]></description>
		</attribute>
		<attribute>
			<name>name</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[name : StringThe field's HTML name attribute. ]]></description>
		</attribute>
		<attribute>
			<name>value</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[value : MixedA value to initialize this field with. ]]></description>
		</attribute>
		<attribute>
			<name>autoHeight</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoHeight : Boolean
True to use height:'auto', false to use fixed height (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>autoWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoWidth : Boolean
True to use width:'auto', false to use fixed width (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>height</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[height : Number
The height of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>width</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[width : Number
The width of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>dateTimeField</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.form.DateTimeField
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>disabledDatesText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>disabledDays</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>disabledDaysText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>maxText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>minText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>invalidText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>triggerClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>altFormats</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>disabledDates</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>maxValue</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>minValue</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>defaultAutoCreate</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>format</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>hideTrigger</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideTrigger : BooleanTrue to hide the trigger element and display only the base text field (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>emptyText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[emptyText : StringThe default text to display in an empty field (defaults to null). ]]></description>
		</attribute>
		<attribute>
			<name>allowBlank</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowBlank : BooleanFalse to validate that the value length > 0 (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>blankText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[blankText : StringError text to display if the allow blank validation fails (defaults to 'This field is required')]]></description>
		</attribute>
		<attribute>
			<name>disableKeyFilter</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[disableKeyFilter : BooleanTrue to disable input keystroke filtering (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>emptyClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[emptyClass : StringThe CSS class to apply to an empty field to style the emptyText (defaults to 'x-form-empty-field'). This class is automatically added and removed as needed depending on the current field value. ]]></description>
		</attribute>
		<attribute>
			<name>grow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[grow : BooleanTrue if this field should automatically grow and shrink to its content ]]></description>
		</attribute>
		<attribute>
			<name>growMax</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[growMax : NumberThe maximum width to allow when grow = true (defaults to 800) ]]></description>
		</attribute>
		<attribute>
			<name>growMin</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[growMin : NumberThe minimum width to allow when grow = true (defaults to 30) ]]></description>
		</attribute>
		<attribute>
			<name>maskRe</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[maskRe : RegExpAn input mask regular expression that will be used to filter keystrokes that don't match (defaults to null) ]]></description>
		</attribute>
		<attribute>
			<name>maxLength</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[maxLength : NumberMaximum input field length allowed (defaults to Number.MAX_VALUE) ]]></description>
		</attribute>
		<attribute>
			<name>maxLengthText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[maxLengthText : StringError text to display if the maximum length validation fails (defaults to 'The maximum length for this field is {maxLength}') ]]></description>
		</attribute>
		<attribute>
			<name>minLength</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[minLength : NumberMinimum input field length required (defaults to 0) ]]></description>
		</attribute>
		<attribute>
			<name>minLengthText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[minLengthText : String Error text to display if the minimum length validation fails (defaults to 'The minimum length for this field is {minLength}') ]]></description>
		</attribute>
		<attribute>
			<name>regex</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[regex : RegExp A JavaScript RegExp object to be tested against the field value during validation (defaults to null). If available, this regex will be evaluated only after the basic validators all return true, and will be passed the current field value. If the test fails, the field will be marked invalid using regexText. ]]></description>
		</attribute>
		<attribute>
			<name>regexText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[regexText : StringThe error text to display if regex is used and the test fails during validation (defaults to '') ]]></description>
		</attribute>
		<attribute>
			<name>selectOnFocus</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[selectOnFocus : BooleanTrue to automatically select any existing field text when the field receives input focus (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>validator</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[validator : Function A custom validation function to be called during field validation (defaults to null). If available, this function will be called only after the basic validators all return true, and will be passed the current field value and expected to return boolean true if the value is valid or a string error message if invalid. ]]></description>
		</attribute>
		<attribute>
			<name>vtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[vtype : StringA validation type name as defined in Ext.form.VTypes (defaults to null) ]]></description>
		</attribute>
		<attribute>
			<name>vtypeText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[vtypeText : String A custom error message to display in place of the default message provided for the vtype currently set for this field (defaults to ''). Only applies if vtype is set, else ignored. ]]></description>
		</attribute>
		<attribute>
			<name>disabled</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[disabled : BooleanTrue to disable the field (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>tabIndex</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[tabIndex : Number The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined). ]]></description>
		</attribute>
		<attribute>
			<name>itemCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[itemCls : String An additional CSS class to apply to this field (defaults to the container's itemCls value if set, or '') ]]></description>
		</attribute>
		<attribute>
			<name>autoCreate</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[autoCreate : String/Object A DomHelper element spec, or true for a default element spec (defaults to {tag: 'input', type: 'text', size: '20', autocomplete: 'off'}) ]]></description>
		</attribute>
		<attribute>
			<name>clearCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[clearCls : StringThe CSS class used to provide field clearing (defaults to 'x-form-clear-left') ]]></description>
		</attribute>
		<attribute>
			<name>fieldClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[fieldClass : StringThe default CSS class for the field (defaults to 'x-form-field') ]]></description>
		</attribute>
		<attribute>
			<name>fieldLabel</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[fieldLabel : String The label text to display next to this field (defaults to '') ]]></description>
		</attribute>
		<attribute>
			<name>focusClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[focusClass : StringThe CSS class to use when the field receives focus (defaults to 'x-form-focus') ]]></description>
		</attribute>
		<attribute>
			<name>hideLabel</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideLabel : BooleanTrue to completely hide the label element (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>inputType</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[inputType : StringThe type attribute for input fields -- e.g. radio, text, password (defaults to 'text'). ]]></description>
		</attribute>
		<attribute>
			<name>invalidClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[invalidClass : StringThe CSS class to use when marking a field invalid (defaults to 'x-form-invalid') ]]></description>
		</attribute>
		<attribute>
			<name>labelSeparator</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[labelSeparator : StringThe standard separator to display after the text of each form label (defaults to the value of Ext.layout.FormLayout.labelSeparator, which is a colon ':' by default). To display no separator for this field's label specify empty string ''. ]]></description>
		</attribute>
		<attribute>
			<name>labelStyle</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[labelStyle : StringA CSS style specification to apply directly to this field's label (defaults to the container's labelStyle value if set, or ''). For example, labelStyle: 'font-weight:bold;'. ]]></description>
		</attribute>
		<attribute>
			<name>msgFx</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[msgFx : StringExperimental The effect used when displaying a validation message under the field (defaults to 'normal'). ]]></description>
		</attribute>
		<attribute>
			<name>msgTarget</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[msgTarget : StringThe location where error text should display. Should be one of the following values (defaults to 'qtip'):Value         Description-----------   ----------------------------------------------------------------------qtip          Display a quick tip when the user hovers over the fieldtitle         Display a default browser title attribute popupunder         Add a block div beneath the field containing the error textside          Add an error icon to the right of the field with a popup on hover[element id]  Add the error text directly to the innerHTML of the specified element]]></description>
		</attribute>
		<attribute>
			<name>validateOnBlur</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[validateOnBlur : BooleanWhether the field should validate when it loses focus (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>validationDelay</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[validationDelay : NumberThe length of time in milliseconds after user input begins until validation is initiated (defaults to 250) ]]></description>
		</attribute>
		<attribute>
			<name>validationEvent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[validationEvent : String/BooleanThe event that should initiate field validation. Set to false to disable automatic validation (defaults to 'keyup'). ]]></description>
		</attribute>
		<attribute>
			<name>readOnly</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[readOnly : Boolean True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute. ]]></description>
		</attribute>
		<attribute>
			<name>name</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[name : StringThe field's HTML name attribute. ]]></description>
		</attribute>
		<attribute>
			<name>value</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[value : MixedA value to initialize this field with. ]]></description>
		</attribute>
		<attribute>
			<name>autoHeight</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoHeight : Boolean
True to use height:'auto', false to use fixed height (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>autoWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoWidth : Boolean
True to use width:'auto', false to use fixed width (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>height</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[height : Number
The height of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>width</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[width : Number
The width of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>field</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.form.Field
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Base class for form fields that provides default event handling, sizing, value handling and other functionality. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>disabled</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[disabled : BooleanTrue to disable the field (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>tabIndex</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[tabIndex : Number The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined). ]]></description>
		</attribute>
		<attribute>
			<name>itemCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[itemCls : String An additional CSS class to apply to this field (defaults to the container's itemCls value if set, or '') ]]></description>
		</attribute>
		<attribute>
			<name>autoCreate</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[autoCreate : String/Object A DomHelper element spec, or true for a default element spec (defaults to {tag: 'input', type: 'text', size: '20', autocomplete: 'off'}) ]]></description>
		</attribute>
		<attribute>
			<name>clearCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[clearCls : StringThe CSS class used to provide field clearing (defaults to 'x-form-clear-left') ]]></description>
		</attribute>
		<attribute>
			<name>fieldClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[fieldClass : StringThe default CSS class for the field (defaults to 'x-form-field') ]]></description>
		</attribute>
		<attribute>
			<name>fieldLabel</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[fieldLabel : String The label text to display next to this field (defaults to '') ]]></description>
		</attribute>
		<attribute>
			<name>focusClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[focusClass : StringThe CSS class to use when the field receives focus (defaults to 'x-form-focus') ]]></description>
		</attribute>
		<attribute>
			<name>hideLabel</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideLabel : BooleanTrue to completely hide the label element (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>inputType</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[inputType : StringThe type attribute for input fields -- e.g. radio, text, password (defaults to 'text'). ]]></description>
		</attribute>
		<attribute>
			<name>invalidClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[invalidClass : StringThe CSS class to use when marking a field invalid (defaults to 'x-form-invalid') ]]></description>
		</attribute>
		<attribute>
			<name>invalidText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[invalidText : StringThe error text to use when marking a field invalid and no message is provided (defaults to 'The value in this field is invalid') ]]></description>
		</attribute>
		<attribute>
			<name>labelSeparator</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[labelSeparator : StringThe standard separator to display after the text of each form label (defaults to the value of Ext.layout.FormLayout.labelSeparator, which is a colon ':' by default). To display no separator for this field's label specify empty string ''. ]]></description>
		</attribute>
		<attribute>
			<name>labelStyle</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[labelStyle : StringA CSS style specification to apply directly to this field's label (defaults to the container's labelStyle value if set, or ''). For example, labelStyle: 'font-weight:bold;'. ]]></description>
		</attribute>
		<attribute>
			<name>msgFx</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[msgFx : StringExperimental The effect used when displaying a validation message under the field (defaults to 'normal'). ]]></description>
		</attribute>
		<attribute>
			<name>msgTarget</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[msgTarget : StringThe location where error text should display. Should be one of the following values (defaults to 'qtip'):Value         Description-----------   ----------------------------------------------------------------------qtip          Display a quick tip when the user hovers over the fieldtitle         Display a default browser title attribute popupunder         Add a block div beneath the field containing the error textside          Add an error icon to the right of the field with a popup on hover[element id]  Add the error text directly to the innerHTML of the specified element]]></description>
		</attribute>
		<attribute>
			<name>validateOnBlur</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[validateOnBlur : BooleanWhether the field should validate when it loses focus (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>validationDelay</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[validationDelay : NumberThe length of time in milliseconds after user input begins until validation is initiated (defaults to 250) ]]></description>
		</attribute>
		<attribute>
			<name>validationEvent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[validationEvent : String/BooleanThe event that should initiate field validation. Set to false to disable automatic validation (defaults to 'keyup'). ]]></description>
		</attribute>
		<attribute>
			<name>readOnly</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[readOnly : Boolean True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute. ]]></description>
		</attribute>
		<attribute>
			<name>name</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[name : StringThe field's HTML name attribute. ]]></description>
		</attribute>
		<attribute>
			<name>value</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[value : MixedA value to initialize this field with. ]]></description>
		</attribute>
		<attribute>
			<name>autoHeight</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoHeight : Boolean
True to use height:'auto', false to use fixed height (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>autoWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoWidth : Boolean
True to use width:'auto', false to use fixed width (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>height</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[height : Number
The height of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>width</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[width : Number
The width of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>fieldSet</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.form.FieldSet
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Standard container used for grouping form fields. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>itemCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[itemCls : StringA css class to apply to the x-form-item of fields. This property cascades to child containers. ]]></description>
		</attribute>
		<attribute>
			<name>checkboxName</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[checkboxName : StringThe name to assign to the fieldset's checkbox if checkboxToggle = true (defaults to '[checkbox id]-checkbox'). ]]></description>
		</attribute>
		<attribute>
			<name>checkboxToggle</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[checkboxToggle : Boolean True to render a checkbox into the fieldset frame just in front of the legend (defaults to false). The fieldset will be expanded or collapsed when the checkbox is toggled. ]]></description>
		</attribute>
		<attribute>
			<name>labelWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[labelWidth : NumberThe width of labels. This property cascades to child containers. ]]></description>
		</attribute>
		<attribute>
			<name>iconCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[iconCls : String
A CSS class that will provide a background image to be used as the panel header icon (defaults to ''). ]]></description>
		</attribute>
		<attribute>
			<name>shadow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[minButtonWidth : Number
Minimum width in pixels of all buttons in this panel (defaults to 75) ]]></description>
		</attribute>
		<attribute>
			<name>shadowOffset</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[shadowOffset : Number
The number of pixels to offset the shadow if displayed (defaults to 4). Note that this option only applies when floating = true. ]]></description>
		</attribute>
		<attribute>
			<name>shim</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[shim : Boolean
False to disable the iframe shim in browsers which need one (defaults to true). Note that this option only applies when floating = true. ]]></description>
		</attribute>
		<attribute>
			<name>animCollapse</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[animCollapse : Boolean
True to animate the transition when the panel is collapsed, false to skip the animation (defaults to true if the Ext.Fx class is available, otherwise false). ]]></description>
		</attribute>
		<attribute>
			<name>autoLoad</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[autoLoad : Object/String/Function
A valid url spec according to the Updater Ext.Updater.update method. If autoLoad is not null, the panel will attempt to load its contents immediately upon render.The URL will become the default URL for this panel's body element, so it may be refreshed at any time.]]></description>
		</attribute>
		<attribute>
			<name>autoScroll</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoScroll : Boolean
True to use overflow:'auto' on the panel's body element and show scroll bars automatically when necessary, false to clip any overflowing content (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>baseCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[baseCls : String
The base CSS class to apply to this panel's element (defaults to 'x-panel').]]></description>
		</attribute>
		<attribute>
			<name>bbar</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[bbar : Object/Array
The bottom toolbar of the panel. This can be a Ext.Toolbar object, a toolbar config, or an array of buttons/button configs to be added to the toolbar. Note that this is not available as a property after render. To access the bottom toolbar after render, use getBottomToolbar. ]]></description>
		</attribute>
		<attribute>
			<name>bodyBorder</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[bodyBorder : Boolean
True to display an interior border on the body element of the panel, false to hide it (defaults to true). This only applies when border == true. If border == true and bodyBorder == false, the border will display as a 1px wide inset border, giving the entire body element an inset appearance. ]]></description>
		</attribute>
		<attribute>
			<name>bodyStyle</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[bodyStyle : String/Object/Function
Custom CSS styles to be applied to the body element in the format expected by Ext.Element.applyStyles (defaults to null). ]]></description>
		</attribute>
		<attribute>
			<name>buttonAlign</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[buttonAlign : String
The alignment of any buttons added to this panel. Valid values are 'right,' 'left' and 'center' (defaults to 'right'). ]]></description>
		</attribute>
		<attribute>
			<name>buttons</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[buttons : Array
An array of Ext.Button configs used to add buttons to the footer of this panel. ]]></description>
		</attribute>
		<attribute>
			<name>collapseFirst</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[collapseFirst : Boolean
True to make sure the collapse/expand toggle button always renders first (to the left of) any other tools in the panel's title bar, false to render it last (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>collapsed</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[collapsed : Boolean
True to render the panel collapsed, false to render it expanded (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>collapsedCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[collapsedCls : String
A CSS class to add to the panel's element after it has been collapsed (defaults to 'x-panel-collapsed'). ]]></description>
		</attribute>
		<attribute>
			<name>collapsible</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[collapsible : Boolean
True to make the panel collapsible and have the expand/collapse toggle button automatically rendered into the header tool button area, false to keep the panel statically sized with no button (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>contentEl</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[contentEl : String
The id of an existing HTML node to use as the panel's body content (defaults to ''). ]]></description>
		</attribute>
		<attribute>
			<name>draggable</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[draggable : Boolean
True to enable dragging of this Panel (defaults to false). For custom drag/drop implementations, an Ext.Panel.DD config could also be passed in this config instead of true, although Ext.Panel.DD is an internal, undocumented class]]></description>
		</attribute>
		<attribute>
			<name>elements</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[elements : String
A comma-delimited list of panel elements to initialize when the panel is rendered. Normally, this list will be generated automatically based on the items added to the panel at config time, but sometimes it might be useful to make sure a structural element is rendered even if not specified at config time (for example, you may want to add a button or toolbar dynamically after the panel has been rendered). Adding those elements to this list will allocate the required placeholders in the panel when it is rendered. Valid values areheader tbar (top bar)body bbar (bottom bar)footer Defaults to 'body'. ]]></description>
		</attribute>
		<attribute>
			<name>footer</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[footer : Boolean
True to create the footer element explicitly, false to skip creating it. By default, when footer is not specified, if one or more buttons have been added to the panel the footer will be created automatically, otherwise it will not. ]]></description>
		</attribute>
		<attribute>
			<name>header</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[header : Boolean
True to create the header element explicitly, false to skip creating it. By default, when header is not specified, if a title is set the header will be created automatically, otherwise it will not. If a title is set but header is explicitly set to false, the header will not be rendered. ]]></description>
		</attribute>
		<attribute>
			<name>headerAsText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[headerAsText : Boolean
True to display the panel title in the header, false to hide it (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>hideCollapseTool</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideCollapseTool : Boolean
True to hide the expand/collapse toggle button when collapsible = true, false to display it (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>html</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[html : String/Object
An HTML fragment, or a DomHelper specification to use as the panel's body content (defaults to ''). ]]></description>
		</attribute>
		<attribute>
			<name>keys</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[keys : Object/Array
A KeyMap config object (in the format expected by Ext.KeyMap.addBinding used to assign custom key handling to this panel (defaults to null). ]]></description>
		</attribute>
		<attribute>
			<name>maskDisabled</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[maskDisabled : Boolean
True to mask the panel when it is disabled, false to not mask it (defaults to true). Either way, the panel will always tell its contained elements to disable themselves when it is disabled, but masking the panel can provide an additional visual cue that the panel is disabled. ]]></description>
		</attribute>
		<attribute>
			<name>minButtonWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>tbar</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tbar : Object/Array
The top toolbar of the panel. This can be either an Ext.Toolbar object or an array of buttons/button configs to be added to the toolbar. Note that this is not available as a property after render. To access the top toolbar after render, use getTopToolbar. ]]></description>
		</attribute>
		<attribute>
			<name>titleCollapse</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[titleCollapse : Boolean
True to allow expanding and collapsing the panel (when collapsible = true) by clicking anywhere in the header bar, false to allow it only by clicking to tool button (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>tools</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tools : Array
An array of tool button configs to be added to the header tool area. Each tool config may contain the following properties:id : String Required. The type of tool to create. Values may betoggle (Created by default when collapsible is true)close minimizemaximize restore gear pin unpin right left up downrefreshminus plus help searchsave handler : FunctionRequired. The function to call when clicked. Arguments passed are:event : Ext.EventObject The click event.toolEl : Ext.ElementThe tool Element.Panel : Ext.Panel The host Panelscope : Object The scope in which to call the handler.qtip : String/Object A tip string, or a config argument to Ext.QuickTip.registerhidden : Boolean True to initially render hidden.on : Object A listener config object specifiying event listeners in the format of an argument to addListenerExample usage: tools:[{    id:'refresh',    // hidden:true,    handler: function(event, toolEl, panel){        // refresh logic    }}]Note that apart from the toggle tool which is provided when a panel is collapsible, these tools only provide the visual button. Any required functionality must be provided by adding handlers that implement the necessary behavior. ]]></description>
		</attribute>
		<attribute>
			<name>region</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>title</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[title : String
The title text to display in the panel header (defaults to ''). When a title is specified the header element will automatically be created and displayed unless header is explicitly set to false. If you don't want to specify a title at config time, but you may want one later, you must either specify a non-empty title (a blank space ' ' will do) or header:true so that the container element will get created. ]]></description>
		</attribute>
		<attribute>
			<name>frame</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[frame : Boolean
True to render the panel with custom rounded borders, false to render with plain 1px square borders (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>border</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[border : Boolean
True to display the borders of the panel's body element, false to hide them (defaults to true). By default, the border is a 2px wide inset border, but this can be further altered by setting bodyBorder to false. ]]></description>
		</attribute>
		<attribute>
			<name>floating</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[floating : Boolean
True to float the panel (absolute position it with automatic shimming and shadow), false to display it inline where it is rendered (defaults to false). Note that by default, setting floating to true will cause the panel to display at negative offsets so that it is hidden -- because the panel is absolute positioned, the position must be set explicitly after render (e.g., myPanel.setPosition(100,100);). Also, when floating a panel you should always assign a fixed width, otherwise it will be auto width and will expand to fill to the right edge of the viewport. ]]></description>
		</attribute>
		<attribute>
			<name>activeItem</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[activeItem : String/Number
A string component id or the numeric index of the component that should be initially activated within the container's layout on render. For example, activeItem: 'item-1' or activeItem: 0 (index 0 = the first item in the container's collection). activeItem only applies to layout styles that can display items one at a time (like Ext.layout.Accordion, Ext.layout.CardLayout and Ext.layout.FitLayout). Related to Ext.layout.ContainerLayout.activeItem. ]]></description>
		</attribute>
		<attribute>
			<name>autoDestroy</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoDestroy : BooleanIf true the container will automatically destroy any contained component that is removed from it, else destruction must be handled manually (defaults to true).]]></description>
		</attribute>
		<attribute>
			<name>bufferResize</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[bufferResize : Boolean/Number
When set to true (100 milliseconds) or a number of milliseconds, the layout assigned for this container will buffer the frequency it calculates and does a re-layout of components. This is useful for heavy containers or containers with a large amount of sub components that frequent calls to layout are expensive. ]]></description>
		</attribute>
		<attribute>
			<name>defaultType</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[defaultType : String
The default type of container represented by this object as registered in Ext.ComponentMgr (defaults to 'panel'). ]]></description>
		</attribute>
		<attribute>
			<name>defaults</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[defaults : Object
A config object that will be applied to all components added to this container either via the items config or via the add or insert methods. The defaults config can contain any number of name/value property pairs to be added to each item, and should be valid for the types of items being added to the container. For example, to automatically apply padding to the body of each of a set of contained Ext.Panel items, you could pass: defaults: {bodyStyle:'padding:15px'}. ]]></description>
		</attribute>
		<attribute>
			<name>hideBorders</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideBorders : Boolean
True to hide the borders of each contained component, false to defer to the component's existing border settings (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>items</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[items : Mixed
A single item, or an array of child Components to be added to this container. Each item can be any type of object based on Ext.Component.Component config objects may also be specified in order to avoid the overhead of constructing a real Component object if lazy rendering might mean that the added Component will not be rendered immediately. To take advantage of this 'lazy instantiation', set the Ext.Component.xtype config property to the registered type of the Component wanted.For a list of all available xtypes, see Ext.Component. If a single item is being passed, it should be passed directly as an object reference (e.g., items: {...}). Multiple items should be passed as an array of objects (e.g., items: [{...}, {...}]). ]]></description>
		</attribute>
		<attribute>
			<name>layoutConfig</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[layoutConfig : Object
This is a config object containing properties specific to the chosen layout (to be used in conjunction with the layout config value). For complete details regarding the valid config options for each layout type, see the layout class corresponding to the type specified:Ext.layout.Accordion Ext.layout.AnchorLayoutExt.layout.BorderLayout Ext.layout.CardLayout Ext.layout.ColumnLayoutExt.layout.FitLayout Ext.layout.FormLayout Ext.layout.TableLayout]]></description>
		</attribute>
		<attribute>
			<name>monitorResize</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[monitorResize : Boolean
True to automatically monitor window resize events to handle anything that is sensitive to the current size of the viewport. This value is typically managed by the chosen layout and should not need to be set manually. ]]></description>
		</attribute>
		<attribute>
			<name>layout</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[layout : String
The layout type to be used in this container. If not specified, a default Ext.layout.ContainerLayout will be created and used. Valid values are: accordion, anchor, border, card, column, fit, form and table. Specific config values for the chosen layout type can be specified using layoutConfig. ]]></description>
		</attribute>
		<attribute>
			<name>autoHeight</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoHeight : Boolean
True to use height:'auto', false to use fixed height (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>autoWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoWidth : Boolean
True to use width:'auto', false to use fixed width (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>height</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[height : Number
The height of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>width</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[width : Number
The width of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>formPanel</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.form.FormPanel
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[FormPanel uses a Ext.layout.FormLayout internally, and that is required for fields and labels to work correctly within the FormPanel's layout. To nest additional layout styles within a FormPanel, you should nest additional Panels or other containers that can provide additional layout functionality. You should not override FormPanel's layout. By default, Ext Forms are submitted through Ajax, using Ext.form.Action. To enable normal browser submission of the Ext Form contained in this FormPanel, override the Form's onSubmit, and submit methods:var myForm = new Ext.form.FormPanel({        onSubmit: Ext.emptyFn,        submit: function() {            this.getForm().getEl().dom.submit();        }    });]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>itemCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[itemCls : StringA css class to apply to the x-form-item of fields. This property cascades to child containers. ]]></description>
		</attribute>
		<attribute>
			<name>fileUpload</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>labelWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[labelWidth : NumberThe width of labels. This property cascades to child containers. ]]></description>
		</attribute>
		<attribute>
			<name>labelAlign</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[labelAlign : StringValid values are 'left,' 'top' and 'right' (defaults to 'left'). This property cascades to child containers if not set. ]]></description>
		</attribute>
		<attribute>
			<name>monitorPoll</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[monitorPoll : Number The milliseconds to poll valid state, ignored if monitorValid is not true (defaults to 200) ]]></description>
		</attribute>
		<attribute>
			<name>monitorValid</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[monitorValid : Boolean If true the form monitors its valid state client-side and fires a looping event with that state. This is required to bind buttons to the valid state using the config value formBind:true on the button. ]]></description>
		</attribute>
		<attribute>
			<name>iconCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[iconCls : String
A CSS class that will provide a background image to be used as the panel header icon (defaults to ''). ]]></description>
		</attribute>
		<attribute>
			<name>shadow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[minButtonWidth : Number
Minimum width in pixels of all buttons in this panel (defaults to 75) ]]></description>
		</attribute>
		<attribute>
			<name>shadowOffset</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[shadowOffset : Number
The number of pixels to offset the shadow if displayed (defaults to 4). Note that this option only applies when floating = true. ]]></description>
		</attribute>
		<attribute>
			<name>shim</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[shim : Boolean
False to disable the iframe shim in browsers which need one (defaults to true). Note that this option only applies when floating = true. ]]></description>
		</attribute>
		<attribute>
			<name>animCollapse</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[animCollapse : Boolean
True to animate the transition when the panel is collapsed, false to skip the animation (defaults to true if the Ext.Fx class is available, otherwise false). ]]></description>
		</attribute>
		<attribute>
			<name>autoLoad</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[autoLoad : Object/String/Function
A valid url spec according to the Updater Ext.Updater.update method. If autoLoad is not null, the panel will attempt to load its contents immediately upon render.The URL will become the default URL for this panel's body element, so it may be refreshed at any time.]]></description>
		</attribute>
		<attribute>
			<name>autoScroll</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoScroll : Boolean
True to use overflow:'auto' on the panel's body element and show scroll bars automatically when necessary, false to clip any overflowing content (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>baseCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[baseCls : String
The base CSS class to apply to this panel's element (defaults to 'x-panel').]]></description>
		</attribute>
		<attribute>
			<name>bbar</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[bbar : Object/Array
The bottom toolbar of the panel. This can be a Ext.Toolbar object, a toolbar config, or an array of buttons/button configs to be added to the toolbar. Note that this is not available as a property after render. To access the bottom toolbar after render, use getBottomToolbar. ]]></description>
		</attribute>
		<attribute>
			<name>bodyBorder</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[bodyBorder : Boolean
True to display an interior border on the body element of the panel, false to hide it (defaults to true). This only applies when border == true. If border == true and bodyBorder == false, the border will display as a 1px wide inset border, giving the entire body element an inset appearance. ]]></description>
		</attribute>
		<attribute>
			<name>bodyStyle</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[bodyStyle : String/Object/Function
Custom CSS styles to be applied to the body element in the format expected by Ext.Element.applyStyles (defaults to null). ]]></description>
		</attribute>
		<attribute>
			<name>buttonAlign</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[buttonAlign : String
The alignment of any buttons added to this panel. Valid values are 'right,' 'left' and 'center' (defaults to 'right'). ]]></description>
		</attribute>
		<attribute>
			<name>buttons</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[buttons : Array
An array of Ext.Button configs used to add buttons to the footer of this panel. ]]></description>
		</attribute>
		<attribute>
			<name>collapseFirst</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[collapseFirst : Boolean
True to make sure the collapse/expand toggle button always renders first (to the left of) any other tools in the panel's title bar, false to render it last (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>collapsed</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[collapsed : Boolean
True to render the panel collapsed, false to render it expanded (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>collapsedCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[collapsedCls : String
A CSS class to add to the panel's element after it has been collapsed (defaults to 'x-panel-collapsed'). ]]></description>
		</attribute>
		<attribute>
			<name>collapsible</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[collapsible : Boolean
True to make the panel collapsible and have the expand/collapse toggle button automatically rendered into the header tool button area, false to keep the panel statically sized with no button (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>contentEl</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[contentEl : String
The id of an existing HTML node to use as the panel's body content (defaults to ''). ]]></description>
		</attribute>
		<attribute>
			<name>draggable</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[draggable : Boolean
True to enable dragging of this Panel (defaults to false). For custom drag/drop implementations, an Ext.Panel.DD config could also be passed in this config instead of true, although Ext.Panel.DD is an internal, undocumented class]]></description>
		</attribute>
		<attribute>
			<name>elements</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[elements : String
A comma-delimited list of panel elements to initialize when the panel is rendered. Normally, this list will be generated automatically based on the items added to the panel at config time, but sometimes it might be useful to make sure a structural element is rendered even if not specified at config time (for example, you may want to add a button or toolbar dynamically after the panel has been rendered). Adding those elements to this list will allocate the required placeholders in the panel when it is rendered. Valid values areheader tbar (top bar)body bbar (bottom bar)footer Defaults to 'body'. ]]></description>
		</attribute>
		<attribute>
			<name>footer</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[footer : Boolean
True to create the footer element explicitly, false to skip creating it. By default, when footer is not specified, if one or more buttons have been added to the panel the footer will be created automatically, otherwise it will not. ]]></description>
		</attribute>
		<attribute>
			<name>header</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[header : Boolean
True to create the header element explicitly, false to skip creating it. By default, when header is not specified, if a title is set the header will be created automatically, otherwise it will not. If a title is set but header is explicitly set to false, the header will not be rendered. ]]></description>
		</attribute>
		<attribute>
			<name>headerAsText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[headerAsText : Boolean
True to display the panel title in the header, false to hide it (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>hideCollapseTool</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideCollapseTool : Boolean
True to hide the expand/collapse toggle button when collapsible = true, false to display it (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>html</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[html : String/Object
An HTML fragment, or a DomHelper specification to use as the panel's body content (defaults to ''). ]]></description>
		</attribute>
		<attribute>
			<name>keys</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[keys : Object/Array
A KeyMap config object (in the format expected by Ext.KeyMap.addBinding used to assign custom key handling to this panel (defaults to null). ]]></description>
		</attribute>
		<attribute>
			<name>maskDisabled</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[maskDisabled : Boolean
True to mask the panel when it is disabled, false to not mask it (defaults to true). Either way, the panel will always tell its contained elements to disable themselves when it is disabled, but masking the panel can provide an additional visual cue that the panel is disabled. ]]></description>
		</attribute>
		<attribute>
			<name>minButtonWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>tbar</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tbar : Object/Array
The top toolbar of the panel. This can be either an Ext.Toolbar object or an array of buttons/button configs to be added to the toolbar. Note that this is not available as a property after render. To access the top toolbar after render, use getTopToolbar. ]]></description>
		</attribute>
		<attribute>
			<name>titleCollapse</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[titleCollapse : Boolean
True to allow expanding and collapsing the panel (when collapsible = true) by clicking anywhere in the header bar, false to allow it only by clicking to tool button (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>tools</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tools : Array
An array of tool button configs to be added to the header tool area. Each tool config may contain the following properties:id : String Required. The type of tool to create. Values may betoggle (Created by default when collapsible is true)close minimizemaximize restore gear pin unpin right left up downrefreshminus plus help searchsave handler : FunctionRequired. The function to call when clicked. Arguments passed are:event : Ext.EventObject The click event.toolEl : Ext.ElementThe tool Element.Panel : Ext.Panel The host Panelscope : Object The scope in which to call the handler.qtip : String/Object A tip string, or a config argument to Ext.QuickTip.registerhidden : Boolean True to initially render hidden.on : Object A listener config object specifiying event listeners in the format of an argument to addListenerExample usage: tools:[{    id:'refresh',    // hidden:true,    handler: function(event, toolEl, panel){        // refresh logic    }}]Note that apart from the toggle tool which is provided when a panel is collapsible, these tools only provide the visual button. Any required functionality must be provided by adding handlers that implement the necessary behavior. ]]></description>
		</attribute>
		<attribute>
			<name>region</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>title</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[title : String
The title text to display in the panel header (defaults to ''). When a title is specified the header element will automatically be created and displayed unless header is explicitly set to false. If you don't want to specify a title at config time, but you may want one later, you must either specify a non-empty title (a blank space ' ' will do) or header:true so that the container element will get created. ]]></description>
		</attribute>
		<attribute>
			<name>frame</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[frame : Boolean
True to render the panel with custom rounded borders, false to render with plain 1px square borders (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>border</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[border : Boolean
True to display the borders of the panel's body element, false to hide them (defaults to true). By default, the border is a 2px wide inset border, but this can be further altered by setting bodyBorder to false. ]]></description>
		</attribute>
		<attribute>
			<name>floating</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[floating : Boolean
True to float the panel (absolute position it with automatic shimming and shadow), false to display it inline where it is rendered (defaults to false). Note that by default, setting floating to true will cause the panel to display at negative offsets so that it is hidden -- because the panel is absolute positioned, the position must be set explicitly after render (e.g., myPanel.setPosition(100,100);). Also, when floating a panel you should always assign a fixed width, otherwise it will be auto width and will expand to fill to the right edge of the viewport. ]]></description>
		</attribute>
		<attribute>
			<name>activeItem</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[activeItem : String/Number
A string component id or the numeric index of the component that should be initially activated within the container's layout on render. For example, activeItem: 'item-1' or activeItem: 0 (index 0 = the first item in the container's collection). activeItem only applies to layout styles that can display items one at a time (like Ext.layout.Accordion, Ext.layout.CardLayout and Ext.layout.FitLayout). Related to Ext.layout.ContainerLayout.activeItem. ]]></description>
		</attribute>
		<attribute>
			<name>autoDestroy</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoDestroy : BooleanIf true the container will automatically destroy any contained component that is removed from it, else destruction must be handled manually (defaults to true).]]></description>
		</attribute>
		<attribute>
			<name>bufferResize</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[bufferResize : Boolean/Number
When set to true (100 milliseconds) or a number of milliseconds, the layout assigned for this container will buffer the frequency it calculates and does a re-layout of components. This is useful for heavy containers or containers with a large amount of sub components that frequent calls to layout are expensive. ]]></description>
		</attribute>
		<attribute>
			<name>defaultType</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[defaultType : String
The default type of container represented by this object as registered in Ext.ComponentMgr (defaults to 'panel'). ]]></description>
		</attribute>
		<attribute>
			<name>defaults</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[defaults : Object
A config object that will be applied to all components added to this container either via the items config or via the add or insert methods. The defaults config can contain any number of name/value property pairs to be added to each item, and should be valid for the types of items being added to the container. For example, to automatically apply padding to the body of each of a set of contained Ext.Panel items, you could pass: defaults: {bodyStyle:'padding:15px'}. ]]></description>
		</attribute>
		<attribute>
			<name>hideBorders</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideBorders : Boolean
True to hide the borders of each contained component, false to defer to the component's existing border settings (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>items</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[items : Mixed
A single item, or an array of child Components to be added to this container. Each item can be any type of object based on Ext.Component.Component config objects may also be specified in order to avoid the overhead of constructing a real Component object if lazy rendering might mean that the added Component will not be rendered immediately. To take advantage of this 'lazy instantiation', set the Ext.Component.xtype config property to the registered type of the Component wanted.For a list of all available xtypes, see Ext.Component. If a single item is being passed, it should be passed directly as an object reference (e.g., items: {...}). Multiple items should be passed as an array of objects (e.g., items: [{...}, {...}]). ]]></description>
		</attribute>
		<attribute>
			<name>layoutConfig</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[layoutConfig : Object
This is a config object containing properties specific to the chosen layout (to be used in conjunction with the layout config value). For complete details regarding the valid config options for each layout type, see the layout class corresponding to the type specified:Ext.layout.Accordion Ext.layout.AnchorLayoutExt.layout.BorderLayout Ext.layout.CardLayout Ext.layout.ColumnLayoutExt.layout.FitLayout Ext.layout.FormLayout Ext.layout.TableLayout]]></description>
		</attribute>
		<attribute>
			<name>monitorResize</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[monitorResize : Boolean
True to automatically monitor window resize events to handle anything that is sensitive to the current size of the viewport. This value is typically managed by the chosen layout and should not need to be set manually. ]]></description>
		</attribute>
		<attribute>
			<name>layout</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[layout : String
The layout type to be used in this container. If not specified, a default Ext.layout.ContainerLayout will be created and used. Valid values are: accordion, anchor, border, card, column, fit, form and table. Specific config values for the chosen layout type can be specified using layoutConfig. ]]></description>
		</attribute>
		<attribute>
			<name>autoHeight</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoHeight : Boolean
True to use height:'auto', false to use fixed height (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>autoWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoWidth : Boolean
True to use width:'auto', false to use fixed width (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>height</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[height : Number
The height of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>width</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[width : Number
The width of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>hidden</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.form.Hidden
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[A basic hidden field for storing hidden values in forms that need to be passed in the form submit. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>disabled</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[disabled : BooleanTrue to disable the field (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>tabIndex</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[tabIndex : Number The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined). ]]></description>
		</attribute>
		<attribute>
			<name>itemCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[itemCls : String An additional CSS class to apply to this field (defaults to the container's itemCls value if set, or '') ]]></description>
		</attribute>
		<attribute>
			<name>autoCreate</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[autoCreate : String/Object A DomHelper element spec, or true for a default element spec (defaults to {tag: 'input', type: 'text', size: '20', autocomplete: 'off'}) ]]></description>
		</attribute>
		<attribute>
			<name>clearCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[clearCls : StringThe CSS class used to provide field clearing (defaults to 'x-form-clear-left') ]]></description>
		</attribute>
		<attribute>
			<name>fieldClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[fieldClass : StringThe default CSS class for the field (defaults to 'x-form-field') ]]></description>
		</attribute>
		<attribute>
			<name>fieldLabel</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[fieldLabel : String The label text to display next to this field (defaults to '') ]]></description>
		</attribute>
		<attribute>
			<name>focusClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[focusClass : StringThe CSS class to use when the field receives focus (defaults to 'x-form-focus') ]]></description>
		</attribute>
		<attribute>
			<name>hideLabel</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideLabel : BooleanTrue to completely hide the label element (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>inputType</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[inputType : StringThe type attribute for input fields -- e.g. radio, text, password (defaults to 'text'). ]]></description>
		</attribute>
		<attribute>
			<name>invalidClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[invalidClass : StringThe CSS class to use when marking a field invalid (defaults to 'x-form-invalid') ]]></description>
		</attribute>
		<attribute>
			<name>invalidText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[invalidText : StringThe error text to use when marking a field invalid and no message is provided (defaults to 'The value in this field is invalid') ]]></description>
		</attribute>
		<attribute>
			<name>labelSeparator</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[labelSeparator : StringThe standard separator to display after the text of each form label (defaults to the value of Ext.layout.FormLayout.labelSeparator, which is a colon ':' by default). To display no separator for this field's label specify empty string ''. ]]></description>
		</attribute>
		<attribute>
			<name>labelStyle</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[labelStyle : StringA CSS style specification to apply directly to this field's label (defaults to the container's labelStyle value if set, or ''). For example, labelStyle: 'font-weight:bold;'. ]]></description>
		</attribute>
		<attribute>
			<name>msgFx</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[msgFx : StringExperimental The effect used when displaying a validation message under the field (defaults to 'normal'). ]]></description>
		</attribute>
		<attribute>
			<name>msgTarget</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[msgTarget : StringThe location where error text should display. Should be one of the following values (defaults to 'qtip'):Value         Description-----------   ----------------------------------------------------------------------qtip          Display a quick tip when the user hovers over the fieldtitle         Display a default browser title attribute popupunder         Add a block div beneath the field containing the error textside          Add an error icon to the right of the field with a popup on hover[element id]  Add the error text directly to the innerHTML of the specified element]]></description>
		</attribute>
		<attribute>
			<name>validateOnBlur</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[validateOnBlur : BooleanWhether the field should validate when it loses focus (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>validationDelay</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[validationDelay : NumberThe length of time in milliseconds after user input begins until validation is initiated (defaults to 250) ]]></description>
		</attribute>
		<attribute>
			<name>validationEvent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[validationEvent : String/BooleanThe event that should initiate field validation. Set to false to disable automatic validation (defaults to 'keyup'). ]]></description>
		</attribute>
		<attribute>
			<name>readOnly</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[readOnly : Boolean True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute. ]]></description>
		</attribute>
		<attribute>
			<name>name</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[name : StringThe field's HTML name attribute. ]]></description>
		</attribute>
		<attribute>
			<name>value</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[value : MixedA value to initialize this field with. ]]></description>
		</attribute>
		<attribute>
			<name>autoHeight</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoHeight : Boolean
True to use height:'auto', false to use fixed height (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>autoWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoWidth : Boolean
True to use width:'auto', false to use fixed width (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>height</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[height : Number
The height of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>width</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[width : Number
The width of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>htmlEditor</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.form.HtmlEditor
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Provides a lightweight HTML Editor component. Note: The focus/blur and validation marking functionality inherited from Ext.form.Field is NOT supported by this editor.An Editor is a sensitive component that can't be used in all spots standard fields can be used. Putting an Editor within any element that has display set to 'none' can cause problems in Safari and Firefox due to their default iframe reloading bugs. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>createLinkText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[createLinkText : StringThe default text for the create link prompt ]]></description>
		</attribute>
		<attribute>
			<name>defaultLinkValue</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[defaultLinkValue : StringThe default value for the create link prompt (defaults to http:/ /) ]]></description>
		</attribute>
		<attribute>
			<name>enableAlignments</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enableAlignments : BooleanEnable the left, center, right alignment buttons (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>enableColors</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enableColors : BooleanEnable the fore/highlight color buttons (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>enableFont</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enableFont : BooleanEnable font selection. Not available in Safari. (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>enableFontSize</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enableFontSize : BooleanEnable the increase/decrease font size buttons (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>enableFormat</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enableFormat : BooleanEnable the bold, italic and underline buttons (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>enableLinks</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enableLinks : BooleanEnable the create link button. Not available in Safari. (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>enableLists</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enableLists : BooleanEnable the bullet and numbered list buttons. Not available in Safari. (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>enableSourceEdit</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enableSourceEdit : BooleanEnable the switch to source edit button. Not available in Safari. (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>fontFamilies</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[fontFamilies : ArrayAn array of available font families ]]></description>
		</attribute>
		<attribute>
			<name>disabled</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[disabled : BooleanTrue to disable the field (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>tabIndex</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[tabIndex : Number The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined). ]]></description>
		</attribute>
		<attribute>
			<name>itemCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[itemCls : String An additional CSS class to apply to this field (defaults to the container's itemCls value if set, or '') ]]></description>
		</attribute>
		<attribute>
			<name>autoCreate</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[autoCreate : String/Object A DomHelper element spec, or true for a default element spec (defaults to {tag: 'input', type: 'text', size: '20', autocomplete: 'off'}) ]]></description>
		</attribute>
		<attribute>
			<name>clearCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[clearCls : StringThe CSS class used to provide field clearing (defaults to 'x-form-clear-left') ]]></description>
		</attribute>
		<attribute>
			<name>fieldClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[fieldClass : StringThe default CSS class for the field (defaults to 'x-form-field') ]]></description>
		</attribute>
		<attribute>
			<name>fieldLabel</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[fieldLabel : String The label text to display next to this field (defaults to '') ]]></description>
		</attribute>
		<attribute>
			<name>focusClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[focusClass : StringThe CSS class to use when the field receives focus (defaults to 'x-form-focus') ]]></description>
		</attribute>
		<attribute>
			<name>hideLabel</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideLabel : BooleanTrue to completely hide the label element (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>inputType</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[inputType : StringThe type attribute for input fields -- e.g. radio, text, password (defaults to 'text'). ]]></description>
		</attribute>
		<attribute>
			<name>invalidClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[invalidClass : StringThe CSS class to use when marking a field invalid (defaults to 'x-form-invalid') ]]></description>
		</attribute>
		<attribute>
			<name>invalidText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[invalidText : StringThe error text to use when marking a field invalid and no message is provided (defaults to 'The value in this field is invalid') ]]></description>
		</attribute>
		<attribute>
			<name>labelSeparator</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[labelSeparator : StringThe standard separator to display after the text of each form label (defaults to the value of Ext.layout.FormLayout.labelSeparator, which is a colon ':' by default). To display no separator for this field's label specify empty string ''. ]]></description>
		</attribute>
		<attribute>
			<name>labelStyle</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[labelStyle : StringA CSS style specification to apply directly to this field's label (defaults to the container's labelStyle value if set, or ''). For example, labelStyle: 'font-weight:bold;'. ]]></description>
		</attribute>
		<attribute>
			<name>msgFx</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[msgFx : StringExperimental The effect used when displaying a validation message under the field (defaults to 'normal'). ]]></description>
		</attribute>
		<attribute>
			<name>msgTarget</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[msgTarget : StringThe location where error text should display. Should be one of the following values (defaults to 'qtip'):Value         Description-----------   ----------------------------------------------------------------------qtip          Display a quick tip when the user hovers over the fieldtitle         Display a default browser title attribute popupunder         Add a block div beneath the field containing the error textside          Add an error icon to the right of the field with a popup on hover[element id]  Add the error text directly to the innerHTML of the specified element]]></description>
		</attribute>
		<attribute>
			<name>validateOnBlur</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[validateOnBlur : BooleanWhether the field should validate when it loses focus (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>validationDelay</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[validationDelay : NumberThe length of time in milliseconds after user input begins until validation is initiated (defaults to 250) ]]></description>
		</attribute>
		<attribute>
			<name>validationEvent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[validationEvent : String/BooleanThe event that should initiate field validation. Set to false to disable automatic validation (defaults to 'keyup'). ]]></description>
		</attribute>
		<attribute>
			<name>readOnly</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[readOnly : Boolean True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute. ]]></description>
		</attribute>
		<attribute>
			<name>name</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[name : StringThe field's HTML name attribute. ]]></description>
		</attribute>
		<attribute>
			<name>value</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[value : MixedA value to initialize this field with. ]]></description>
		</attribute>
		<attribute>
			<name>autoHeight</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoHeight : Boolean
True to use height:'auto', false to use fixed height (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>autoWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoWidth : Boolean
True to use width:'auto', false to use fixed width (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>height</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[height : Number
The height of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>width</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[width : Number
The width of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>numberField</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.form.NumberField
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>maxText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>minText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>maxValue</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>minValue</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>allowDecimals</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>allowNegative</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>baseChars</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>decimalPrecision</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>nanText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>decimalSeparator</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>emptyText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[emptyText : StringThe default text to display in an empty field (defaults to null). ]]></description>
		</attribute>
		<attribute>
			<name>allowBlank</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowBlank : BooleanFalse to validate that the value length > 0 (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>blankText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[blankText : StringError text to display if the allow blank validation fails (defaults to 'This field is required')]]></description>
		</attribute>
		<attribute>
			<name>disableKeyFilter</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[disableKeyFilter : BooleanTrue to disable input keystroke filtering (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>emptyClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[emptyClass : StringThe CSS class to apply to an empty field to style the emptyText (defaults to 'x-form-empty-field'). This class is automatically added and removed as needed depending on the current field value. ]]></description>
		</attribute>
		<attribute>
			<name>grow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[grow : BooleanTrue if this field should automatically grow and shrink to its content ]]></description>
		</attribute>
		<attribute>
			<name>growMax</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[growMax : NumberThe maximum width to allow when grow = true (defaults to 800) ]]></description>
		</attribute>
		<attribute>
			<name>growMin</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[growMin : NumberThe minimum width to allow when grow = true (defaults to 30) ]]></description>
		</attribute>
		<attribute>
			<name>maskRe</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[maskRe : RegExpAn input mask regular expression that will be used to filter keystrokes that don't match (defaults to null) ]]></description>
		</attribute>
		<attribute>
			<name>maxLength</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[maxLength : NumberMaximum input field length allowed (defaults to Number.MAX_VALUE) ]]></description>
		</attribute>
		<attribute>
			<name>maxLengthText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[maxLengthText : StringError text to display if the maximum length validation fails (defaults to 'The maximum length for this field is {maxLength}') ]]></description>
		</attribute>
		<attribute>
			<name>minLength</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[minLength : NumberMinimum input field length required (defaults to 0) ]]></description>
		</attribute>
		<attribute>
			<name>minLengthText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[minLengthText : String Error text to display if the minimum length validation fails (defaults to 'The minimum length for this field is {minLength}') ]]></description>
		</attribute>
		<attribute>
			<name>regex</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[regex : RegExp A JavaScript RegExp object to be tested against the field value during validation (defaults to null). If available, this regex will be evaluated only after the basic validators all return true, and will be passed the current field value. If the test fails, the field will be marked invalid using regexText. ]]></description>
		</attribute>
		<attribute>
			<name>regexText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[regexText : StringThe error text to display if regex is used and the test fails during validation (defaults to '') ]]></description>
		</attribute>
		<attribute>
			<name>selectOnFocus</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[selectOnFocus : BooleanTrue to automatically select any existing field text when the field receives input focus (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>validator</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[validator : Function A custom validation function to be called during field validation (defaults to null). If available, this function will be called only after the basic validators all return true, and will be passed the current field value and expected to return boolean true if the value is valid or a string error message if invalid. ]]></description>
		</attribute>
		<attribute>
			<name>vtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[vtype : StringA validation type name as defined in Ext.form.VTypes (defaults to null) ]]></description>
		</attribute>
		<attribute>
			<name>vtypeText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[vtypeText : String A custom error message to display in place of the default message provided for the vtype currently set for this field (defaults to ''). Only applies if vtype is set, else ignored. ]]></description>
		</attribute>
		<attribute>
			<name>disabled</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[disabled : BooleanTrue to disable the field (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>tabIndex</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[tabIndex : Number The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined). ]]></description>
		</attribute>
		<attribute>
			<name>itemCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[itemCls : String An additional CSS class to apply to this field (defaults to the container's itemCls value if set, or '') ]]></description>
		</attribute>
		<attribute>
			<name>autoCreate</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[autoCreate : String/Object A DomHelper element spec, or true for a default element spec (defaults to {tag: 'input', type: 'text', size: '20', autocomplete: 'off'}) ]]></description>
		</attribute>
		<attribute>
			<name>clearCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[clearCls : StringThe CSS class used to provide field clearing (defaults to 'x-form-clear-left') ]]></description>
		</attribute>
		<attribute>
			<name>fieldClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[fieldClass : StringThe default CSS class for the field (defaults to 'x-form-field') ]]></description>
		</attribute>
		<attribute>
			<name>fieldLabel</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[fieldLabel : String The label text to display next to this field (defaults to '') ]]></description>
		</attribute>
		<attribute>
			<name>focusClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[focusClass : StringThe CSS class to use when the field receives focus (defaults to 'x-form-focus') ]]></description>
		</attribute>
		<attribute>
			<name>hideLabel</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideLabel : BooleanTrue to completely hide the label element (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>inputType</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[inputType : StringThe type attribute for input fields -- e.g. radio, text, password (defaults to 'text'). ]]></description>
		</attribute>
		<attribute>
			<name>invalidClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[invalidClass : StringThe CSS class to use when marking a field invalid (defaults to 'x-form-invalid') ]]></description>
		</attribute>
		<attribute>
			<name>invalidText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[invalidText : StringThe error text to use when marking a field invalid and no message is provided (defaults to 'The value in this field is invalid') ]]></description>
		</attribute>
		<attribute>
			<name>labelSeparator</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[labelSeparator : StringThe standard separator to display after the text of each form label (defaults to the value of Ext.layout.FormLayout.labelSeparator, which is a colon ':' by default). To display no separator for this field's label specify empty string ''. ]]></description>
		</attribute>
		<attribute>
			<name>labelStyle</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[labelStyle : StringA CSS style specification to apply directly to this field's label (defaults to the container's labelStyle value if set, or ''). For example, labelStyle: 'font-weight:bold;'. ]]></description>
		</attribute>
		<attribute>
			<name>msgFx</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[msgFx : StringExperimental The effect used when displaying a validation message under the field (defaults to 'normal'). ]]></description>
		</attribute>
		<attribute>
			<name>msgTarget</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[msgTarget : StringThe location where error text should display. Should be one of the following values (defaults to 'qtip'):Value         Description-----------   ----------------------------------------------------------------------qtip          Display a quick tip when the user hovers over the fieldtitle         Display a default browser title attribute popupunder         Add a block div beneath the field containing the error textside          Add an error icon to the right of the field with a popup on hover[element id]  Add the error text directly to the innerHTML of the specified element]]></description>
		</attribute>
		<attribute>
			<name>validateOnBlur</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[validateOnBlur : BooleanWhether the field should validate when it loses focus (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>validationDelay</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[validationDelay : NumberThe length of time in milliseconds after user input begins until validation is initiated (defaults to 250) ]]></description>
		</attribute>
		<attribute>
			<name>validationEvent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[validationEvent : String/BooleanThe event that should initiate field validation. Set to false to disable automatic validation (defaults to 'keyup'). ]]></description>
		</attribute>
		<attribute>
			<name>readOnly</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[readOnly : Boolean True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute. ]]></description>
		</attribute>
		<attribute>
			<name>name</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[name : StringThe field's HTML name attribute. ]]></description>
		</attribute>
		<attribute>
			<name>value</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[value : MixedA value to initialize this field with. ]]></description>
		</attribute>
		<attribute>
			<name>autoHeight</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoHeight : Boolean
True to use height:'auto', false to use fixed height (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>autoWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoWidth : Boolean
True to use width:'auto', false to use fixed width (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>height</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[height : Number
The height of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>width</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[width : Number
The width of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>radio</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.form.Radio
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Single radio field. Same as Checkbox, but provided as a convenience for automatically setting the input type. Radio grouping is handled automatically by the browser if you give each radio in a group the same name. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>boxLabel</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[boxLabel : StringThe text that appears beside the checkbox ]]></description>
		</attribute>
		<attribute>
			<name>checked</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[checked : BooleanTrue if the the checkbox should render already checked (defaults to false)]]></description>
		</attribute>
		<attribute>
			<name>inputValue</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[inputValue : StringThe value that should go into the generated input element's value attribute ]]></description>
		</attribute>
		<attribute>
			<name>disabled</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[disabled : BooleanTrue to disable the field (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>tabIndex</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[tabIndex : Number The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined). ]]></description>
		</attribute>
		<attribute>
			<name>itemCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[itemCls : String An additional CSS class to apply to this field (defaults to the container's itemCls value if set, or '') ]]></description>
		</attribute>
		<attribute>
			<name>autoCreate</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[autoCreate : String/Object A DomHelper element spec, or true for a default element spec (defaults to {tag: 'input', type: 'text', size: '20', autocomplete: 'off'}) ]]></description>
		</attribute>
		<attribute>
			<name>clearCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[clearCls : StringThe CSS class used to provide field clearing (defaults to 'x-form-clear-left') ]]></description>
		</attribute>
		<attribute>
			<name>fieldClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[fieldClass : StringThe default CSS class for the field (defaults to 'x-form-field') ]]></description>
		</attribute>
		<attribute>
			<name>fieldLabel</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[fieldLabel : String The label text to display next to this field (defaults to '') ]]></description>
		</attribute>
		<attribute>
			<name>focusClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[focusClass : StringThe CSS class to use when the field receives focus (defaults to 'x-form-focus') ]]></description>
		</attribute>
		<attribute>
			<name>hideLabel</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideLabel : BooleanTrue to completely hide the label element (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>inputType</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[inputType : StringThe type attribute for input fields -- e.g. radio, text, password (defaults to 'text'). ]]></description>
		</attribute>
		<attribute>
			<name>invalidClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[invalidClass : StringThe CSS class to use when marking a field invalid (defaults to 'x-form-invalid') ]]></description>
		</attribute>
		<attribute>
			<name>invalidText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[invalidText : StringThe error text to use when marking a field invalid and no message is provided (defaults to 'The value in this field is invalid') ]]></description>
		</attribute>
		<attribute>
			<name>labelSeparator</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[labelSeparator : StringThe standard separator to display after the text of each form label (defaults to the value of Ext.layout.FormLayout.labelSeparator, which is a colon ':' by default). To display no separator for this field's label specify empty string ''. ]]></description>
		</attribute>
		<attribute>
			<name>labelStyle</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[labelStyle : StringA CSS style specification to apply directly to this field's label (defaults to the container's labelStyle value if set, or ''). For example, labelStyle: 'font-weight:bold;'. ]]></description>
		</attribute>
		<attribute>
			<name>msgFx</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[msgFx : StringExperimental The effect used when displaying a validation message under the field (defaults to 'normal'). ]]></description>
		</attribute>
		<attribute>
			<name>msgTarget</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[msgTarget : StringThe location where error text should display. Should be one of the following values (defaults to 'qtip'):Value         Description-----------   ----------------------------------------------------------------------qtip          Display a quick tip when the user hovers over the fieldtitle         Display a default browser title attribute popupunder         Add a block div beneath the field containing the error textside          Add an error icon to the right of the field with a popup on hover[element id]  Add the error text directly to the innerHTML of the specified element]]></description>
		</attribute>
		<attribute>
			<name>validateOnBlur</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[validateOnBlur : BooleanWhether the field should validate when it loses focus (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>validationDelay</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[validationDelay : NumberThe length of time in milliseconds after user input begins until validation is initiated (defaults to 250) ]]></description>
		</attribute>
		<attribute>
			<name>validationEvent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[validationEvent : String/BooleanThe event that should initiate field validation. Set to false to disable automatic validation (defaults to 'keyup'). ]]></description>
		</attribute>
		<attribute>
			<name>readOnly</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[readOnly : Boolean True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute. ]]></description>
		</attribute>
		<attribute>
			<name>name</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[name : StringThe field's HTML name attribute. ]]></description>
		</attribute>
		<attribute>
			<name>value</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[value : MixedA value to initialize this field with. ]]></description>
		</attribute>
		<attribute>
			<name>autoHeight</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoHeight : Boolean
True to use height:'auto', false to use fixed height (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>autoWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoWidth : Boolean
True to use width:'auto', false to use fixed width (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>height</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[height : Number
The height of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>width</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[width : Number
The width of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>submitAction</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.form.SubmitAction
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>name</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>scope</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[scope : ObjectThe scope in which to call the callback functions (The this reference for the callback functions). ]]></description>
		</attribute>
		<attribute>
			<name>url</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[url : StringThe URL that the Action is to invoke.]]></description>
		</attribute>
		<attribute>
			<name>success</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[success : Function The function to call when a valid success return packet is recieved. The function is passed the following parameters:...The function to call when a valid success return packet is recieved. The function is passed the following parameters:form : Ext.form.BasicFormThe form that requested the actionaction : Ext.form.ActionThe Action class. The result property of this object may be examined to perform custom postprocessing.]]></description>
		</attribute>
		<attribute>
			<name>failure</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[failure : FunctionThe function to call when a failure packet was recieved, or when an error ocurred in the Ajax communication. The func...The function to call when a failure packet was recieved, or when an error ocurred in the Ajax communication. The function is passed the following parameters:form : Ext.form.BasicFormThe form that requested the actionaction : Ext.form.ActionThe Action class. If an Ajax error ocurred, the failure type will be in failureType. The result property of this object may be examined to perform custom postprocessing.]]></description>
		</attribute>
		<attribute>
			<name>waitMsg</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[waitMsg : StringThe message to be displayed by a call to Ext.MessageBox.wait during the time the action is being processed. ]]></description>
		</attribute>
		<attribute>
			<name>waitTitle</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[waitTitle : StringThe title to be displayed by a call to Ext.MessageBox.wait during the time the action is being processed. ]]></description>
		</attribute>
		<attribute>
			<name>method</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[method : String The HTTP method to use to access the requested URL. Defaults to the Ext.form.BasicForm's method, or if that is not specified, the underlying DOM form's method. ]]></description>
		</attribute>
		<attribute>
			<name>params</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[params : Mixed Extra parameter values to pass. These are added to the Form's Ext.form.BasicForm.baseParams and passed to the specified URL along with the Form's input fields. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>textArea</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.form.TextArea
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Multiline text field. Can be used as a direct replacement for traditional textarea fields, plus adds support for auto-sizing. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>preventScrollbars</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[preventScrollbars : Boolean True to prevent scrollbars from appearing regardless of how much text is in the field (equivalent to setting overflow: hidden, defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>emptyText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[emptyText : StringThe default text to display in an empty field (defaults to null). ]]></description>
		</attribute>
		<attribute>
			<name>allowBlank</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowBlank : BooleanFalse to validate that the value length > 0 (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>blankText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[blankText : StringError text to display if the allow blank validation fails (defaults to 'This field is required')]]></description>
		</attribute>
		<attribute>
			<name>disableKeyFilter</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[disableKeyFilter : BooleanTrue to disable input keystroke filtering (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>emptyClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[emptyClass : StringThe CSS class to apply to an empty field to style the emptyText (defaults to 'x-form-empty-field'). This class is automatically added and removed as needed depending on the current field value. ]]></description>
		</attribute>
		<attribute>
			<name>grow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[grow : BooleanTrue if this field should automatically grow and shrink to its content ]]></description>
		</attribute>
		<attribute>
			<name>growMax</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[growMax : NumberThe maximum width to allow when grow = true (defaults to 800) ]]></description>
		</attribute>
		<attribute>
			<name>growMin</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[growMin : NumberThe minimum width to allow when grow = true (defaults to 30) ]]></description>
		</attribute>
		<attribute>
			<name>maskRe</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[maskRe : RegExpAn input mask regular expression that will be used to filter keystrokes that don't match (defaults to null) ]]></description>
		</attribute>
		<attribute>
			<name>maxLength</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[maxLength : NumberMaximum input field length allowed (defaults to Number.MAX_VALUE) ]]></description>
		</attribute>
		<attribute>
			<name>maxLengthText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[maxLengthText : StringError text to display if the maximum length validation fails (defaults to 'The maximum length for this field is {maxLength}') ]]></description>
		</attribute>
		<attribute>
			<name>minLength</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[minLength : NumberMinimum input field length required (defaults to 0) ]]></description>
		</attribute>
		<attribute>
			<name>minLengthText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[minLengthText : String Error text to display if the minimum length validation fails (defaults to 'The minimum length for this field is {minLength}') ]]></description>
		</attribute>
		<attribute>
			<name>regex</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[regex : RegExp A JavaScript RegExp object to be tested against the field value during validation (defaults to null). If available, this regex will be evaluated only after the basic validators all return true, and will be passed the current field value. If the test fails, the field will be marked invalid using regexText. ]]></description>
		</attribute>
		<attribute>
			<name>regexText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[regexText : StringThe error text to display if regex is used and the test fails during validation (defaults to '') ]]></description>
		</attribute>
		<attribute>
			<name>selectOnFocus</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[selectOnFocus : BooleanTrue to automatically select any existing field text when the field receives input focus (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>validator</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[validator : Function A custom validation function to be called during field validation (defaults to null). If available, this function will be called only after the basic validators all return true, and will be passed the current field value and expected to return boolean true if the value is valid or a string error message if invalid. ]]></description>
		</attribute>
		<attribute>
			<name>vtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[vtype : StringA validation type name as defined in Ext.form.VTypes (defaults to null) ]]></description>
		</attribute>
		<attribute>
			<name>vtypeText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[vtypeText : String A custom error message to display in place of the default message provided for the vtype currently set for this field (defaults to ''). Only applies if vtype is set, else ignored. ]]></description>
		</attribute>
		<attribute>
			<name>disabled</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[disabled : BooleanTrue to disable the field (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>tabIndex</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[tabIndex : Number The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined). ]]></description>
		</attribute>
		<attribute>
			<name>itemCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[itemCls : String An additional CSS class to apply to this field (defaults to the container's itemCls value if set, or '') ]]></description>
		</attribute>
		<attribute>
			<name>autoCreate</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[autoCreate : String/Object A DomHelper element spec, or true for a default element spec (defaults to {tag: 'input', type: 'text', size: '20', autocomplete: 'off'}) ]]></description>
		</attribute>
		<attribute>
			<name>clearCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[clearCls : StringThe CSS class used to provide field clearing (defaults to 'x-form-clear-left') ]]></description>
		</attribute>
		<attribute>
			<name>fieldClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[fieldClass : StringThe default CSS class for the field (defaults to 'x-form-field') ]]></description>
		</attribute>
		<attribute>
			<name>fieldLabel</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[fieldLabel : String The label text to display next to this field (defaults to '') ]]></description>
		</attribute>
		<attribute>
			<name>focusClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[focusClass : StringThe CSS class to use when the field receives focus (defaults to 'x-form-focus') ]]></description>
		</attribute>
		<attribute>
			<name>hideLabel</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideLabel : BooleanTrue to completely hide the label element (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>inputType</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[inputType : StringThe type attribute for input fields -- e.g. radio, text, password (defaults to 'text'). ]]></description>
		</attribute>
		<attribute>
			<name>invalidClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[invalidClass : StringThe CSS class to use when marking a field invalid (defaults to 'x-form-invalid') ]]></description>
		</attribute>
		<attribute>
			<name>invalidText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[invalidText : StringThe error text to use when marking a field invalid and no message is provided (defaults to 'The value in this field is invalid') ]]></description>
		</attribute>
		<attribute>
			<name>labelSeparator</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[labelSeparator : StringThe standard separator to display after the text of each form label (defaults to the value of Ext.layout.FormLayout.labelSeparator, which is a colon ':' by default). To display no separator for this field's label specify empty string ''. ]]></description>
		</attribute>
		<attribute>
			<name>labelStyle</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[labelStyle : StringA CSS style specification to apply directly to this field's label (defaults to the container's labelStyle value if set, or ''). For example, labelStyle: 'font-weight:bold;'. ]]></description>
		</attribute>
		<attribute>
			<name>msgFx</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[msgFx : StringExperimental The effect used when displaying a validation message under the field (defaults to 'normal'). ]]></description>
		</attribute>
		<attribute>
			<name>msgTarget</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[msgTarget : StringThe location where error text should display. Should be one of the following values (defaults to 'qtip'):Value         Description-----------   ----------------------------------------------------------------------qtip          Display a quick tip when the user hovers over the fieldtitle         Display a default browser title attribute popupunder         Add a block div beneath the field containing the error textside          Add an error icon to the right of the field with a popup on hover[element id]  Add the error text directly to the innerHTML of the specified element]]></description>
		</attribute>
		<attribute>
			<name>validateOnBlur</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[validateOnBlur : BooleanWhether the field should validate when it loses focus (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>validationDelay</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[validationDelay : NumberThe length of time in milliseconds after user input begins until validation is initiated (defaults to 250) ]]></description>
		</attribute>
		<attribute>
			<name>validationEvent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[validationEvent : String/BooleanThe event that should initiate field validation. Set to false to disable automatic validation (defaults to 'keyup'). ]]></description>
		</attribute>
		<attribute>
			<name>readOnly</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[readOnly : Boolean True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute. ]]></description>
		</attribute>
		<attribute>
			<name>name</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[name : StringThe field's HTML name attribute. ]]></description>
		</attribute>
		<attribute>
			<name>value</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[value : MixedA value to initialize this field with. ]]></description>
		</attribute>
		<attribute>
			<name>autoHeight</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoHeight : Boolean
True to use height:'auto', false to use fixed height (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>autoWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoWidth : Boolean
True to use width:'auto', false to use fixed width (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>height</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[height : Number
The height of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>width</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[width : Number
The width of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>textField</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.form.TextField
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Basic text field. Can be used as a direct replacement for traditional text inputs, or as the base class for more sophisticated input controls (like Ext.form.TextArea and Ext.form.ComboBox). ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>emptyText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[emptyText : StringThe default text to display in an empty field (defaults to null). ]]></description>
		</attribute>
		<attribute>
			<name>allowBlank</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowBlank : BooleanFalse to validate that the value length > 0 (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>blankText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[blankText : StringError text to display if the allow blank validation fails (defaults to 'This field is required')]]></description>
		</attribute>
		<attribute>
			<name>disableKeyFilter</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[disableKeyFilter : BooleanTrue to disable input keystroke filtering (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>emptyClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[emptyClass : StringThe CSS class to apply to an empty field to style the emptyText (defaults to 'x-form-empty-field'). This class is automatically added and removed as needed depending on the current field value. ]]></description>
		</attribute>
		<attribute>
			<name>grow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[grow : BooleanTrue if this field should automatically grow and shrink to its content ]]></description>
		</attribute>
		<attribute>
			<name>growMax</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[growMax : NumberThe maximum width to allow when grow = true (defaults to 800) ]]></description>
		</attribute>
		<attribute>
			<name>growMin</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[growMin : NumberThe minimum width to allow when grow = true (defaults to 30) ]]></description>
		</attribute>
		<attribute>
			<name>maskRe</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[maskRe : RegExpAn input mask regular expression that will be used to filter keystrokes that don't match (defaults to null) ]]></description>
		</attribute>
		<attribute>
			<name>maxLength</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[maxLength : NumberMaximum input field length allowed (defaults to Number.MAX_VALUE) ]]></description>
		</attribute>
		<attribute>
			<name>maxLengthText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[maxLengthText : StringError text to display if the maximum length validation fails (defaults to 'The maximum length for this field is {maxLength}') ]]></description>
		</attribute>
		<attribute>
			<name>minLength</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[minLength : NumberMinimum input field length required (defaults to 0) ]]></description>
		</attribute>
		<attribute>
			<name>minLengthText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[minLengthText : String Error text to display if the minimum length validation fails (defaults to 'The minimum length for this field is {minLength}') ]]></description>
		</attribute>
		<attribute>
			<name>regex</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[regex : RegExp A JavaScript RegExp object to be tested against the field value during validation (defaults to null). If available, this regex will be evaluated only after the basic validators all return true, and will be passed the current field value. If the test fails, the field will be marked invalid using regexText. ]]></description>
		</attribute>
		<attribute>
			<name>regexText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[regexText : StringThe error text to display if regex is used and the test fails during validation (defaults to '') ]]></description>
		</attribute>
		<attribute>
			<name>selectOnFocus</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[selectOnFocus : BooleanTrue to automatically select any existing field text when the field receives input focus (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>validator</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[validator : Function A custom validation function to be called during field validation (defaults to null). If available, this function will be called only after the basic validators all return true, and will be passed the current field value and expected to return boolean true if the value is valid or a string error message if invalid. ]]></description>
		</attribute>
		<attribute>
			<name>vtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[vtype : StringA validation type name as defined in Ext.form.VTypes (defaults to null) ]]></description>
		</attribute>
		<attribute>
			<name>vtypeText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[vtypeText : String A custom error message to display in place of the default message provided for the vtype currently set for this field (defaults to ''). Only applies if vtype is set, else ignored. ]]></description>
		</attribute>
		<attribute>
			<name>disabled</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[disabled : BooleanTrue to disable the field (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>tabIndex</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[tabIndex : Number The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined). ]]></description>
		</attribute>
		<attribute>
			<name>itemCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[itemCls : String An additional CSS class to apply to this field (defaults to the container's itemCls value if set, or '') ]]></description>
		</attribute>
		<attribute>
			<name>autoCreate</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[autoCreate : String/Object A DomHelper element spec, or true for a default element spec (defaults to {tag: 'input', type: 'text', size: '20', autocomplete: 'off'}) ]]></description>
		</attribute>
		<attribute>
			<name>clearCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[clearCls : StringThe CSS class used to provide field clearing (defaults to 'x-form-clear-left') ]]></description>
		</attribute>
		<attribute>
			<name>fieldClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[fieldClass : StringThe default CSS class for the field (defaults to 'x-form-field') ]]></description>
		</attribute>
		<attribute>
			<name>fieldLabel</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[fieldLabel : String The label text to display next to this field (defaults to '') ]]></description>
		</attribute>
		<attribute>
			<name>focusClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[focusClass : StringThe CSS class to use when the field receives focus (defaults to 'x-form-focus') ]]></description>
		</attribute>
		<attribute>
			<name>hideLabel</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideLabel : BooleanTrue to completely hide the label element (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>inputType</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[inputType : StringThe type attribute for input fields -- e.g. radio, text, password (defaults to 'text'). ]]></description>
		</attribute>
		<attribute>
			<name>invalidClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[invalidClass : StringThe CSS class to use when marking a field invalid (defaults to 'x-form-invalid') ]]></description>
		</attribute>
		<attribute>
			<name>invalidText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[invalidText : StringThe error text to use when marking a field invalid and no message is provided (defaults to 'The value in this field is invalid') ]]></description>
		</attribute>
		<attribute>
			<name>labelSeparator</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[labelSeparator : StringThe standard separator to display after the text of each form label (defaults to the value of Ext.layout.FormLayout.labelSeparator, which is a colon ':' by default). To display no separator for this field's label specify empty string ''. ]]></description>
		</attribute>
		<attribute>
			<name>labelStyle</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[labelStyle : StringA CSS style specification to apply directly to this field's label (defaults to the container's labelStyle value if set, or ''). For example, labelStyle: 'font-weight:bold;'. ]]></description>
		</attribute>
		<attribute>
			<name>msgFx</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[msgFx : StringExperimental The effect used when displaying a validation message under the field (defaults to 'normal'). ]]></description>
		</attribute>
		<attribute>
			<name>msgTarget</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[msgTarget : StringThe location where error text should display. Should be one of the following values (defaults to 'qtip'):Value         Description-----------   ----------------------------------------------------------------------qtip          Display a quick tip when the user hovers over the fieldtitle         Display a default browser title attribute popupunder         Add a block div beneath the field containing the error textside          Add an error icon to the right of the field with a popup on hover[element id]  Add the error text directly to the innerHTML of the specified element]]></description>
		</attribute>
		<attribute>
			<name>validateOnBlur</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[validateOnBlur : BooleanWhether the field should validate when it loses focus (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>validationDelay</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[validationDelay : NumberThe length of time in milliseconds after user input begins until validation is initiated (defaults to 250) ]]></description>
		</attribute>
		<attribute>
			<name>validationEvent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[validationEvent : String/BooleanThe event that should initiate field validation. Set to false to disable automatic validation (defaults to 'keyup'). ]]></description>
		</attribute>
		<attribute>
			<name>readOnly</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[readOnly : Boolean True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute. ]]></description>
		</attribute>
		<attribute>
			<name>name</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[name : StringThe field's HTML name attribute. ]]></description>
		</attribute>
		<attribute>
			<name>value</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[value : MixedA value to initialize this field with. ]]></description>
		</attribute>
		<attribute>
			<name>autoHeight</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoHeight : Boolean
True to use height:'auto', false to use fixed height (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>autoWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoWidth : Boolean
True to use width:'auto', false to use fixed width (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>height</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[height : Number
The height of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>width</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[width : Number
The width of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>timeField</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.form.TimeField
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Provides a time input field with a time dropdown and automatic time validation. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>maxText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[maxLength : NumberMaximum input field length allowed (defaults to Number.MAX_VALUE) ]]></description>
		</attribute>
		<attribute>
			<name>minText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[minText : String The error text to display when the date in the cell is before minValue (defaults to 'The time in this field must be equal to or after {0}'). ]]></description>
		</attribute>
		<attribute>
			<name>altFormats</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[altFormats : String Multiple date formats separated by '|' to try when parsing a user input value and it doesn't match the defined format (defaults to 'm/d/Y|m-d-y|m-d-Y|m/d|m-d|d'). ]]></description>
		</attribute>
		<attribute>
			<name>maxValue</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[maxValue : Date/StringThe maximum allowed time. Can be either a Javascript date object or a string date in a valid format (defaults to null). ]]></description>
		</attribute>
		<attribute>
			<name>minValue</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[minValue : Date/StringThe minimum allowed time. Can be either a Javascript date object or a string date in a valid format (defaults to null). ]]></description>
		</attribute>
		<attribute>
			<name>increment</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[increment : NumberThe number of minutes between each time value in the list (defaults to 15). ]]></description>
		</attribute>
		<attribute>
			<name>format</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[format : String The default date format string which can be overriden for localization support. The format must be valid according to Date.parseDate (defaults to 'm/d/y'). ]]></description>
		</attribute>
		<attribute>
			<name>url</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>loadingText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>selectedClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>store</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>tpl</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>shadow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>pageSize</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>maxHeight</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>autoCreate</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoCreate : Boolean/ObjectA DomHelper element spec, or true for a default element spec (defaults to: {tag: 'input', type: 'text', size: '24', autocomplete: 'off'}) ]]></description>
		</attribute>
		<attribute>
			<name>allQuery</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[allQuery : StringThe text query to send to the server to return all records for the list with no filtering (defaults to '') ]]></description>
		</attribute>
		<attribute>
			<name>displayField</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[displayField : StringThe underlying data field name to bind to this ComboBox (defaults to undefined if mode = 'remote' or 'text' if transforming a select) ]]></description>
		</attribute>
		<attribute>
			<name>forceSelection</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[forceSelection : Boolean True to restrict the selected value to one of the values in the list, false to allow the user to set arbitrary text into the field (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>handleHeight</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[handleHeight : NumberThe height in pixels of the dropdown list resize handle if resizable = true (defaults to 8) ]]></description>
		</attribute>
		<attribute>
			<name>hiddenName</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hiddenName : StringIf specified, a hidden form field with this name is dynamically generated to store the field's data value (defaults to the underlying DOM element's name). Required for the combo's value to automatically post during a form submission. ]]></description>
		</attribute>
		<attribute>
			<name>lazyInit</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[lazyInit : BooleanTrue to not initialize the list for this combo until the field is focused. (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>lazyRender</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>listAlign</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>listClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>listWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>minChars</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>minListWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>queryDelay</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>queryParam</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>triggerAction</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>typeAhead</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>valueField</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>valueNotFoundText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>resizable</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>title</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>transform</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>data</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[data : ArrayInline data to be loaded when the store is initialized. ]]></description>
		</attribute>
		<attribute>
			<name>editable</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[editable : BooleanFalse to prevent the user from typing text directly into the field, just like a traditional select (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>root</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[root : Stringname of the property which contains the Array of row objects]]></description>
		</attribute>
		<attribute>
			<name>mode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>hideTrigger</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideTrigger : BooleanTrue to hide the trigger element and display only the base text field (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>triggerClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[triggerClass : StringA CSS class to apply to the trigger ]]></description>
		</attribute>
		<attribute>
			<name>emptyText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[emptyText : StringThe default text to display in an empty field (defaults to null). ]]></description>
		</attribute>
		<attribute>
			<name>allowBlank</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowBlank : BooleanFalse to validate that the value length > 0 (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>blankText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[blankText : StringError text to display if the allow blank validation fails (defaults to 'This field is required')]]></description>
		</attribute>
		<attribute>
			<name>disableKeyFilter</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[disableKeyFilter : BooleanTrue to disable input keystroke filtering (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>emptyClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[emptyClass : StringThe CSS class to apply to an empty field to style the emptyText (defaults to 'x-form-empty-field'). This class is automatically added and removed as needed depending on the current field value. ]]></description>
		</attribute>
		<attribute>
			<name>grow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[grow : BooleanTrue if this field should automatically grow and shrink to its content ]]></description>
		</attribute>
		<attribute>
			<name>growMax</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[growMax : NumberThe maximum width to allow when grow = true (defaults to 800) ]]></description>
		</attribute>
		<attribute>
			<name>growMin</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[growMin : NumberThe minimum width to allow when grow = true (defaults to 30) ]]></description>
		</attribute>
		<attribute>
			<name>maskRe</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[maskRe : RegExpAn input mask regular expression that will be used to filter keystrokes that don't match (defaults to null) ]]></description>
		</attribute>
		<attribute>
			<name>maxLength</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[maxLength : NumberMaximum input field length allowed (defaults to Number.MAX_VALUE) ]]></description>
		</attribute>
		<attribute>
			<name>maxLengthText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[maxLengthText : StringError text to display if the maximum length validation fails (defaults to 'The maximum length for this field is {maxLength}') ]]></description>
		</attribute>
		<attribute>
			<name>minLength</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[minLength : NumberMinimum input field length required (defaults to 0) ]]></description>
		</attribute>
		<attribute>
			<name>minLengthText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[minLengthText : String Error text to display if the minimum length validation fails (defaults to 'The minimum length for this field is {minLength}') ]]></description>
		</attribute>
		<attribute>
			<name>regex</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[regex : RegExp A JavaScript RegExp object to be tested against the field value during validation (defaults to null). If available, this regex will be evaluated only after the basic validators all return true, and will be passed the current field value. If the test fails, the field will be marked invalid using regexText. ]]></description>
		</attribute>
		<attribute>
			<name>regexText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[regexText : StringThe error text to display if regex is used and the test fails during validation (defaults to '') ]]></description>
		</attribute>
		<attribute>
			<name>selectOnFocus</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[selectOnFocus : BooleanTrue to automatically select any existing field text when the field receives input focus (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>validator</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[validator : Function A custom validation function to be called during field validation (defaults to null). If available, this function will be called only after the basic validators all return true, and will be passed the current field value and expected to return boolean true if the value is valid or a string error message if invalid. ]]></description>
		</attribute>
		<attribute>
			<name>vtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[vtype : StringA validation type name as defined in Ext.form.VTypes (defaults to null) ]]></description>
		</attribute>
		<attribute>
			<name>vtypeText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[vtypeText : String A custom error message to display in place of the default message provided for the vtype currently set for this field (defaults to ''). Only applies if vtype is set, else ignored. ]]></description>
		</attribute>
		<attribute>
			<name>disabled</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[disabled : BooleanTrue to disable the field (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>tabIndex</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[tabIndex : Number The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined). ]]></description>
		</attribute>
		<attribute>
			<name>itemCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[itemCls : String An additional CSS class to apply to this field (defaults to the container's itemCls value if set, or '') ]]></description>
		</attribute>
		<attribute>
			<name>autoCreate</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[autoCreate : String/Object A DomHelper element spec, or true for a default element spec (defaults to {tag: 'input', type: 'text', size: '20', autocomplete: 'off'}) ]]></description>
		</attribute>
		<attribute>
			<name>clearCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[clearCls : StringThe CSS class used to provide field clearing (defaults to 'x-form-clear-left') ]]></description>
		</attribute>
		<attribute>
			<name>fieldClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[fieldClass : StringThe default CSS class for the field (defaults to 'x-form-field') ]]></description>
		</attribute>
		<attribute>
			<name>fieldLabel</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[fieldLabel : String The label text to display next to this field (defaults to '') ]]></description>
		</attribute>
		<attribute>
			<name>focusClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[focusClass : StringThe CSS class to use when the field receives focus (defaults to 'x-form-focus') ]]></description>
		</attribute>
		<attribute>
			<name>hideLabel</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideLabel : BooleanTrue to completely hide the label element (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>inputType</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[inputType : StringThe type attribute for input fields -- e.g. radio, text, password (defaults to 'text'). ]]></description>
		</attribute>
		<attribute>
			<name>invalidClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[invalidClass : StringThe CSS class to use when marking a field invalid (defaults to 'x-form-invalid') ]]></description>
		</attribute>
		<attribute>
			<name>invalidText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[invalidText : StringThe error text to use when marking a field invalid and no message is provided (defaults to 'The value in this field is invalid') ]]></description>
		</attribute>
		<attribute>
			<name>labelSeparator</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[labelSeparator : StringThe standard separator to display after the text of each form label (defaults to the value of Ext.layout.FormLayout.labelSeparator, which is a colon ':' by default). To display no separator for this field's label specify empty string ''. ]]></description>
		</attribute>
		<attribute>
			<name>labelStyle</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[labelStyle : StringA CSS style specification to apply directly to this field's label (defaults to the container's labelStyle value if set, or ''). For example, labelStyle: 'font-weight:bold;'. ]]></description>
		</attribute>
		<attribute>
			<name>msgFx</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[msgFx : StringExperimental The effect used when displaying a validation message under the field (defaults to 'normal'). ]]></description>
		</attribute>
		<attribute>
			<name>msgTarget</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[msgTarget : StringThe location where error text should display. Should be one of the following values (defaults to 'qtip'):Value         Description-----------   ----------------------------------------------------------------------qtip          Display a quick tip when the user hovers over the fieldtitle         Display a default browser title attribute popupunder         Add a block div beneath the field containing the error textside          Add an error icon to the right of the field with a popup on hover[element id]  Add the error text directly to the innerHTML of the specified element]]></description>
		</attribute>
		<attribute>
			<name>validateOnBlur</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[validateOnBlur : BooleanWhether the field should validate when it loses focus (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>validationDelay</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[validationDelay : NumberThe length of time in milliseconds after user input begins until validation is initiated (defaults to 250) ]]></description>
		</attribute>
		<attribute>
			<name>validationEvent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[validationEvent : String/BooleanThe event that should initiate field validation. Set to false to disable automatic validation (defaults to 'keyup'). ]]></description>
		</attribute>
		<attribute>
			<name>readOnly</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[readOnly : Boolean True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute. ]]></description>
		</attribute>
		<attribute>
			<name>name</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[name : StringThe field's HTML name attribute. ]]></description>
		</attribute>
		<attribute>
			<name>value</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[value : MixedA value to initialize this field with. ]]></description>
		</attribute>
		<attribute>
			<name>autoHeight</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoHeight : Boolean
True to use height:'auto', false to use fixed height (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>autoWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoWidth : Boolean
True to use width:'auto', false to use fixed width (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>height</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[height : Number
The height of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>width</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[width : Number
The width of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>triggerField</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.form.TriggerField
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Provides a convenient wrapper for TextFields that adds a clickable trigger button (looks like a combobox by default). The trigger has no default action, so you must assign a function to implement the trigger click handler by overriding onTriggerClick. You can create a TriggerField directly, as it renders exactly like a combobox for which you can provide a custom implementation. For example:var trigger = new Ext.form.TriggerField();trigger.onTriggerClick = myTriggerFn;trigger.applyToMarkup('my-field');However, in general you will most likely want to use TriggerField as the base class for a reusable component. Ext.form.DateField and Ext.form.ComboBox are perfect examples of this. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>hideTrigger</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideTrigger : BooleanTrue to hide the trigger element and display only the base text field (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>triggerClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[triggerClass : StringA CSS class to apply to the trigger ]]></description>
		</attribute>
		<attribute>
			<name>emptyText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[emptyText : StringThe default text to display in an empty field (defaults to null). ]]></description>
		</attribute>
		<attribute>
			<name>allowBlank</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowBlank : BooleanFalse to validate that the value length > 0 (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>blankText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[blankText : StringError text to display if the allow blank validation fails (defaults to 'This field is required')]]></description>
		</attribute>
		<attribute>
			<name>disableKeyFilter</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[disableKeyFilter : BooleanTrue to disable input keystroke filtering (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>emptyClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[emptyClass : StringThe CSS class to apply to an empty field to style the emptyText (defaults to 'x-form-empty-field'). This class is automatically added and removed as needed depending on the current field value. ]]></description>
		</attribute>
		<attribute>
			<name>grow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[grow : BooleanTrue if this field should automatically grow and shrink to its content ]]></description>
		</attribute>
		<attribute>
			<name>growMax</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[growMax : NumberThe maximum width to allow when grow = true (defaults to 800) ]]></description>
		</attribute>
		<attribute>
			<name>growMin</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[growMin : NumberThe minimum width to allow when grow = true (defaults to 30) ]]></description>
		</attribute>
		<attribute>
			<name>maskRe</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[maskRe : RegExpAn input mask regular expression that will be used to filter keystrokes that don't match (defaults to null) ]]></description>
		</attribute>
		<attribute>
			<name>maxLength</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[maxLength : NumberMaximum input field length allowed (defaults to Number.MAX_VALUE) ]]></description>
		</attribute>
		<attribute>
			<name>maxLengthText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[maxLengthText : StringError text to display if the maximum length validation fails (defaults to 'The maximum length for this field is {maxLength}') ]]></description>
		</attribute>
		<attribute>
			<name>minLength</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[minLength : NumberMinimum input field length required (defaults to 0) ]]></description>
		</attribute>
		<attribute>
			<name>minLengthText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[minLengthText : String Error text to display if the minimum length validation fails (defaults to 'The minimum length for this field is {minLength}') ]]></description>
		</attribute>
		<attribute>
			<name>regex</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[regex : RegExp A JavaScript RegExp object to be tested against the field value during validation (defaults to null). If available, this regex will be evaluated only after the basic validators all return true, and will be passed the current field value. If the test fails, the field will be marked invalid using regexText. ]]></description>
		</attribute>
		<attribute>
			<name>regexText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[regexText : StringThe error text to display if regex is used and the test fails during validation (defaults to '') ]]></description>
		</attribute>
		<attribute>
			<name>selectOnFocus</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[selectOnFocus : BooleanTrue to automatically select any existing field text when the field receives input focus (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>validator</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[validator : Function A custom validation function to be called during field validation (defaults to null). If available, this function will be called only after the basic validators all return true, and will be passed the current field value and expected to return boolean true if the value is valid or a string error message if invalid. ]]></description>
		</attribute>
		<attribute>
			<name>vtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[vtype : StringA validation type name as defined in Ext.form.VTypes (defaults to null) ]]></description>
		</attribute>
		<attribute>
			<name>vtypeText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[vtypeText : String A custom error message to display in place of the default message provided for the vtype currently set for this field (defaults to ''). Only applies if vtype is set, else ignored. ]]></description>
		</attribute>
		<attribute>
			<name>disabled</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[disabled : BooleanTrue to disable the field (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>tabIndex</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[tabIndex : Number The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined). ]]></description>
		</attribute>
		<attribute>
			<name>itemCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[itemCls : String An additional CSS class to apply to this field (defaults to the container's itemCls value if set, or '') ]]></description>
		</attribute>
		<attribute>
			<name>autoCreate</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[autoCreate : String/Object A DomHelper element spec, or true for a default element spec (defaults to {tag: 'input', type: 'text', size: '20', autocomplete: 'off'}) ]]></description>
		</attribute>
		<attribute>
			<name>clearCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[clearCls : StringThe CSS class used to provide field clearing (defaults to 'x-form-clear-left') ]]></description>
		</attribute>
		<attribute>
			<name>fieldClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[fieldClass : StringThe default CSS class for the field (defaults to 'x-form-field') ]]></description>
		</attribute>
		<attribute>
			<name>fieldLabel</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[fieldLabel : String The label text to display next to this field (defaults to '') ]]></description>
		</attribute>
		<attribute>
			<name>focusClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[focusClass : StringThe CSS class to use when the field receives focus (defaults to 'x-form-focus') ]]></description>
		</attribute>
		<attribute>
			<name>hideLabel</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideLabel : BooleanTrue to completely hide the label element (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>inputType</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[inputType : StringThe type attribute for input fields -- e.g. radio, text, password (defaults to 'text'). ]]></description>
		</attribute>
		<attribute>
			<name>invalidClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[invalidClass : StringThe CSS class to use when marking a field invalid (defaults to 'x-form-invalid') ]]></description>
		</attribute>
		<attribute>
			<name>invalidText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[invalidText : StringThe error text to use when marking a field invalid and no message is provided (defaults to 'The value in this field is invalid') ]]></description>
		</attribute>
		<attribute>
			<name>labelSeparator</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[labelSeparator : StringThe standard separator to display after the text of each form label (defaults to the value of Ext.layout.FormLayout.labelSeparator, which is a colon ':' by default). To display no separator for this field's label specify empty string ''. ]]></description>
		</attribute>
		<attribute>
			<name>labelStyle</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[labelStyle : StringA CSS style specification to apply directly to this field's label (defaults to the container's labelStyle value if set, or ''). For example, labelStyle: 'font-weight:bold;'. ]]></description>
		</attribute>
		<attribute>
			<name>msgFx</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[msgFx : StringExperimental The effect used when displaying a validation message under the field (defaults to 'normal'). ]]></description>
		</attribute>
		<attribute>
			<name>msgTarget</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[msgTarget : StringThe location where error text should display. Should be one of the following values (defaults to 'qtip'):Value         Description-----------   ----------------------------------------------------------------------qtip          Display a quick tip when the user hovers over the fieldtitle         Display a default browser title attribute popupunder         Add a block div beneath the field containing the error textside          Add an error icon to the right of the field with a popup on hover[element id]  Add the error text directly to the innerHTML of the specified element]]></description>
		</attribute>
		<attribute>
			<name>validateOnBlur</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[validateOnBlur : BooleanWhether the field should validate when it loses focus (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>validationDelay</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[validationDelay : NumberThe length of time in milliseconds after user input begins until validation is initiated (defaults to 250) ]]></description>
		</attribute>
		<attribute>
			<name>validationEvent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[validationEvent : String/BooleanThe event that should initiate field validation. Set to false to disable automatic validation (defaults to 'keyup'). ]]></description>
		</attribute>
		<attribute>
			<name>readOnly</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[readOnly : Boolean True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute. ]]></description>
		</attribute>
		<attribute>
			<name>name</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[name : StringThe field's HTML name attribute. ]]></description>
		</attribute>
		<attribute>
			<name>value</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[value : MixedA value to initialize this field with. ]]></description>
		</attribute>
		<attribute>
			<name>autoHeight</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoHeight : Boolean
True to use height:'auto', false to use fixed height (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>autoWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoWidth : Boolean
True to use width:'auto', false to use fixed width (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>height</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[height : Number
The height of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>width</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[width : Number
The width of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>vTypes</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.form.VTypes
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Overridable validation definitions. The validations provided are basic and intended to be easily customizable and extended.This class is a singleton and cannot be created directly. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>abstractSelectionModel</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.grid.AbstractSelectionModel
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Abstract base class for grid SelectionModels. It provides the interface that should be implemented by descendant classes. This class should not be directly instantiated. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>cellSelectionModel</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.grid.CellSelectionModel
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[This class provides the basic implementation for single cell selection in a grid. The object stored as the selection and returned by getSelectedCell contains the following properties:record : Ext.data.recordThe Record which provides the data for the row containing the selectioncell : Ext.data.recordAn object containing the following properties:rowIndex : NumberThe index of the selected rowcellIndex : NumberThe index of the selected cellNote that due to possible column reordering, the cellIndex should not be used as an index into the Record's data. Instead, the name of the selected field should be determined in order to retrieve the data value from the record by name:var fieldName = grid.getColumnModel().getDataIndex(cellIndex);var data = record.get(fieldName);]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>checkboxSelectionModel</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.grid.CheckboxSelectionModel
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[A custom selection model that renders a column of checkboxes that can be toggled to select or deselect rows.]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>header</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[header : String Any valid text or HTML fragment to display in the header cell for the checkbox column (defaults to '<div class='x-grid3-hd-checker'> </div>'). The default CSS class of 'x-grid3-hd-checker' displays a checkbox in the header and provides support for automatic check all/none behavior on header click. This string can be replaced by any valid HTML fragment, including a simple text string (e.g., 'Select Rows'), but the automatic check all/none behavior will only work if the 'x-grid3-hd-checker' class is supplied. ]]></description>
		</attribute>
		<attribute>
			<name>sortable</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>width</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>singleSelect</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[singleSelect : Boolean, True to allow selection of only one row at a time (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>selectRow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[selectRow : Function, on row selected.]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>columnModel</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.grid.ColumnModel
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[This is the default implementation of a ColumnModel used by the Grid. This class is initialized with an Array of column config objects. An individual column's config object defines the header string, the Ext.data.Record field the column draws its data from, an otional rendering function to provide customized data formatting, and the ability to apply a CSS class to all cells in a column through its id config option.Usage:var colModel = new Ext.grid.ColumnModel([	{header: 'Ticker', width: 60, sortable: true},	{header: 'Company Name', width: 150, sortable: true},	{header: 'Market Cap.', width: 100, sortable: true},	{header: '$ Sales', width: 100, sortable: true, renderer: money},	{header: 'Employees', width: 100, sortable: true, resizable: false} ]);The config options listed for this class are options which may appear in each individual column definition. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
(optional) Defaults to the column's initial ordinal position. A name which identifies this column. The id is used to create a CSS class name which is applied to all table cells (including headers) in that column. The class name takes the form ofx-grid3-td-idHeader cells will also recieve this class name, but will also have the class x-grid3-hd]]></description>
		</attribute>
		<attribute>
			<name>header</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[header : String
The header text to display in the Grid view. ]]></description>
		</attribute>
		<attribute>
			<name>sortable</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[sortable : Boolean
(optional) True if sorting is to be allowed on this column. Defaults to the value of the defaultSortable property. Whether local/remote sorting is used is specified in Ext.data.Store.remoteSort]]></description>
		</attribute>
		<attribute>
			<name>align</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[align : String
(optional) Set the CSS text-align property of the column. Defaults to undefined. ]]></description>
		</attribute>
		<attribute>
			<name>dataIndex</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[dataIndex : String
(optional) The name of the field in the grid's Ext.data.Store's Ext.data.Record definition from which to draw the column's value. If not specified, the column's index is used as an index into the Record's data Array. ]]></description>
		</attribute>
		<attribute>
			<name>fixed</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[fixed : Boolean
(optional) True if the column width cannot be changed. Defaults to false. ]]></description>
		</attribute>
		<attribute>
			<name>hideable</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideable : Boolean
(optional) Specify as false to prevent the user from hiding this column. Defaults to true. ]]></description>
		</attribute>
		<attribute>
			<name>resizable</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[resizable : Boolean
(optional) False to disable column resizing. Defaults to true. ]]></description>
		</attribute>
		<attribute>
			<name>width</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[width : Number
(optional) The initial width in pixels of the column. Using this instead of Ext.grid.Grid.autoSizeColumns is more efficient. ]]></description>
		</attribute>
		<attribute>
			<name>editor</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[editor : Ext.form.Field
(optional) The Ext.form.Field to use when editing values in this column if editing is supported by the grid. ]]></description>
		</attribute>
		<attribute>
			<name>renderer</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderer : Function
(optional) A function used to generate HTML markup for a cell given the cell's data value. See setRenderer. If not specified, the default renderer uses the raw data value. ]]></description>
		</attribute>
		<attribute>
			<name>hidden</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hidden : Boolean
(optional) True to hide the column. Defaults to false. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>editorGridPanel</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.grid.EditorGridPanel
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Class for creating and editable grid. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>clicksToEdit</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[clicksToEdit : NumberThe number of clicks on a cell required to display the cell's editor (defaults to 2) ]]></description>
		</attribute>
		<attribute>
			<name>store</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[store : Ext.data.StoreThe Ext.data.Store the grid should use as its data source (required). ]]></description>
		</attribute>
		<attribute>
			<name>maxHeight</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[maxHeight : NumberSets the maximum height of the grid - ignored if autoHeight is not on. ]]></description>
		</attribute>
		<attribute>
			<name>autoExpandColumn</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[autoExpandColumn : StringThe id of a column in this grid that should expand to fill unused space. This id can not be 0. ]]></description>
		</attribute>
		<attribute>
			<name>autoExpandMax</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[autoExpandMax : NumberThe maximum width the autoExpandColumn can have (if enabled). Defaults to 1000. ]]></description>
		</attribute>
		<attribute>
			<name>autoExpandMin</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[autoExpandMin : NumberThe minimum width the autoExpandColumn can have (if enabled). defaults to 50. ]]></description>
		</attribute>
		<attribute>
			<name>cm</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cm : ObjectShorthand for colModel. ]]></description>
		</attribute>
		<attribute>
			<name>colModel</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[colModel : ObjectThe Ext.grid.ColumnModel to use when rendering the grid (required). ]]></description>
		</attribute>
		<attribute>
			<name>disableSelection</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[disableSelection : BooleanTrue to disable selections in the grid (defaults to false). - ignored a SelectionModel is specified ]]></description>
		</attribute>
		<attribute>
			<name>enableColumnHide</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enableColumnHide : BooleanTrue to enable hiding of columns with the header context menu. ]]></description>
		</attribute>
		<attribute>
			<name>enableColumnMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enableColumnMove : BooleanTrue to enable drag and drop reorder of columns. ]]></description>
		</attribute>
		<attribute>
			<name>enableColumnResize</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enableColumnResize : BooleanFalse to turn off column resizing for the whole grid (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>enableDragDrop</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enableDragDrop : BooleanTrue to enable drag and drop of rows. ]]></description>
		</attribute>
		<attribute>
			<name>enableHdMenu</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enableHdMenu : BooleanTrue to enable the drop down button for menu in the headers. ]]></description>
		</attribute>
		<attribute>
			<name>enableRowHeightSync</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enableRowHeightSync : BooleanTrue to manually sync row heights across locked and not locked rows. ]]></description>
		</attribute>
		<attribute>
			<name>loadMask</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[loadMask : ObjectAn Ext.LoadMask config or true to mask the grid while loading (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>minColumnWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[minColumnWidth : NumberThe minimum width a column can be resized to. Defaults to 25. ]]></description>
		</attribute>
		<attribute>
			<name>monitorWindowResize</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[monitorWindowResize : BooleanTrue to autoSize the grid when the window resizes. Defaults to true. ]]></description>
		</attribute>
		<attribute>
			<name>selModel</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[selModel : Object Any subclass of AbstractSelectionModel that will provide the selection model for the grid (defaults to Ext.grid.RowSelectionModel if not specified). ]]></description>
		</attribute>
		<attribute>
			<name>sm</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[sm : ObjectShorthand for selModel. ]]></description>
		</attribute>
		<attribute>
			<name>stripeRows</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[stripeRows : BooleanTrue to stripe the rows. Default is false. ]]></description>
		</attribute>
		<attribute>
			<name>trackMouseOver</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[trackMouseOver : BooleanTrue to highlight rows when the mouse is over. Default is true. ]]></description>
		</attribute>
		<attribute>
			<name>viewConfig</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[viewConfig : ObjectA config object that will be applied to the grid's UI view. Any of the config options available for Ext.grid.GridView can be specified here. ]]></description>
		</attribute>
		<attribute>
			<name>view</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[view : ObjectThe Ext.grid.GridView used by the grid. This can be set before a call to render(). ]]></description>
		</attribute>
		<attribute>
			<name>columns</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[columns : ArrayAn array of columns to auto create a ColumnModel ]]></description>
		</attribute>
		<attribute>
			<name>iconCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[iconCls : String
A CSS class that will provide a background image to be used as the panel header icon (defaults to ''). ]]></description>
		</attribute>
		<attribute>
			<name>shadow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[minButtonWidth : Number
Minimum width in pixels of all buttons in this panel (defaults to 75) ]]></description>
		</attribute>
		<attribute>
			<name>shadowOffset</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[shadowOffset : Number
The number of pixels to offset the shadow if displayed (defaults to 4). Note that this option only applies when floating = true. ]]></description>
		</attribute>
		<attribute>
			<name>shim</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[shim : Boolean
False to disable the iframe shim in browsers which need one (defaults to true). Note that this option only applies when floating = true. ]]></description>
		</attribute>
		<attribute>
			<name>animCollapse</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[animCollapse : Boolean
True to animate the transition when the panel is collapsed, false to skip the animation (defaults to true if the Ext.Fx class is available, otherwise false). ]]></description>
		</attribute>
		<attribute>
			<name>autoLoad</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[autoLoad : Object/String/Function
A valid url spec according to the Updater Ext.Updater.update method. If autoLoad is not null, the panel will attempt to load its contents immediately upon render.The URL will become the default URL for this panel's body element, so it may be refreshed at any time.]]></description>
		</attribute>
		<attribute>
			<name>autoScroll</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoScroll : Boolean
True to use overflow:'auto' on the panel's body element and show scroll bars automatically when necessary, false to clip any overflowing content (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>baseCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[baseCls : String
The base CSS class to apply to this panel's element (defaults to 'x-panel').]]></description>
		</attribute>
		<attribute>
			<name>bbar</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[bbar : Object/Array
The bottom toolbar of the panel. This can be a Ext.Toolbar object, a toolbar config, or an array of buttons/button configs to be added to the toolbar. Note that this is not available as a property after render. To access the bottom toolbar after render, use getBottomToolbar. ]]></description>
		</attribute>
		<attribute>
			<name>bodyBorder</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[bodyBorder : Boolean
True to display an interior border on the body element of the panel, false to hide it (defaults to true). This only applies when border == true. If border == true and bodyBorder == false, the border will display as a 1px wide inset border, giving the entire body element an inset appearance. ]]></description>
		</attribute>
		<attribute>
			<name>bodyStyle</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[bodyStyle : String/Object/Function
Custom CSS styles to be applied to the body element in the format expected by Ext.Element.applyStyles (defaults to null). ]]></description>
		</attribute>
		<attribute>
			<name>buttonAlign</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[buttonAlign : String
The alignment of any buttons added to this panel. Valid values are 'right,' 'left' and 'center' (defaults to 'right'). ]]></description>
		</attribute>
		<attribute>
			<name>buttons</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[buttons : Array
An array of Ext.Button configs used to add buttons to the footer of this panel. ]]></description>
		</attribute>
		<attribute>
			<name>collapseFirst</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[collapseFirst : Boolean
True to make sure the collapse/expand toggle button always renders first (to the left of) any other tools in the panel's title bar, false to render it last (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>collapsed</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[collapsed : Boolean
True to render the panel collapsed, false to render it expanded (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>collapsedCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[collapsedCls : String
A CSS class to add to the panel's element after it has been collapsed (defaults to 'x-panel-collapsed'). ]]></description>
		</attribute>
		<attribute>
			<name>collapsible</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[collapsible : Boolean
True to make the panel collapsible and have the expand/collapse toggle button automatically rendered into the header tool button area, false to keep the panel statically sized with no button (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>contentEl</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[contentEl : String
The id of an existing HTML node to use as the panel's body content (defaults to ''). ]]></description>
		</attribute>
		<attribute>
			<name>draggable</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[draggable : Boolean
True to enable dragging of this Panel (defaults to false). For custom drag/drop implementations, an Ext.Panel.DD config could also be passed in this config instead of true, although Ext.Panel.DD is an internal, undocumented class]]></description>
		</attribute>
		<attribute>
			<name>elements</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[elements : String
A comma-delimited list of panel elements to initialize when the panel is rendered. Normally, this list will be generated automatically based on the items added to the panel at config time, but sometimes it might be useful to make sure a structural element is rendered even if not specified at config time (for example, you may want to add a button or toolbar dynamically after the panel has been rendered). Adding those elements to this list will allocate the required placeholders in the panel when it is rendered. Valid values areheader tbar (top bar)body bbar (bottom bar)footer Defaults to 'body'. ]]></description>
		</attribute>
		<attribute>
			<name>footer</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[footer : Boolean
True to create the footer element explicitly, false to skip creating it. By default, when footer is not specified, if one or more buttons have been added to the panel the footer will be created automatically, otherwise it will not. ]]></description>
		</attribute>
		<attribute>
			<name>header</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[header : Boolean
True to create the header element explicitly, false to skip creating it. By default, when header is not specified, if a title is set the header will be created automatically, otherwise it will not. If a title is set but header is explicitly set to false, the header will not be rendered. ]]></description>
		</attribute>
		<attribute>
			<name>headerAsText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[headerAsText : Boolean
True to display the panel title in the header, false to hide it (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>hideCollapseTool</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideCollapseTool : Boolean
True to hide the expand/collapse toggle button when collapsible = true, false to display it (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>html</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[html : String/Object
An HTML fragment, or a DomHelper specification to use as the panel's body content (defaults to ''). ]]></description>
		</attribute>
		<attribute>
			<name>keys</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[keys : Object/Array
A KeyMap config object (in the format expected by Ext.KeyMap.addBinding used to assign custom key handling to this panel (defaults to null). ]]></description>
		</attribute>
		<attribute>
			<name>maskDisabled</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[maskDisabled : Boolean
True to mask the panel when it is disabled, false to not mask it (defaults to true). Either way, the panel will always tell its contained elements to disable themselves when it is disabled, but masking the panel can provide an additional visual cue that the panel is disabled. ]]></description>
		</attribute>
		<attribute>
			<name>minButtonWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>tbar</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tbar : Object/Array
The top toolbar of the panel. This can be either an Ext.Toolbar object or an array of buttons/button configs to be added to the toolbar. Note that this is not available as a property after render. To access the top toolbar after render, use getTopToolbar. ]]></description>
		</attribute>
		<attribute>
			<name>titleCollapse</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[titleCollapse : Boolean
True to allow expanding and collapsing the panel (when collapsible = true) by clicking anywhere in the header bar, false to allow it only by clicking to tool button (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>tools</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tools : Array
An array of tool button configs to be added to the header tool area. Each tool config may contain the following properties:id : String Required. The type of tool to create. Values may betoggle (Created by default when collapsible is true)close minimizemaximize restore gear pin unpin right left up downrefreshminus plus help searchsave handler : FunctionRequired. The function to call when clicked. Arguments passed are:event : Ext.EventObject The click event.toolEl : Ext.ElementThe tool Element.Panel : Ext.Panel The host Panelscope : Object The scope in which to call the handler.qtip : String/Object A tip string, or a config argument to Ext.QuickTip.registerhidden : Boolean True to initially render hidden.on : Object A listener config object specifiying event listeners in the format of an argument to addListenerExample usage: tools:[{    id:'refresh',    // hidden:true,    handler: function(event, toolEl, panel){        // refresh logic    }}]Note that apart from the toggle tool which is provided when a panel is collapsible, these tools only provide the visual button. Any required functionality must be provided by adding handlers that implement the necessary behavior. ]]></description>
		</attribute>
		<attribute>
			<name>region</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>title</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[title : String
The title text to display in the panel header (defaults to ''). When a title is specified the header element will automatically be created and displayed unless header is explicitly set to false. If you don't want to specify a title at config time, but you may want one later, you must either specify a non-empty title (a blank space ' ' will do) or header:true so that the container element will get created. ]]></description>
		</attribute>
		<attribute>
			<name>frame</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[frame : Boolean
True to render the panel with custom rounded borders, false to render with plain 1px square borders (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>border</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[border : Boolean
True to display the borders of the panel's body element, false to hide them (defaults to true). By default, the border is a 2px wide inset border, but this can be further altered by setting bodyBorder to false. ]]></description>
		</attribute>
		<attribute>
			<name>floating</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[floating : Boolean
True to float the panel (absolute position it with automatic shimming and shadow), false to display it inline where it is rendered (defaults to false). Note that by default, setting floating to true will cause the panel to display at negative offsets so that it is hidden -- because the panel is absolute positioned, the position must be set explicitly after render (e.g., myPanel.setPosition(100,100);). Also, when floating a panel you should always assign a fixed width, otherwise it will be auto width and will expand to fill to the right edge of the viewport. ]]></description>
		</attribute>
		<attribute>
			<name>activeItem</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[activeItem : String/Number
A string component id or the numeric index of the component that should be initially activated within the container's layout on render. For example, activeItem: 'item-1' or activeItem: 0 (index 0 = the first item in the container's collection). activeItem only applies to layout styles that can display items one at a time (like Ext.layout.Accordion, Ext.layout.CardLayout and Ext.layout.FitLayout). Related to Ext.layout.ContainerLayout.activeItem. ]]></description>
		</attribute>
		<attribute>
			<name>autoDestroy</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoDestroy : BooleanIf true the container will automatically destroy any contained component that is removed from it, else destruction must be handled manually (defaults to true).]]></description>
		</attribute>
		<attribute>
			<name>bufferResize</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[bufferResize : Boolean/Number
When set to true (100 milliseconds) or a number of milliseconds, the layout assigned for this container will buffer the frequency it calculates and does a re-layout of components. This is useful for heavy containers or containers with a large amount of sub components that frequent calls to layout are expensive. ]]></description>
		</attribute>
		<attribute>
			<name>defaultType</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[defaultType : String
The default type of container represented by this object as registered in Ext.ComponentMgr (defaults to 'panel'). ]]></description>
		</attribute>
		<attribute>
			<name>defaults</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[defaults : Object
A config object that will be applied to all components added to this container either via the items config or via the add or insert methods. The defaults config can contain any number of name/value property pairs to be added to each item, and should be valid for the types of items being added to the container. For example, to automatically apply padding to the body of each of a set of contained Ext.Panel items, you could pass: defaults: {bodyStyle:'padding:15px'}. ]]></description>
		</attribute>
		<attribute>
			<name>hideBorders</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideBorders : Boolean
True to hide the borders of each contained component, false to defer to the component's existing border settings (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>items</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[items : Mixed
A single item, or an array of child Components to be added to this container. Each item can be any type of object based on Ext.Component.Component config objects may also be specified in order to avoid the overhead of constructing a real Component object if lazy rendering might mean that the added Component will not be rendered immediately. To take advantage of this 'lazy instantiation', set the Ext.Component.xtype config property to the registered type of the Component wanted.For a list of all available xtypes, see Ext.Component. If a single item is being passed, it should be passed directly as an object reference (e.g., items: {...}). Multiple items should be passed as an array of objects (e.g., items: [{...}, {...}]). ]]></description>
		</attribute>
		<attribute>
			<name>layoutConfig</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[layoutConfig : Object
This is a config object containing properties specific to the chosen layout (to be used in conjunction with the layout config value). For complete details regarding the valid config options for each layout type, see the layout class corresponding to the type specified:Ext.layout.Accordion Ext.layout.AnchorLayoutExt.layout.BorderLayout Ext.layout.CardLayout Ext.layout.ColumnLayoutExt.layout.FitLayout Ext.layout.FormLayout Ext.layout.TableLayout]]></description>
		</attribute>
		<attribute>
			<name>monitorResize</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[monitorResize : Boolean
True to automatically monitor window resize events to handle anything that is sensitive to the current size of the viewport. This value is typically managed by the chosen layout and should not need to be set manually. ]]></description>
		</attribute>
		<attribute>
			<name>layout</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[layout : String
The layout type to be used in this container. If not specified, a default Ext.layout.ContainerLayout will be created and used. Valid values are: accordion, anchor, border, card, column, fit, form and table. Specific config values for the chosen layout type can be specified using layoutConfig. ]]></description>
		</attribute>
		<attribute>
			<name>autoHeight</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoHeight : Boolean
True to use height:'auto', false to use fixed height (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>autoWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoWidth : Boolean
True to use width:'auto', false to use fixed width (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>height</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[height : Number
The height of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>width</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[width : Number
The width of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>gridPanel</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.grid.GridPanel
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[This class represents the primary interface of a component based grid control. Usage:var grid = new Ext.grid.GridPanel({    store: new Ext.data.Store({        reader: reader,        data: xg.dummyData    }),    columns: [        {id:'company', header: 'Company', width: 200, sortable: true, dataIndex: 'company'},        {header: 'Price', width: 120, sortable: true, renderer: Ext.util.Format.usMoney, dataIndex: 'price'},        {header: 'Change', width: 120, sortable: true, dataIndex: 'change'},        {header: '% Change', width: 120, sortable: true, dataIndex: 'pctChange'},        {header: 'Last Updated', width: 135, sortable: true, renderer: Ext.util.Format.dateRenderer('m/d/Y'), dataIndex: 'lastChange'}    ],    viewConfig: {        forceFit: true    },    sm: new Ext.grid.RowSelectionModel({singleSelect:true}),    width:600,    height:300,    frame:true,    title:'Framed with Checkbox Selection and Horizontal Scrolling',    iconCls:'icon-grid'});Note: Although this class inherits many configuration options from base classes, some of them (such as autoScroll, layout, items, etc) won't function as they do with the base Panel class.To access the data in a Grid, it is necessary to use the data model encapsulated by the Store. See the cellclick event. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>store</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[store : Ext.data.StoreThe Ext.data.Store the grid should use as its data source (required). ]]></description>
		</attribute>
		<attribute>
			<name>maxHeight</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[maxHeight : NumberSets the maximum height of the grid - ignored if autoHeight is not on. ]]></description>
		</attribute>
		<attribute>
			<name>autoExpandColumn</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[autoExpandColumn : StringThe id of a column in this grid that should expand to fill unused space. This id can not be 0. ]]></description>
		</attribute>
		<attribute>
			<name>autoExpandMax</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[autoExpandMax : NumberThe maximum width the autoExpandColumn can have (if enabled). Defaults to 1000. ]]></description>
		</attribute>
		<attribute>
			<name>autoExpandMin</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[autoExpandMin : NumberThe minimum width the autoExpandColumn can have (if enabled). defaults to 50. ]]></description>
		</attribute>
		<attribute>
			<name>cm</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cm : ObjectShorthand for colModel. ]]></description>
		</attribute>
		<attribute>
			<name>colModel</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[colModel : ObjectThe Ext.grid.ColumnModel to use when rendering the grid (required). ]]></description>
		</attribute>
		<attribute>
			<name>disableSelection</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[disableSelection : BooleanTrue to disable selections in the grid (defaults to false). - ignored a SelectionModel is specified ]]></description>
		</attribute>
		<attribute>
			<name>enableColumnHide</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enableColumnHide : BooleanTrue to enable hiding of columns with the header context menu. ]]></description>
		</attribute>
		<attribute>
			<name>enableColumnMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enableColumnMove : BooleanTrue to enable drag and drop reorder of columns. ]]></description>
		</attribute>
		<attribute>
			<name>enableColumnResize</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enableColumnResize : BooleanFalse to turn off column resizing for the whole grid (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>enableDragDrop</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enableDragDrop : BooleanTrue to enable drag and drop of rows. ]]></description>
		</attribute>
		<attribute>
			<name>enableHdMenu</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enableHdMenu : BooleanTrue to enable the drop down button for menu in the headers. ]]></description>
		</attribute>
		<attribute>
			<name>enableRowHeightSync</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enableRowHeightSync : BooleanTrue to manually sync row heights across locked and not locked rows. ]]></description>
		</attribute>
		<attribute>
			<name>loadMask</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[loadMask : ObjectAn Ext.LoadMask config or true to mask the grid while loading (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>minColumnWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[minColumnWidth : NumberThe minimum width a column can be resized to. Defaults to 25. ]]></description>
		</attribute>
		<attribute>
			<name>monitorWindowResize</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[monitorWindowResize : BooleanTrue to autoSize the grid when the window resizes. Defaults to true. ]]></description>
		</attribute>
		<attribute>
			<name>selModel</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[selModel : Object Any subclass of AbstractSelectionModel that will provide the selection model for the grid (defaults to Ext.grid.RowSelectionModel if not specified). ]]></description>
		</attribute>
		<attribute>
			<name>sm</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[sm : ObjectShorthand for selModel. ]]></description>
		</attribute>
		<attribute>
			<name>stripeRows</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[stripeRows : BooleanTrue to stripe the rows. Default is false. ]]></description>
		</attribute>
		<attribute>
			<name>trackMouseOver</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[trackMouseOver : BooleanTrue to highlight rows when the mouse is over. Default is true. ]]></description>
		</attribute>
		<attribute>
			<name>viewConfig</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[viewConfig : ObjectA config object that will be applied to the grid's UI view. Any of the config options available for Ext.grid.GridView can be specified here. ]]></description>
		</attribute>
		<attribute>
			<name>view</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[view : ObjectThe Ext.grid.GridView used by the grid. This can be set before a call to render(). ]]></description>
		</attribute>
		<attribute>
			<name>columns</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[columns : ArrayAn array of columns to auto create a ColumnModel ]]></description>
		</attribute>
		<attribute>
			<name>iconCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[iconCls : String
A CSS class that will provide a background image to be used as the panel header icon (defaults to ''). ]]></description>
		</attribute>
		<attribute>
			<name>shadow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[minButtonWidth : Number
Minimum width in pixels of all buttons in this panel (defaults to 75) ]]></description>
		</attribute>
		<attribute>
			<name>shadowOffset</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[shadowOffset : Number
The number of pixels to offset the shadow if displayed (defaults to 4). Note that this option only applies when floating = true. ]]></description>
		</attribute>
		<attribute>
			<name>shim</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[shim : Boolean
False to disable the iframe shim in browsers which need one (defaults to true). Note that this option only applies when floating = true. ]]></description>
		</attribute>
		<attribute>
			<name>animCollapse</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[animCollapse : Boolean
True to animate the transition when the panel is collapsed, false to skip the animation (defaults to true if the Ext.Fx class is available, otherwise false). ]]></description>
		</attribute>
		<attribute>
			<name>autoLoad</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[autoLoad : Object/String/Function
A valid url spec according to the Updater Ext.Updater.update method. If autoLoad is not null, the panel will attempt to load its contents immediately upon render.The URL will become the default URL for this panel's body element, so it may be refreshed at any time.]]></description>
		</attribute>
		<attribute>
			<name>autoScroll</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoScroll : Boolean
True to use overflow:'auto' on the panel's body element and show scroll bars automatically when necessary, false to clip any overflowing content (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>baseCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[baseCls : String
The base CSS class to apply to this panel's element (defaults to 'x-panel').]]></description>
		</attribute>
		<attribute>
			<name>bbar</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[bbar : Object/Array
The bottom toolbar of the panel. This can be a Ext.Toolbar object, a toolbar config, or an array of buttons/button configs to be added to the toolbar. Note that this is not available as a property after render. To access the bottom toolbar after render, use getBottomToolbar. ]]></description>
		</attribute>
		<attribute>
			<name>bodyBorder</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[bodyBorder : Boolean
True to display an interior border on the body element of the panel, false to hide it (defaults to true). This only applies when border == true. If border == true and bodyBorder == false, the border will display as a 1px wide inset border, giving the entire body element an inset appearance. ]]></description>
		</attribute>
		<attribute>
			<name>bodyStyle</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[bodyStyle : String/Object/Function
Custom CSS styles to be applied to the body element in the format expected by Ext.Element.applyStyles (defaults to null). ]]></description>
		</attribute>
		<attribute>
			<name>buttonAlign</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[buttonAlign : String
The alignment of any buttons added to this panel. Valid values are 'right,' 'left' and 'center' (defaults to 'right'). ]]></description>
		</attribute>
		<attribute>
			<name>buttons</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[buttons : Array
An array of Ext.Button configs used to add buttons to the footer of this panel. ]]></description>
		</attribute>
		<attribute>
			<name>collapseFirst</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[collapseFirst : Boolean
True to make sure the collapse/expand toggle button always renders first (to the left of) any other tools in the panel's title bar, false to render it last (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>collapsed</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[collapsed : Boolean
True to render the panel collapsed, false to render it expanded (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>collapsedCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[collapsedCls : String
A CSS class to add to the panel's element after it has been collapsed (defaults to 'x-panel-collapsed'). ]]></description>
		</attribute>
		<attribute>
			<name>collapsible</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[collapsible : Boolean
True to make the panel collapsible and have the expand/collapse toggle button automatically rendered into the header tool button area, false to keep the panel statically sized with no button (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>contentEl</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[contentEl : String
The id of an existing HTML node to use as the panel's body content (defaults to ''). ]]></description>
		</attribute>
		<attribute>
			<name>draggable</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[draggable : Boolean
True to enable dragging of this Panel (defaults to false). For custom drag/drop implementations, an Ext.Panel.DD config could also be passed in this config instead of true, although Ext.Panel.DD is an internal, undocumented class]]></description>
		</attribute>
		<attribute>
			<name>elements</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[elements : String
A comma-delimited list of panel elements to initialize when the panel is rendered. Normally, this list will be generated automatically based on the items added to the panel at config time, but sometimes it might be useful to make sure a structural element is rendered even if not specified at config time (for example, you may want to add a button or toolbar dynamically after the panel has been rendered). Adding those elements to this list will allocate the required placeholders in the panel when it is rendered. Valid values areheader tbar (top bar)body bbar (bottom bar)footer Defaults to 'body'. ]]></description>
		</attribute>
		<attribute>
			<name>footer</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[footer : Boolean
True to create the footer element explicitly, false to skip creating it. By default, when footer is not specified, if one or more buttons have been added to the panel the footer will be created automatically, otherwise it will not. ]]></description>
		</attribute>
		<attribute>
			<name>header</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[header : Boolean
True to create the header element explicitly, false to skip creating it. By default, when header is not specified, if a title is set the header will be created automatically, otherwise it will not. If a title is set but header is explicitly set to false, the header will not be rendered. ]]></description>
		</attribute>
		<attribute>
			<name>headerAsText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[headerAsText : Boolean
True to display the panel title in the header, false to hide it (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>hideCollapseTool</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideCollapseTool : Boolean
True to hide the expand/collapse toggle button when collapsible = true, false to display it (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>html</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[html : String/Object
An HTML fragment, or a DomHelper specification to use as the panel's body content (defaults to ''). ]]></description>
		</attribute>
		<attribute>
			<name>keys</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[keys : Object/Array
A KeyMap config object (in the format expected by Ext.KeyMap.addBinding used to assign custom key handling to this panel (defaults to null). ]]></description>
		</attribute>
		<attribute>
			<name>maskDisabled</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[maskDisabled : Boolean
True to mask the panel when it is disabled, false to not mask it (defaults to true). Either way, the panel will always tell its contained elements to disable themselves when it is disabled, but masking the panel can provide an additional visual cue that the panel is disabled. ]]></description>
		</attribute>
		<attribute>
			<name>minButtonWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>tbar</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tbar : Object/Array
The top toolbar of the panel. This can be either an Ext.Toolbar object or an array of buttons/button configs to be added to the toolbar. Note that this is not available as a property after render. To access the top toolbar after render, use getTopToolbar. ]]></description>
		</attribute>
		<attribute>
			<name>titleCollapse</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[titleCollapse : Boolean
True to allow expanding and collapsing the panel (when collapsible = true) by clicking anywhere in the header bar, false to allow it only by clicking to tool button (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>tools</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tools : Array
An array of tool button configs to be added to the header tool area. Each tool config may contain the following properties:id : String Required. The type of tool to create. Values may betoggle (Created by default when collapsible is true)close minimizemaximize restore gear pin unpin right left up downrefreshminus plus help searchsave handler : FunctionRequired. The function to call when clicked. Arguments passed are:event : Ext.EventObject The click event.toolEl : Ext.ElementThe tool Element.Panel : Ext.Panel The host Panelscope : Object The scope in which to call the handler.qtip : String/Object A tip string, or a config argument to Ext.QuickTip.registerhidden : Boolean True to initially render hidden.on : Object A listener config object specifiying event listeners in the format of an argument to addListenerExample usage: tools:[{    id:'refresh',    // hidden:true,    handler: function(event, toolEl, panel){        // refresh logic    }}]Note that apart from the toggle tool which is provided when a panel is collapsible, these tools only provide the visual button. Any required functionality must be provided by adding handlers that implement the necessary behavior. ]]></description>
		</attribute>
		<attribute>
			<name>region</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>title</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[title : String
The title text to display in the panel header (defaults to ''). When a title is specified the header element will automatically be created and displayed unless header is explicitly set to false. If you don't want to specify a title at config time, but you may want one later, you must either specify a non-empty title (a blank space ' ' will do) or header:true so that the container element will get created. ]]></description>
		</attribute>
		<attribute>
			<name>frame</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[frame : Boolean
True to render the panel with custom rounded borders, false to render with plain 1px square borders (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>border</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[border : Boolean
True to display the borders of the panel's body element, false to hide them (defaults to true). By default, the border is a 2px wide inset border, but this can be further altered by setting bodyBorder to false. ]]></description>
		</attribute>
		<attribute>
			<name>floating</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[floating : Boolean
True to float the panel (absolute position it with automatic shimming and shadow), false to display it inline where it is rendered (defaults to false). Note that by default, setting floating to true will cause the panel to display at negative offsets so that it is hidden -- because the panel is absolute positioned, the position must be set explicitly after render (e.g., myPanel.setPosition(100,100);). Also, when floating a panel you should always assign a fixed width, otherwise it will be auto width and will expand to fill to the right edge of the viewport. ]]></description>
		</attribute>
		<attribute>
			<name>activeItem</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[activeItem : String/Number
A string component id or the numeric index of the component that should be initially activated within the container's layout on render. For example, activeItem: 'item-1' or activeItem: 0 (index 0 = the first item in the container's collection). activeItem only applies to layout styles that can display items one at a time (like Ext.layout.Accordion, Ext.layout.CardLayout and Ext.layout.FitLayout). Related to Ext.layout.ContainerLayout.activeItem. ]]></description>
		</attribute>
		<attribute>
			<name>autoDestroy</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoDestroy : BooleanIf true the container will automatically destroy any contained component that is removed from it, else destruction must be handled manually (defaults to true).]]></description>
		</attribute>
		<attribute>
			<name>bufferResize</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[bufferResize : Boolean/Number
When set to true (100 milliseconds) or a number of milliseconds, the layout assigned for this container will buffer the frequency it calculates and does a re-layout of components. This is useful for heavy containers or containers with a large amount of sub components that frequent calls to layout are expensive. ]]></description>
		</attribute>
		<attribute>
			<name>defaultType</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[defaultType : String
The default type of container represented by this object as registered in Ext.ComponentMgr (defaults to 'panel'). ]]></description>
		</attribute>
		<attribute>
			<name>defaults</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[defaults : Object
A config object that will be applied to all components added to this container either via the items config or via the add or insert methods. The defaults config can contain any number of name/value property pairs to be added to each item, and should be valid for the types of items being added to the container. For example, to automatically apply padding to the body of each of a set of contained Ext.Panel items, you could pass: defaults: {bodyStyle:'padding:15px'}. ]]></description>
		</attribute>
		<attribute>
			<name>hideBorders</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideBorders : Boolean
True to hide the borders of each contained component, false to defer to the component's existing border settings (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>items</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[items : Mixed
A single item, or an array of child Components to be added to this container. Each item can be any type of object based on Ext.Component.Component config objects may also be specified in order to avoid the overhead of constructing a real Component object if lazy rendering might mean that the added Component will not be rendered immediately. To take advantage of this 'lazy instantiation', set the Ext.Component.xtype config property to the registered type of the Component wanted.For a list of all available xtypes, see Ext.Component. If a single item is being passed, it should be passed directly as an object reference (e.g., items: {...}). Multiple items should be passed as an array of objects (e.g., items: [{...}, {...}]). ]]></description>
		</attribute>
		<attribute>
			<name>layoutConfig</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[layoutConfig : Object
This is a config object containing properties specific to the chosen layout (to be used in conjunction with the layout config value). For complete details regarding the valid config options for each layout type, see the layout class corresponding to the type specified:Ext.layout.Accordion Ext.layout.AnchorLayoutExt.layout.BorderLayout Ext.layout.CardLayout Ext.layout.ColumnLayoutExt.layout.FitLayout Ext.layout.FormLayout Ext.layout.TableLayout]]></description>
		</attribute>
		<attribute>
			<name>monitorResize</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[monitorResize : Boolean
True to automatically monitor window resize events to handle anything that is sensitive to the current size of the viewport. This value is typically managed by the chosen layout and should not need to be set manually. ]]></description>
		</attribute>
		<attribute>
			<name>layout</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[layout : String
The layout type to be used in this container. If not specified, a default Ext.layout.ContainerLayout will be created and used. Valid values are: accordion, anchor, border, card, column, fit, form and table. Specific config values for the chosen layout type can be specified using layoutConfig. ]]></description>
		</attribute>
		<attribute>
			<name>autoHeight</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoHeight : Boolean
True to use height:'auto', false to use fixed height (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>autoWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoWidth : Boolean
True to use width:'auto', false to use fixed width (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>height</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[height : Number
The height of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>width</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[width : Number
The width of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>gridView</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.grid.GridView
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[This class encapsulates the user interface of an Ext.grid.GridPanel. Methods of this class may be used to access user interface elements to enable special display effects. Do not change the DOM structure of the user interface.This class does not provide ways to manipulate the underlying data. The data model of a Grid is held in an Ext.data.Store.]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>emptyText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[emptyText : StringDefault text to display in the grid body when no rows are available (defaults to ''). ]]></description>
		</attribute>
		<attribute>
			<name>autoFill</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoFill : BooleanTrue to auto expand the columns to fit the grid when the grid is created. ]]></description>
		</attribute>
		<attribute>
			<name>enableRowBody</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enableRowBody : Boolean True to add a second TR element per row that can be used to provide a row body that spans beneath the data row. Use the getRowClass method's rowParams config to customize the row body. ]]></description>
		</attribute>
		<attribute>
			<name>forceFit</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[forceFit : BooleanTrue to auto expand/contract the size of the columns to fit the grid width and prevent horizontal scrolling. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>groupingView</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.grid.GroupingView
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Adds the ability for single level grouping to the grid.var grid = new Ext.grid.GridPanel({// A groupingStore is required for a GroupingViewstore: new Ext.data.GroupingStore({    reader: reader,    data: xg.dummyData,    sortInfo:{field: 'company', direction: 'ASC'},    groupField:'industry'}),columns: [    {id:'company',header: 'Company', width: 60, sortable: true, dataIndex: 'company'},    {header: 'Price', width: 20, sortable: true, renderer: Ext.util.Format.usMoney, dataIndex: 'price'},    {header: 'Change', width: 20, sortable: true, dataIndex: 'change', renderer: Ext.util.Format.usMoney},    {header: 'Industry', width: 20, sortable: true, dataIndex: 'industry'},    {header: 'Last Updated', width: 20, sortable: true, renderer: Ext.util.Format.dateRenderer('m/d/Y'), dataIndex: 'lastChange'}],view: new Ext.grid.GroupingView({    forceFit:true,    // custom grouping text template to display the number of items per group    groupTextTpl: '{text} ({[values.rs.length]} {[values.rs.length > 1 ? 'Items' : 'Item']})'}),frame:true,width: 700,height: 450,collapsible: true,animCollapse: false,title: 'Grouping Example',iconCls: 'icon-grid',renderTo: document.body});]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>emptyGroupText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[emptyText : StringDefault text to display in the grid body when no rows are available (defaults to ''). ]]></description>
		</attribute>
		<attribute>
			<name>enableGrouping</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enableGrouping : BooleanFalse to disable grouping functionality (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>enableGroupingMenu</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enableGroupingMenu : Boolean True to enable the grouping control in the column menu ]]></description>
		</attribute>
		<attribute>
			<name>enableNoGroups</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enableNoGroups : BooleanTrue to allow the user to turn off grouping ]]></description>
		</attribute>
		<attribute>
			<name>groupByText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[groupByText : StringText displayed in the grid header menu for grouping by a column (defaults to 'Group By This Field'). ]]></description>
		</attribute>
		<attribute>
			<name>groupTextTpl</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[groupTextTpl : StringThe template used to render the group text ]]></description>
		</attribute>
		<attribute>
			<name>hideGroupedColumn</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideGroupedColumn : BooleanTrue to hide the column that is currently grouped ]]></description>
		</attribute>
		<attribute>
			<name>ignoreAdd</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[ignoreAdd : BooleanTrue to skip refreshing the view when new rows are added (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>showGroupName</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[showGroupName : BooleanTrue to display the name for each set of grouped rows (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>showGroupsText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[showGroupsText : StringText displayed in the grid header for enabling/disabling grouping (defaults to 'Show in Groups'). ]]></description>
		</attribute>
		<attribute>
			<name>startCollapsed</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[startCollapsed : BooleanTrue to start all groups collapsed ]]></description>
		</attribute>
		<attribute>
			<name>emptyText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[emptyText : StringDefault text to display in the grid body when no rows are available (defaults to ''). ]]></description>
		</attribute>
		<attribute>
			<name>autoFill</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoFill : BooleanTrue to auto expand the columns to fit the grid when the grid is created. ]]></description>
		</attribute>
		<attribute>
			<name>enableRowBody</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enableRowBody : Boolean True to add a second TR element per row that can be used to provide a row body that spans beneath the data row. Use the getRowClass method's rowParams config to customize the row body. ]]></description>
		</attribute>
		<attribute>
			<name>forceFit</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[forceFit : BooleanTrue to auto expand/contract the size of the columns to fit the grid width and prevent horizontal scrolling. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>modificationAction</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.grid.ModificationAction
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>columns</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[Action submit columns, separator is comma.]]></description>
		</attribute>
		<attribute>
			<name>name</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>scope</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[scope : ObjectThe scope in which to call the callback functions (The this reference for the callback functions). ]]></description>
		</attribute>
		<attribute>
			<name>url</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[url : StringThe URL that the Action is to invoke.]]></description>
		</attribute>
		<attribute>
			<name>success</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[success : Function The function to call when a valid success return packet is recieved. The function is passed the following parameters:...The function to call when a valid success return packet is recieved. The function is passed the following parameters:form : Ext.form.BasicFormThe form that requested the actionaction : Ext.form.ActionThe Action class. The result property of this object may be examined to perform custom postprocessing.]]></description>
		</attribute>
		<attribute>
			<name>failure</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[failure : FunctionThe function to call when a failure packet was recieved, or when an error ocurred in the Ajax communication. The func...The function to call when a failure packet was recieved, or when an error ocurred in the Ajax communication. The function is passed the following parameters:form : Ext.form.BasicFormThe form that requested the actionaction : Ext.form.ActionThe Action class. If an Ajax error ocurred, the failure type will be in failureType. The result property of this object may be examined to perform custom postprocessing.]]></description>
		</attribute>
		<attribute>
			<name>waitMsg</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[waitMsg : StringThe message to be displayed by a call to Ext.MessageBox.wait during the time the action is being processed. ]]></description>
		</attribute>
		<attribute>
			<name>waitTitle</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[waitTitle : StringThe title to be displayed by a call to Ext.MessageBox.wait during the time the action is being processed. ]]></description>
		</attribute>
		<attribute>
			<name>method</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[method : String The HTTP method to use to access the requested URL. Defaults to the Ext.form.BasicForm's method, or if that is not specified, the underlying DOM form's method. ]]></description>
		</attribute>
		<attribute>
			<name>params</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[params : Mixed Extra parameter values to pass. These are added to the Form's Ext.form.BasicForm.baseParams and passed to the specified URL along with the Form's input fields. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>propertyColumnModel</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.grid.PropertyColumnModel
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[A custom column model for the Ext.grid.PropertyGrid. Generally it should not need to be used directly. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
(optional) Defaults to the column's initial ordinal position. A name which identifies this column. The id is used to create a CSS class name which is applied to all table cells (including headers) in that column. The class name takes the form ofx-grid3-td-idHeader cells will also recieve this class name, but will also have the class x-grid3-hd]]></description>
		</attribute>
		<attribute>
			<name>header</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[header : String
The header text to display in the Grid view. ]]></description>
		</attribute>
		<attribute>
			<name>sortable</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[sortable : Boolean
(optional) True if sorting is to be allowed on this column. Defaults to the value of the defaultSortable property. Whether local/remote sorting is used is specified in Ext.data.Store.remoteSort]]></description>
		</attribute>
		<attribute>
			<name>align</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[align : String
(optional) Set the CSS text-align property of the column. Defaults to undefined. ]]></description>
		</attribute>
		<attribute>
			<name>dataIndex</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[dataIndex : String
(optional) The name of the field in the grid's Ext.data.Store's Ext.data.Record definition from which to draw the column's value. If not specified, the column's index is used as an index into the Record's data Array. ]]></description>
		</attribute>
		<attribute>
			<name>fixed</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[fixed : Boolean
(optional) True if the column width cannot be changed. Defaults to false. ]]></description>
		</attribute>
		<attribute>
			<name>hideable</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideable : Boolean
(optional) Specify as false to prevent the user from hiding this column. Defaults to true. ]]></description>
		</attribute>
		<attribute>
			<name>resizable</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[resizable : Boolean
(optional) False to disable column resizing. Defaults to true. ]]></description>
		</attribute>
		<attribute>
			<name>width</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[width : Number
(optional) The initial width in pixels of the column. Using this instead of Ext.grid.Grid.autoSizeColumns is more efficient. ]]></description>
		</attribute>
		<attribute>
			<name>editor</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[editor : Ext.form.Field
(optional) The Ext.form.Field to use when editing values in this column if editing is supported by the grid. ]]></description>
		</attribute>
		<attribute>
			<name>renderer</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderer : Function
(optional) A function used to generate HTML markup for a cell given the cell's data value. See setRenderer. If not specified, the default renderer uses the raw data value. ]]></description>
		</attribute>
		<attribute>
			<name>hidden</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hidden : Boolean
(optional) True to hide the column. Defaults to false. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>propertyGrid</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.grid.PropertyGrid
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[A specialized grid implementation intended to mimic the traditional property grid as typically seen in development IDEs. Each row in the grid represents a property of some object, and the data is stored as a set of name/value pairs in Ext.grid.PropertyRecords. Example usage: var grid = new Ext.grid.PropertyGrid({title: 'Properties Grid',autoHeight: true,width: 300,renderTo: 'grid-ct',source: {    '(name)': 'My Object',    'Created': new Date(Date.parse('10/15/2006')),    'Available': false,    'Version': .01,    'Description': 'A test object'	}});]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>customEditors</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[An object containing name/value pairs of custom editor type definitions that allow the grid to support additional types of editable fields. By default, the grid supports strongly-typed editing of strings, dates, numbers and booleans using built-in form editors, but any custom type can be supported and associated with a custom input control by specifying a custom editor. The name of the editor type should correspond with the name of the property that will use the editor. Example usage:var grid = new Ext.grid.PropertyGrid({   ...   customEditors: {        'Start Time': new Ext.grid.GridEditor(new Ext.form.TimeField({selectOnFocus:true}))   },   source: {       'Start Time': '10:00 AM'   }});]]></description>
		</attribute>
		<attribute>
			<name>source</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[source : ObjectA data object to use as the data source of the grid (see setSource for details). ]]></description>
		</attribute>
		<attribute>
			<name>clicksToEdit</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[clicksToEdit : NumberThe number of clicks on a cell required to display the cell's editor (defaults to 2) ]]></description>
		</attribute>
		<attribute>
			<name>store</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[store : Ext.data.StoreThe Ext.data.Store the grid should use as its data source (required). ]]></description>
		</attribute>
		<attribute>
			<name>maxHeight</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[maxHeight : NumberSets the maximum height of the grid - ignored if autoHeight is not on. ]]></description>
		</attribute>
		<attribute>
			<name>autoExpandColumn</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[autoExpandColumn : StringThe id of a column in this grid that should expand to fill unused space. This id can not be 0. ]]></description>
		</attribute>
		<attribute>
			<name>autoExpandMax</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[autoExpandMax : NumberThe maximum width the autoExpandColumn can have (if enabled). Defaults to 1000. ]]></description>
		</attribute>
		<attribute>
			<name>autoExpandMin</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[autoExpandMin : NumberThe minimum width the autoExpandColumn can have (if enabled). defaults to 50. ]]></description>
		</attribute>
		<attribute>
			<name>cm</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cm : ObjectShorthand for colModel. ]]></description>
		</attribute>
		<attribute>
			<name>colModel</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[colModel : ObjectThe Ext.grid.ColumnModel to use when rendering the grid (required). ]]></description>
		</attribute>
		<attribute>
			<name>disableSelection</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[disableSelection : BooleanTrue to disable selections in the grid (defaults to false). - ignored a SelectionModel is specified ]]></description>
		</attribute>
		<attribute>
			<name>enableColumnHide</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enableColumnHide : BooleanTrue to enable hiding of columns with the header context menu. ]]></description>
		</attribute>
		<attribute>
			<name>enableColumnMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enableColumnMove : BooleanTrue to enable drag and drop reorder of columns. ]]></description>
		</attribute>
		<attribute>
			<name>enableColumnResize</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enableColumnResize : BooleanFalse to turn off column resizing for the whole grid (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>enableDragDrop</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enableDragDrop : BooleanTrue to enable drag and drop of rows. ]]></description>
		</attribute>
		<attribute>
			<name>enableHdMenu</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enableHdMenu : BooleanTrue to enable the drop down button for menu in the headers. ]]></description>
		</attribute>
		<attribute>
			<name>enableRowHeightSync</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enableRowHeightSync : BooleanTrue to manually sync row heights across locked and not locked rows. ]]></description>
		</attribute>
		<attribute>
			<name>loadMask</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[loadMask : ObjectAn Ext.LoadMask config or true to mask the grid while loading (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>minColumnWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[minColumnWidth : NumberThe minimum width a column can be resized to. Defaults to 25. ]]></description>
		</attribute>
		<attribute>
			<name>monitorWindowResize</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[monitorWindowResize : BooleanTrue to autoSize the grid when the window resizes. Defaults to true. ]]></description>
		</attribute>
		<attribute>
			<name>selModel</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[selModel : Object Any subclass of AbstractSelectionModel that will provide the selection model for the grid (defaults to Ext.grid.RowSelectionModel if not specified). ]]></description>
		</attribute>
		<attribute>
			<name>sm</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[sm : ObjectShorthand for selModel. ]]></description>
		</attribute>
		<attribute>
			<name>stripeRows</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[stripeRows : BooleanTrue to stripe the rows. Default is false. ]]></description>
		</attribute>
		<attribute>
			<name>trackMouseOver</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[trackMouseOver : BooleanTrue to highlight rows when the mouse is over. Default is true. ]]></description>
		</attribute>
		<attribute>
			<name>viewConfig</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[viewConfig : ObjectA config object that will be applied to the grid's UI view. Any of the config options available for Ext.grid.GridView can be specified here. ]]></description>
		</attribute>
		<attribute>
			<name>view</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[view : ObjectThe Ext.grid.GridView used by the grid. This can be set before a call to render(). ]]></description>
		</attribute>
		<attribute>
			<name>columns</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[columns : ArrayAn array of columns to auto create a ColumnModel ]]></description>
		</attribute>
		<attribute>
			<name>iconCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[iconCls : String
A CSS class that will provide a background image to be used as the panel header icon (defaults to ''). ]]></description>
		</attribute>
		<attribute>
			<name>shadow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[minButtonWidth : Number
Minimum width in pixels of all buttons in this panel (defaults to 75) ]]></description>
		</attribute>
		<attribute>
			<name>shadowOffset</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[shadowOffset : Number
The number of pixels to offset the shadow if displayed (defaults to 4). Note that this option only applies when floating = true. ]]></description>
		</attribute>
		<attribute>
			<name>shim</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[shim : Boolean
False to disable the iframe shim in browsers which need one (defaults to true). Note that this option only applies when floating = true. ]]></description>
		</attribute>
		<attribute>
			<name>animCollapse</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[animCollapse : Boolean
True to animate the transition when the panel is collapsed, false to skip the animation (defaults to true if the Ext.Fx class is available, otherwise false). ]]></description>
		</attribute>
		<attribute>
			<name>autoLoad</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[autoLoad : Object/String/Function
A valid url spec according to the Updater Ext.Updater.update method. If autoLoad is not null, the panel will attempt to load its contents immediately upon render.The URL will become the default URL for this panel's body element, so it may be refreshed at any time.]]></description>
		</attribute>
		<attribute>
			<name>autoScroll</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoScroll : Boolean
True to use overflow:'auto' on the panel's body element and show scroll bars automatically when necessary, false to clip any overflowing content (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>baseCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[baseCls : String
The base CSS class to apply to this panel's element (defaults to 'x-panel').]]></description>
		</attribute>
		<attribute>
			<name>bbar</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[bbar : Object/Array
The bottom toolbar of the panel. This can be a Ext.Toolbar object, a toolbar config, or an array of buttons/button configs to be added to the toolbar. Note that this is not available as a property after render. To access the bottom toolbar after render, use getBottomToolbar. ]]></description>
		</attribute>
		<attribute>
			<name>bodyBorder</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[bodyBorder : Boolean
True to display an interior border on the body element of the panel, false to hide it (defaults to true). This only applies when border == true. If border == true and bodyBorder == false, the border will display as a 1px wide inset border, giving the entire body element an inset appearance. ]]></description>
		</attribute>
		<attribute>
			<name>bodyStyle</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[bodyStyle : String/Object/Function
Custom CSS styles to be applied to the body element in the format expected by Ext.Element.applyStyles (defaults to null). ]]></description>
		</attribute>
		<attribute>
			<name>buttonAlign</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[buttonAlign : String
The alignment of any buttons added to this panel. Valid values are 'right,' 'left' and 'center' (defaults to 'right'). ]]></description>
		</attribute>
		<attribute>
			<name>buttons</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[buttons : Array
An array of Ext.Button configs used to add buttons to the footer of this panel. ]]></description>
		</attribute>
		<attribute>
			<name>collapseFirst</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[collapseFirst : Boolean
True to make sure the collapse/expand toggle button always renders first (to the left of) any other tools in the panel's title bar, false to render it last (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>collapsed</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[collapsed : Boolean
True to render the panel collapsed, false to render it expanded (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>collapsedCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[collapsedCls : String
A CSS class to add to the panel's element after it has been collapsed (defaults to 'x-panel-collapsed'). ]]></description>
		</attribute>
		<attribute>
			<name>collapsible</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[collapsible : Boolean
True to make the panel collapsible and have the expand/collapse toggle button automatically rendered into the header tool button area, false to keep the panel statically sized with no button (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>contentEl</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[contentEl : String
The id of an existing HTML node to use as the panel's body content (defaults to ''). ]]></description>
		</attribute>
		<attribute>
			<name>draggable</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[draggable : Boolean
True to enable dragging of this Panel (defaults to false). For custom drag/drop implementations, an Ext.Panel.DD config could also be passed in this config instead of true, although Ext.Panel.DD is an internal, undocumented class]]></description>
		</attribute>
		<attribute>
			<name>elements</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[elements : String
A comma-delimited list of panel elements to initialize when the panel is rendered. Normally, this list will be generated automatically based on the items added to the panel at config time, but sometimes it might be useful to make sure a structural element is rendered even if not specified at config time (for example, you may want to add a button or toolbar dynamically after the panel has been rendered). Adding those elements to this list will allocate the required placeholders in the panel when it is rendered. Valid values areheader tbar (top bar)body bbar (bottom bar)footer Defaults to 'body'. ]]></description>
		</attribute>
		<attribute>
			<name>footer</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[footer : Boolean
True to create the footer element explicitly, false to skip creating it. By default, when footer is not specified, if one or more buttons have been added to the panel the footer will be created automatically, otherwise it will not. ]]></description>
		</attribute>
		<attribute>
			<name>header</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[header : Boolean
True to create the header element explicitly, false to skip creating it. By default, when header is not specified, if a title is set the header will be created automatically, otherwise it will not. If a title is set but header is explicitly set to false, the header will not be rendered. ]]></description>
		</attribute>
		<attribute>
			<name>headerAsText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[headerAsText : Boolean
True to display the panel title in the header, false to hide it (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>hideCollapseTool</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideCollapseTool : Boolean
True to hide the expand/collapse toggle button when collapsible = true, false to display it (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>html</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[html : String/Object
An HTML fragment, or a DomHelper specification to use as the panel's body content (defaults to ''). ]]></description>
		</attribute>
		<attribute>
			<name>keys</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[keys : Object/Array
A KeyMap config object (in the format expected by Ext.KeyMap.addBinding used to assign custom key handling to this panel (defaults to null). ]]></description>
		</attribute>
		<attribute>
			<name>maskDisabled</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[maskDisabled : Boolean
True to mask the panel when it is disabled, false to not mask it (defaults to true). Either way, the panel will always tell its contained elements to disable themselves when it is disabled, but masking the panel can provide an additional visual cue that the panel is disabled. ]]></description>
		</attribute>
		<attribute>
			<name>minButtonWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>tbar</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tbar : Object/Array
The top toolbar of the panel. This can be either an Ext.Toolbar object or an array of buttons/button configs to be added to the toolbar. Note that this is not available as a property after render. To access the top toolbar after render, use getTopToolbar. ]]></description>
		</attribute>
		<attribute>
			<name>titleCollapse</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[titleCollapse : Boolean
True to allow expanding and collapsing the panel (when collapsible = true) by clicking anywhere in the header bar, false to allow it only by clicking to tool button (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>tools</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tools : Array
An array of tool button configs to be added to the header tool area. Each tool config may contain the following properties:id : String Required. The type of tool to create. Values may betoggle (Created by default when collapsible is true)close minimizemaximize restore gear pin unpin right left up downrefreshminus plus help searchsave handler : FunctionRequired. The function to call when clicked. Arguments passed are:event : Ext.EventObject The click event.toolEl : Ext.ElementThe tool Element.Panel : Ext.Panel The host Panelscope : Object The scope in which to call the handler.qtip : String/Object A tip string, or a config argument to Ext.QuickTip.registerhidden : Boolean True to initially render hidden.on : Object A listener config object specifiying event listeners in the format of an argument to addListenerExample usage: tools:[{    id:'refresh',    // hidden:true,    handler: function(event, toolEl, panel){        // refresh logic    }}]Note that apart from the toggle tool which is provided when a panel is collapsible, these tools only provide the visual button. Any required functionality must be provided by adding handlers that implement the necessary behavior. ]]></description>
		</attribute>
		<attribute>
			<name>region</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>title</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[title : String
The title text to display in the panel header (defaults to ''). When a title is specified the header element will automatically be created and displayed unless header is explicitly set to false. If you don't want to specify a title at config time, but you may want one later, you must either specify a non-empty title (a blank space ' ' will do) or header:true so that the container element will get created. ]]></description>
		</attribute>
		<attribute>
			<name>frame</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[frame : Boolean
True to render the panel with custom rounded borders, false to render with plain 1px square borders (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>border</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[border : Boolean
True to display the borders of the panel's body element, false to hide them (defaults to true). By default, the border is a 2px wide inset border, but this can be further altered by setting bodyBorder to false. ]]></description>
		</attribute>
		<attribute>
			<name>floating</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[floating : Boolean
True to float the panel (absolute position it with automatic shimming and shadow), false to display it inline where it is rendered (defaults to false). Note that by default, setting floating to true will cause the panel to display at negative offsets so that it is hidden -- because the panel is absolute positioned, the position must be set explicitly after render (e.g., myPanel.setPosition(100,100);). Also, when floating a panel you should always assign a fixed width, otherwise it will be auto width and will expand to fill to the right edge of the viewport. ]]></description>
		</attribute>
		<attribute>
			<name>activeItem</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[activeItem : String/Number
A string component id or the numeric index of the component that should be initially activated within the container's layout on render. For example, activeItem: 'item-1' or activeItem: 0 (index 0 = the first item in the container's collection). activeItem only applies to layout styles that can display items one at a time (like Ext.layout.Accordion, Ext.layout.CardLayout and Ext.layout.FitLayout). Related to Ext.layout.ContainerLayout.activeItem. ]]></description>
		</attribute>
		<attribute>
			<name>autoDestroy</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoDestroy : BooleanIf true the container will automatically destroy any contained component that is removed from it, else destruction must be handled manually (defaults to true).]]></description>
		</attribute>
		<attribute>
			<name>bufferResize</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[bufferResize : Boolean/Number
When set to true (100 milliseconds) or a number of milliseconds, the layout assigned for this container will buffer the frequency it calculates and does a re-layout of components. This is useful for heavy containers or containers with a large amount of sub components that frequent calls to layout are expensive. ]]></description>
		</attribute>
		<attribute>
			<name>defaultType</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[defaultType : String
The default type of container represented by this object as registered in Ext.ComponentMgr (defaults to 'panel'). ]]></description>
		</attribute>
		<attribute>
			<name>defaults</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[defaults : Object
A config object that will be applied to all components added to this container either via the items config or via the add or insert methods. The defaults config can contain any number of name/value property pairs to be added to each item, and should be valid for the types of items being added to the container. For example, to automatically apply padding to the body of each of a set of contained Ext.Panel items, you could pass: defaults: {bodyStyle:'padding:15px'}. ]]></description>
		</attribute>
		<attribute>
			<name>hideBorders</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideBorders : Boolean
True to hide the borders of each contained component, false to defer to the component's existing border settings (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>items</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[items : Mixed
A single item, or an array of child Components to be added to this container. Each item can be any type of object based on Ext.Component.Component config objects may also be specified in order to avoid the overhead of constructing a real Component object if lazy rendering might mean that the added Component will not be rendered immediately. To take advantage of this 'lazy instantiation', set the Ext.Component.xtype config property to the registered type of the Component wanted.For a list of all available xtypes, see Ext.Component. If a single item is being passed, it should be passed directly as an object reference (e.g., items: {...}). Multiple items should be passed as an array of objects (e.g., items: [{...}, {...}]). ]]></description>
		</attribute>
		<attribute>
			<name>layoutConfig</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[layoutConfig : Object
This is a config object containing properties specific to the chosen layout (to be used in conjunction with the layout config value). For complete details regarding the valid config options for each layout type, see the layout class corresponding to the type specified:Ext.layout.Accordion Ext.layout.AnchorLayoutExt.layout.BorderLayout Ext.layout.CardLayout Ext.layout.ColumnLayoutExt.layout.FitLayout Ext.layout.FormLayout Ext.layout.TableLayout]]></description>
		</attribute>
		<attribute>
			<name>monitorResize</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[monitorResize : Boolean
True to automatically monitor window resize events to handle anything that is sensitive to the current size of the viewport. This value is typically managed by the chosen layout and should not need to be set manually. ]]></description>
		</attribute>
		<attribute>
			<name>layout</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[layout : String
The layout type to be used in this container. If not specified, a default Ext.layout.ContainerLayout will be created and used. Valid values are: accordion, anchor, border, card, column, fit, form and table. Specific config values for the chosen layout type can be specified using layoutConfig. ]]></description>
		</attribute>
		<attribute>
			<name>autoHeight</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoHeight : Boolean
True to use height:'auto', false to use fixed height (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>autoWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoWidth : Boolean
True to use width:'auto', false to use fixed width (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>height</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[height : Number
The height of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>width</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[width : Number
The width of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>propertyRecord</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.grid.PropertyRecord
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[A specific Ext.data.Record type that represents a name/value pair and is made to work with the Ext.grid.PropertyGrid. Typically, PropertyRecords do not need to be created directly as they can be created implicitly by simply using the appropriate data configs either via the Ext.grid.PropertyGrid.source config property or by calling Ext.grid.PropertyGrid.setSource. However, if the need arises, these records can also be created explicitly as shwon below. Example usage:var rec = new Ext.grid.PropertyRecord({    name: 'Birthday',    value: new Date(Date.parse('05/26/1972'))});// Add record to an already populated gridgrid.store.addSorted(rec);]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>propertyStore</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.grid.PropertyStore
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[A custom wrapper for the Ext.grid.PropertyGrid's Ext.data.Store. This class handles the mapping between the custom data source objects supported by the grid and the Ext.grid.PropertyRecord format required for compatibility with the underlying store. Generally this class should not need to be used directly -- the grid's data should be accessed from the underlying store via the store property. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>rowNumberer</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.grid.RowNumberer
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[This is a utility class that can be passed into a Ext.grid.ColumnModel as a column config that provides an automatic row numbering column.Usage:// This is a typical column config with the first column providing row numbers var colModel = new Ext.grid.ColumnModel([    new Ext.grid.RowNumberer(),    {header: 'Name', width: 80, sortable: true},    {header: 'Code', width: 50, sortable: true},    {header: 'Description', width: 200, sortable: true} ]);]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>header</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[header : String
Any valid text or HTML fragment to display in the header cell for the row number column (defaults to ''). ]]></description>
		</attribute>
		<attribute>
			<name>sortable</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[sortable : Boolean
True if the row number column is sortable (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>width</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[width : Number
The default width in pixels of the row number column (defaults to 23). ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>rowSelectionModel</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.grid.RowSelectionModel
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[The default SelectionModel used by Ext.grid.Grid. It supports multiple selections and keyboard selection/navigation. The objects stored as selections and returned by getSelected, and getSelections are the Records which provide the data for the selected rows. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>singleSelect</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[singleSelect : Boolean, True to allow selection of only one row at a time (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>selectRow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[selectRow : Function, on row selected.]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>selectionAction</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.grid.SelectionAction
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>columns</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[Action submit columns, separator is comma.]]></description>
		</attribute>
		<attribute>
			<name>name</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>scope</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[scope : ObjectThe scope in which to call the callback functions (The this reference for the callback functions). ]]></description>
		</attribute>
		<attribute>
			<name>url</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[url : StringThe URL that the Action is to invoke.]]></description>
		</attribute>
		<attribute>
			<name>success</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[success : Function The function to call when a valid success return packet is recieved. The function is passed the following parameters:...The function to call when a valid success return packet is recieved. The function is passed the following parameters:form : Ext.form.BasicFormThe form that requested the actionaction : Ext.form.ActionThe Action class. The result property of this object may be examined to perform custom postprocessing.]]></description>
		</attribute>
		<attribute>
			<name>failure</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[failure : FunctionThe function to call when a failure packet was recieved, or when an error ocurred in the Ajax communication. The func...The function to call when a failure packet was recieved, or when an error ocurred in the Ajax communication. The function is passed the following parameters:form : Ext.form.BasicFormThe form that requested the actionaction : Ext.form.ActionThe Action class. If an Ajax error ocurred, the failure type will be in failureType. The result property of this object may be examined to perform custom postprocessing.]]></description>
		</attribute>
		<attribute>
			<name>waitMsg</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[waitMsg : StringThe message to be displayed by a call to Ext.MessageBox.wait during the time the action is being processed. ]]></description>
		</attribute>
		<attribute>
			<name>waitTitle</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[waitTitle : StringThe title to be displayed by a call to Ext.MessageBox.wait during the time the action is being processed. ]]></description>
		</attribute>
		<attribute>
			<name>method</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[method : String The HTTP method to use to access the requested URL. Defaults to the Ext.form.BasicForm's method, or if that is not specified, the underlying DOM form's method. ]]></description>
		</attribute>
		<attribute>
			<name>params</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[params : Mixed Extra parameter values to pass. These are added to the Form's Ext.form.BasicForm.baseParams and passed to the specified URL along with the Form's input fields. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>synchronizationAction</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.grid.SynchronizationAction
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>columns</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[Action submit columns, separator is comma.]]></description>
		</attribute>
		<attribute>
			<name>name</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>scope</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[scope : ObjectThe scope in which to call the callback functions (The this reference for the callback functions). ]]></description>
		</attribute>
		<attribute>
			<name>url</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[url : StringThe URL that the Action is to invoke.]]></description>
		</attribute>
		<attribute>
			<name>success</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[success : Function The function to call when a valid success return packet is recieved. The function is passed the following parameters:...The function to call when a valid success return packet is recieved. The function is passed the following parameters:form : Ext.form.BasicFormThe form that requested the actionaction : Ext.form.ActionThe Action class. The result property of this object may be examined to perform custom postprocessing.]]></description>
		</attribute>
		<attribute>
			<name>failure</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[failure : FunctionThe function to call when a failure packet was recieved, or when an error ocurred in the Ajax communication. The func...The function to call when a failure packet was recieved, or when an error ocurred in the Ajax communication. The function is passed the following parameters:form : Ext.form.BasicFormThe form that requested the actionaction : Ext.form.ActionThe Action class. If an Ajax error ocurred, the failure type will be in failureType. The result property of this object may be examined to perform custom postprocessing.]]></description>
		</attribute>
		<attribute>
			<name>waitMsg</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[waitMsg : StringThe message to be displayed by a call to Ext.MessageBox.wait during the time the action is being processed. ]]></description>
		</attribute>
		<attribute>
			<name>waitTitle</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[waitTitle : StringThe title to be displayed by a call to Ext.MessageBox.wait during the time the action is being processed. ]]></description>
		</attribute>
		<attribute>
			<name>method</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[method : String The HTTP method to use to access the requested URL. Defaults to the Ext.form.BasicForm's method, or if that is not specified, the underlying DOM form's method. ]]></description>
		</attribute>
		<attribute>
			<name>params</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[params : Mixed Extra parameter values to pass. These are added to the Form's Ext.form.BasicForm.baseParams and passed to the specified URL along with the Form's input fields. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>absoluteLayout</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.layout.AbsoluteLayout
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Inherits the anchoring of Ext.layout.AnchorLayout and adds the ability for x/y positioning using the standard x and y component config options.]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>accordion</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.layout.Accordion
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[This is a layout that contains multiple panels in an expandable accordion style such that only one panel can be open at any given time. Each panel has built-in support for expanding and collapsing. This class is intended to be extended or created via the layout:'accordion' Ext.Container.layout config, and should generally not need to be created directly via the new keyword.Note that when creating a layout via config, the layout-specific config properties must be passed in via the Ext.Container.layoutConfig object which will then be applied internally to the layout. Example usage:		var accordion = new Ext.Panel({    title: 'Accordion Layout',    layout:'accordion',    defaults: {        // applied to each contained panel        bodyStyle: 'padding:15px'    },    layoutConfig: {        // layout-specific configs go here        titleCollapse: false,        animate: true,        activeOnTop: true    }    items: [{        title: 'Panel 1',        html: '<p>Panel content!</p>'    },{        title: 'Panel 2',        html: '<p>Panel content!</p>'    },{        title: 'Panel 3',        html: '<p>Panel content!</p>'    }]});]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>autoWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoWidth : Boolean
True to set each contained item's width to 'auto', false to use the item's current width (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>collapseFirst</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[collapseFirst : Boolean
True to make sure the collapse/expand toggle button always renders first (to the left of) any other tools in the contained panels' title bars, false to render it last (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>hideCollapseTool</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideCollapseTool : Boolean
True to hide the contained panels' collapse/expand toggle buttons, false to display them (defaults to false). When set to true, titleCollapse should be true also. ]]></description>
		</attribute>
		<attribute>
			<name>animate</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[animate : Boolean
True to slide the contained panels open and closed during expand/collapse using animation, false to open and close directly with no animation (defaults to false). Note: to defer to the specific config setting of each contained panel for this property, set this to undefined at the layout level. ]]></description>
		</attribute>
		<attribute>
			<name>activeOnTop</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[activeOnTop : Boolean
 True to swap the position of each panel as it is expanded so that it becomes the first item in the container, false to keep the panels in the rendered order. This is NOT compatible with 'animate:true' (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>fill</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[fill : Boolean
True to adjust the active item's height to fill the available space in the container, false to use the item's current height, or auto height if not explicitly set (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>sequence</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[sequence : Boolean
Experimental. If animate is set to true, this will result in each animation running in sequence. ]]></description>
		</attribute>
		<attribute>
			<name>extraCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[extraCls : String
An optional extra CSS class that will be added to the container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>renderHidden</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[renderHidden : Boolean
True to hide each contained item on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>anchorLayout</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.layout.AnchorLayout
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[This is a layout that enables anchoring of contained elements relative to the container's dimensions. If the container is resized, all anchored items are automatically rerendered according to their anchor rules. This class is intended to be extended or created via the layout:'anchor' Ext.Container.layout config, and should generally not need to be created directly via the new keyword.
AnchorLayout does not have any direct config options (other than inherited ones). However, the container using the AnchorLayout can supply an anchoring-specific config property of anchorSize. By default, AnchorLayout will calculate anchor measurements based on the size of the container itself. However, if anchorSize is specifed, the layout will use it as a virtual container for the purposes of calculating anchor measurements based on it instead, allowing the container to be sized independently of the anchoring logic if necessary.The items added to an AnchorLayout can also supply an anchoring-specific config property of anchor which is a string containing two values: the horizontal anchor value and the vertical anchor value (for example, '100% 50%'). This value is what tells the layout how the item should be anchored to the container. The following types of anchor values are supported: Percentage: Any value between 1 and 100, expressed as a percentage. The first anchor is the percentage width that the item should take up within the container, and the second is the percentage height. Example: '100% 50%' would render an item the complete width of the container and 1/2 its height. If only one anchor value is supplied it is assumed to be the width value and the height will default to auto.Offsets: Any positive or negative integer value. The first anchor is the offset from the right edge of the container, and the second is the offset from the bottom edge. Example: '-50 -100' would render an item the complete width of the container minus 50 pixels and the complete height minus 100 pixels. If only one anchor value is supplied it is assumed to be the right offset value and the bottom offset will default to 0.Sides: Valid values are 'right' (or 'r') and 'bottom' (or 'b'). Either the container must have a fixed size or an anchorSize config value defined at render time in order for these to have any effect. Anchor values can also be mixed as needed. For example, '-50 75%' would render the width offset from the container right edge by 50 pixels and 75% of the container's height.]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>extraCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[extraCls : String
An optional extra CSS class that will be added to the container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>renderHidden</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[renderHidden : Boolean
True to hide each contained item on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>borderLayout</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.layout.BorderLayout
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[This is a specialized type of BorderLayout region that has a built-in Ext.SplitBar for user resizing of regions. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>extraCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[extraCls : String
An optional extra CSS class that will be added to the container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>renderHidden</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[renderHidden : Boolean
True to hide each contained item on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>cardLayout</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.layout.CardLayout
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[This layout contains multiple panels, each fit to the container, where only a single panel can be visible at any given time. This layout style is most commonly used for wizards, tab implementations, etc. This class is intended to be extended or created via the layout:'card' Ext.Container.layout config, and should generally not need to be created directly via the new keyword.The CardLayout's focal method is setActiveItem. Since only one panel is displayed at a time, the only way to move from one panel to the next is by calling setActiveItem, passing the id or index of the next panel to display. The layout itself does not provide a mechanism for handling this navigation, so that functionality must be provided by the developer.In the following example, a simplistic wizard setup is demonstrated. A button bar is added to the footer of the containing panel to provide navigation buttons. The buttons will be handled by a common navigation routine -- for this example, the implementation of that routine has been ommitted since it can be any type of custom logic. Note that other uses of a CardLayout (like a tab control) would require a completely different implementation. For serious implementations, a better approach would be to extend CardLayout to provide the custom functionality needed. Example usage:var navHandler = function(direction){    // This routine could contain business logic required to manage the navigation steps.    // It would call setActiveItem as needed, manage navigation button state, handle any    // branching logic that might be required, handle alternate actions like cancellation    // or finalization, etc.  A complete wizard implementation could get pretty    // sophisticated depending on the complexity required, and should probably be    // done as a subclass of CardLayout in a real-world implementation.};var card = new Ext.Panel({    title: 'Example Wizard',    layout:'card',    activeItem: 0, // make sure the active item is set on the container config!    bodyStyle: 'padding:15px',    defaults: {        // applied to each contained panel        border:false    },    // just an example of one possible navigation scheme, using buttons    bbar: [        {            id: 'move-prev',            text: 'Back',            handler: navHandler.createDelegate(this, [-1]),            disabled: true        },        '->', // greedy spacer so that the buttons are aligned to each side        {            id: 'move-next',            text: 'Next',            handler: navHandler.createDelegate(this, [1])        }   ],    // the panels (or 'cards') within the layout    items: [{        id: 'card-0',        html: '<h1>Welcome to the Wizard!</h1><p>Step 1 of 3</p>'    },{        id: 'card-1',        html: '<p>Step 2 of 3</p>'    },{       id: 'card-2',        html: '<h1>Congratulations!</h1><p>Step 3 of 3 - Complete</p>'    }]});]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>deferredRender</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>extraCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[extraCls : String
An optional extra CSS class that will be added to the container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>renderHidden</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[renderHidden : Boolean
True to hide each contained item on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>columnLayout</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.layout.ColumnLayout
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[This is the layout style of choice for creating structural layouts in a multi-column format where the width of each column can be specified as a percentage or fixed width, but the height is allowed to vary based on the content. This class is intended to be extended or created via the layout:'column' Ext.Container.layout config, and should generally not need to be created directly via the new keyword.ColumnLayout does not have any direct config options (other than inherited ones), but it does support a specific config property of columnWidth that can be included in the config of any panel added to it. The layout will use the width (if pixels) or columnWidth (if percent) of each panel during layout to determine how to size each panel. If width or columnWidth is not specified for a given panel, its width will default to the panel's width (or auto).The width property is always evaluated as pixels, and must be a number greater than or equal to 1. The columnWidth property is always evaluated as a percentage, and must be a decimal value greater than 0 and less than 1 (e.g., .25).The basic rules for specifying column widths are pretty simple. The logic makes two passes through the set of contained panels. During the first layout pass, all panels that either have a fixed width or none specified (auto) are skipped, but their widths are subtracted from the overall container width. During the second pass, all panels with columnWidths are assigned pixel widths in proportion to their percentages based on the total remaining container width. In other words, percentage width panels are designed to fill the space left over by all the fixed-width or auto-width panels. Because of this, while you can specify any number of columns with different percentages, the columnWidths must always add up to 1 (or 100%) when added together, otherwise your layout may not render as expected. Example usage:// All columns are percentages -- they must add up to 1var p = new Ext.Panel({    title: 'Column Layout - Percentage Only',    layout:'column',    items: [{        title: 'Column 1',        columnWidth: .25     },{        title: 'Column 2',        columnWidth: .6    },{        title: 'Column 3',        columnWidth: .15    }]});// Mix of width and columnWidth -- all columnWidth values values must add// up to 1. The first column will take up exactly 120px, and the last two// columns will fill the remaining container width.var p = new Ext.Panel({    title: 'Column Layout - Mixed',    layout:'column',    items: [{        title: 'Column 1',        width: 120    },{        title: 'Column 2',        columnWidth: .8    },{        title: 'Column 3',        columnWidth: .2    }]});]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>extraCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[extraCls : String
An optional extra CSS class that will be added to the container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>renderHidden</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[renderHidden : Boolean
True to hide each contained item on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>containerLayout</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.layout.ContainerLayout
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Every layout is composed of one or more Ext.Container elements internally, and ContainerLayout provides the basic foundation for all other layout classes in Ext. It is a non-visual class that simply provides the base logic required for a Container to function as a layout. This class is intended to be extended and should generally not need to be created directly via the new keyword. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>extraCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[extraCls : String
An optional extra CSS class that will be added to the container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>renderHidden</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[renderHidden : Boolean
True to hide each contained item on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>fitLayout</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.layout.FitLayout
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[This is a base class for layouts that contain a single item that automatically expands to fill the layout's container. This class is intended to be extended or created via the layout:'fit' Ext.Container.layout config, and should generally not need to be created directly via the new keyword.FitLayout does not have any direct config options (other than inherited ones). To fit a panel to a container using FitLayout, simply set layout:'fit' on the container and add a single panel to it. If the container has multiple panels, only the first one will be displayed. Example usage:var p = new Ext.Panel({    title: 'Fit Layout',    layout:'fit',    items: {        title: 'Inner Panel',        html: '<p>This is the inner panel content</p>',        border: false    }});]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>extraCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[extraCls : String
An optional extra CSS class that will be added to the container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>renderHidden</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[renderHidden : Boolean
True to hide each contained item on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>formLayout</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.layout.FormLayout
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[This is a layout specifically designed for creating forms. This class can be extended or created via the layout:'form' Ext.Container.layout config, and should generally not need to be created directly via the new keyword. However, when used in an application, it will usually be preferrable to use a Ext.form.FormPanel (which automatically uses FormLayout as its layout class) since it also provides built-in functionality for loading, validating and submitting the form.Note that when creating a layout via config, the layout-specific config properties must be passed in via the Ext.Container.layoutConfig object which will then be applied internally to the layout. The container using the FormLayout can also supply the following form-specific config properties which will be applied by the layout: hideLabels: (Boolean) True to hide field labels by default (defaults to false) itemCls: (String) A CSS class to add to the div wrapper that contains each field label and field element (the default class is 'x-form-item' and itemCls will be added to that)labelAlign: (String) The default label alignment. The default value is empty string '' for left alignment, but specifying 'top' will align the labels above the fields. labelPad: (Number) The default padding in pixels for field labels (defaults to 5). labelPad only applies if labelWidth is also specified, otherwise it will be ignored. labelWidth: (Number) The default width in pixels of field labels (defaults to 100) Any type of components can be added to a FormLayout, but items that inherit from Ext.form.Field can also supply the following field-specific config properties:clearCls: (String) The CSS class to apply to the special clearing div rendered directly after each form field wrapper (defaults to 'x-form-clear-left') fieldLabel: (String) The text to display as the label for this field (defaults to '') hideLabel: (Boolean) True to hide the label and separator for this field (defaults to false).itemCls: (String) A CSS class to add to the div wrapper that contains this field label and field element (the default class is 'x-form-item' and itemCls will be added to that). If supplied, itemCls at the field level will override the default itemCls supplied at the container level.labelSeparator: (String) The separator to display after the text of the label for this field (defaults to a colon ':' or the layout's value for labelSeparator). To hide the separator use empty string ''. labelStyle: (String) A CSS style specification string to add to the field label for this field (defaults to '' or the layout's value for labelStyle). Example usage: // Required if showing validation messagesExt.QuickTips.init();// While you can create a basic Panel with layout:'form', practically// you should usually use a FormPanel to also get its form functionality// since it already creates a FormLayout internally.var form = new Ext.form.FormPanel({    labelWidth: 75,    title: 'Form Layout',    bodyStyle:'padding:15px',    width: 350,    labelPad: 10,    defaultType: 'textfield',    defaults: {        // applied to each contained item        width: 230,        msgTarget: 'side'    },    layoutConfig: {        // layout-specific configs go here        labelSeparator: ''    },    items: [{            fieldLabel: 'First Name',           name: 'first',            allowBlank: false        },{            fieldLabel: 'Last Name',            name: 'last'        },{            fieldLabel: 'Company',            name: 'company'        },{            fieldLabel: 'Email',            name: 'email',            vtype:'email'        }    ],    buttons: [{        text: 'Save'    },{        text: 'Cancel'    }]});]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>labelSeparator</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[labelSeparator : String
 The standard separator to display after the text of each form label (defaults to a colon ':'). To turn off separators for all fields in this layout by default specify empty string '' (if the labelSeparator value is explicitly set at the field level, those will still be displayed). ]]></description>
		</attribute>
		<attribute>
			<name>labelStyle</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[labelStyle : String
A CSS style specification string to add to each field label in this layout (defaults to ''). ]]></description>
		</attribute>
		<attribute>
			<name>elementStyle</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[elementStyle : String
 A CSS style specification string to add to each field element in this layout (defaults to ''). ]]></description>
		</attribute>
		<attribute>
			<name>extraCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[extraCls : String
An optional extra CSS class that will be added to the container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>renderHidden</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[renderHidden : Boolean
True to hide each contained item on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>tableLayout</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.layout.TableLayout
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Class Ext.layout.TableLayoutPackage: Ext.layout
Defined In: TableLayout.js Class: TableLayout Extends: ContainerLayout This layout allows you to easily render content into an HTML table. The total number of columns can be specified, and rowspan and colspan can be used to create complex layouts within the table. This class is intended to be extended or created via the layout:'table' Ext.Container.layout config, and should generally not need to be created directly via the new keyword.Note that when creating a layout via config, the layout-specific config properties must be passed in via the Ext.Container.layoutConfig object which will then be applied internally to the layout. In the case of TableLayout, the only valid layout config property is columns. However, the items added to a TableLayout can supply table-specific config properties of rowspan and colspan, as explained below.The basic concept of building up a TableLayout is conceptually very similar to building up a standard HTML table. You simply add each panel (or 'cell') that you want to include along with any span attributes specified as the special config properties of rowspan and colspan which work exactly like their HTML counterparts. Rather than explicitly creating and nesting rows and columns as you would in HTML, you simply specify the total column count in the layoutConfig and start adding panels in their natural order from left to right, top to bottom. The layout will automatically figure out, based on the column count, rowspans and colspans, how to position each panel within the table. Just like with HTML tables, your rowspans and colspans must add up correctly in your overall layout or you'll end up with missing and/or extra cells! Example usage:// This code will generate a layout table that is 3 columns by 2 rows// with some spanning included.  The basic layout will be:// +--------+-----------------+// |   A    |   B             |// |        |--------+--------|// |        |   C    |   D    |// +--------+--------+--------+var table = new Ext.Panel({    title: 'Table Layout',    layout:'table',    defaults: {        // applied to each contained panel        bodyStyle:'padding:20px'    },    layoutConfig: {        // The total column count must be specified here        columns: 3    },    items: [{        html: '<p>Cell A content</p>',        rowspan: 2    },{        html: '<p>Cell B content</p>',        colspan: 2    },{        html: '<p>Cell C content</p>'    },{        html: '<p>Cell D content</p>'    }]});]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>columns</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[columns : Number
The total number of columns to create in the table for this layout. If not specified, all panels added to this layout will be rendered into a single row using a column per panel. ]]></description>
		</attribute>
		<attribute>
			<name>extraCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[extraCls : String
An optional extra CSS class that will be added to the container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>renderHidden</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[renderHidden : Boolean
True to hide each contained item on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>adapter</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.menu.Adapter
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[A base utility class that adapts a non-menu component so that it can be wrapped by a menu item and added to a menu. It provides basic rendering, activation management and enable/disable logic required to work in menus. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>handler</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[handler : Function
A function that will handle the click event of this menu item (defaults to undefined) ]]></description>
		</attribute>
		<attribute>
			<name>scope</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[scope : Object
The scope in which the handler function will be called. ]]></description>
		</attribute>
		<attribute>
			<name>hideDelay</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[hideDelay : Number
Length of time in milliseconds to wait before hiding after a click (defaults to 100) ]]></description>
		</attribute>
		<attribute>
			<name>activeClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[activeClass : String
The CSS class to use when the item becomes activated (defaults to 'x-menu-item-active') ]]></description>
		</attribute>
		<attribute>
			<name>canActivate</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[canActivate : Boolean
True if this item can be visually activated (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>hideOnClick</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideOnClick : Boolean
True to hide the containing menu after this item is clicked (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>baseItem</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.menu.BaseItem
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[The base class for all items that render into menus. BaseItem provides default rendering, activated state management and base configuration options shared by all menu components. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>handler</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[handler : Function
A function that will handle the click event of this menu item (defaults to undefined) ]]></description>
		</attribute>
		<attribute>
			<name>scope</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[scope : Object
The scope in which the handler function will be called. ]]></description>
		</attribute>
		<attribute>
			<name>hideDelay</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[hideDelay : Number
Length of time in milliseconds to wait before hiding after a click (defaults to 100) ]]></description>
		</attribute>
		<attribute>
			<name>activeClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[activeClass : String
The CSS class to use when the item becomes activated (defaults to 'x-menu-item-active') ]]></description>
		</attribute>
		<attribute>
			<name>canActivate</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[canActivate : Boolean
True if this item can be visually activated (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>hideOnClick</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideOnClick : Boolean
True to hide the containing menu after this item is clicked (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>checkItem</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.menu.CheckItem
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Adds a menu item that contains a checkbox by default, but can also be part of a radio group. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>checked</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[checked : Boolean
True to initialize this checkbox as checked (defaults to false). Note that if this checkbox is part of a radio group (group = true) only the last item in the group that is initialized with checked = true will be rendered as checked. ]]></description>
		</attribute>
		<attribute>
			<name>groupClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[groupClass : String
 The default CSS class to use for radio group check items (defaults to 'x-menu-group-item') ]]></description>
		</attribute>
		<attribute>
			<name>group</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[group : String
All check items with the same group name will automatically be grouped into a single-select radio button group (defaults to '') ]]></description>
		</attribute>
		<attribute>
			<name>iconCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>itemCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>showDelay</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>href</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>hrefTarget</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>text</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>icon</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>handler</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[handler : Function
A function that will handle the click event of this menu item (defaults to undefined) ]]></description>
		</attribute>
		<attribute>
			<name>scope</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[scope : Object
The scope in which the handler function will be called. ]]></description>
		</attribute>
		<attribute>
			<name>hideDelay</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[hideDelay : Number
Length of time in milliseconds to wait before hiding after a click (defaults to 100) ]]></description>
		</attribute>
		<attribute>
			<name>activeClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[activeClass : String
The CSS class to use when the item becomes activated (defaults to 'x-menu-item-active') ]]></description>
		</attribute>
		<attribute>
			<name>canActivate</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[canActivate : Boolean
True if this item can be visually activated (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>hideOnClick</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideOnClick : Boolean
True to hide the containing menu after this item is clicked (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>colorItem</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.menu.ColorItem
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[A menu item that wraps the Ext.ColorPalette component. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>handler</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[handler : Function
A function that will handle the click event of this menu item (defaults to undefined) ]]></description>
		</attribute>
		<attribute>
			<name>scope</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[scope : Object
The scope in which the handler function will be called. ]]></description>
		</attribute>
		<attribute>
			<name>hideDelay</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[hideDelay : Number
Length of time in milliseconds to wait before hiding after a click (defaults to 100) ]]></description>
		</attribute>
		<attribute>
			<name>activeClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[activeClass : String
The CSS class to use when the item becomes activated (defaults to 'x-menu-item-active') ]]></description>
		</attribute>
		<attribute>
			<name>canActivate</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[canActivate : Boolean
True if this item can be visually activated (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>hideOnClick</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideOnClick : Boolean
True to hide the containing menu after this item is clicked (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>colorMenu</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.menu.ColorMenu
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[A menu containing a Ext.menu.ColorItem component (which provides a basic color picker). ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>defaults</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[defaults : Object
A config object that will be applied to all items added to this container either via the items config or via the add method. The defaults config can contain any number of name/value property pairs to be added to each item, and should be valid for the types of items being added to the menu. ]]></description>
		</attribute>
		<attribute>
			<name>items</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[items : Mixed
An array of items to be added to this menu. See add for a list of valid item types. ]]></description>
		</attribute>
		<attribute>
			<name>shadow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[shadow : Boolean/String
True or 'sides' for the default effect, 'frame' for 4-way shadow, and 'drop' for bottom-right shadow (defaults to 'sides') ]]></description>
		</attribute>
		<attribute>
			<name>defaultAlign</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[defaultAlign : String
The default {@link Ext.Element#alignTo) anchor position value for this menu relative to its element of origin (defaults to 'tl-bl?') ]]></description>
		</attribute>
		<attribute>
			<name>allowOtherMenus</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowOtherMenus : Boolean
True to allow multiple menus to be displayed at the same time (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>subMenuAlign</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[subMenuAlign : String
The Ext.Element.alignTo anchor position value to use for submenus of this menu (defaults to 'tl-tr?') ]]></description>
		</attribute>
		<attribute>
			<name>minWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[minWidth : Number
The minimum width of the menu in pixels (defaults to 120) ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>dateItem</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.menu.DateItem
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[A menu item that wraps the Ext.DatPicker component.]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>handler</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[handler : Function
A function that will handle the click event of this menu item (defaults to undefined) ]]></description>
		</attribute>
		<attribute>
			<name>scope</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[scope : Object
The scope in which the handler function will be called. ]]></description>
		</attribute>
		<attribute>
			<name>hideDelay</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[hideDelay : Number
Length of time in milliseconds to wait before hiding after a click (defaults to 100) ]]></description>
		</attribute>
		<attribute>
			<name>activeClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[activeClass : String
The CSS class to use when the item becomes activated (defaults to 'x-menu-item-active') ]]></description>
		</attribute>
		<attribute>
			<name>canActivate</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[canActivate : Boolean
True if this item can be visually activated (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>hideOnClick</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideOnClick : Boolean
True to hide the containing menu after this item is clicked (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>dateMenu</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.menu.DateMenu
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[A menu containing a Ext.menu.DateItem component (which provides a date picker). ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>defaults</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[defaults : Object
A config object that will be applied to all items added to this container either via the items config or via the add method. The defaults config can contain any number of name/value property pairs to be added to each item, and should be valid for the types of items being added to the menu. ]]></description>
		</attribute>
		<attribute>
			<name>items</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[items : Mixed
An array of items to be added to this menu. See add for a list of valid item types. ]]></description>
		</attribute>
		<attribute>
			<name>shadow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[shadow : Boolean/String
True or 'sides' for the default effect, 'frame' for 4-way shadow, and 'drop' for bottom-right shadow (defaults to 'sides') ]]></description>
		</attribute>
		<attribute>
			<name>defaultAlign</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[defaultAlign : String
The default {@link Ext.Element#alignTo) anchor position value for this menu relative to its element of origin (defaults to 'tl-bl?') ]]></description>
		</attribute>
		<attribute>
			<name>allowOtherMenus</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowOtherMenus : Boolean
True to allow multiple menus to be displayed at the same time (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>subMenuAlign</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[subMenuAlign : String
The Ext.Element.alignTo anchor position value to use for submenus of this menu (defaults to 'tl-tr?') ]]></description>
		</attribute>
		<attribute>
			<name>minWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[minWidth : Number
The minimum width of the menu in pixels (defaults to 120) ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>item</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.menu.Item
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[A base class for all menu items that require menu-related functionality (like sub-menus) and are not static display items. Item extends the base functionality of Ext.menu.BaseItem by adding menu-specific activation and click handling. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>iconCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>itemCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>showDelay</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>href</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>hrefTarget</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>text</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>icon</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>handler</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[handler : Function
A function that will handle the click event of this menu item (defaults to undefined) ]]></description>
		</attribute>
		<attribute>
			<name>scope</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[scope : Object
The scope in which the handler function will be called. ]]></description>
		</attribute>
		<attribute>
			<name>hideDelay</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[hideDelay : Number
Length of time in milliseconds to wait before hiding after a click (defaults to 100) ]]></description>
		</attribute>
		<attribute>
			<name>activeClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[activeClass : String
The CSS class to use when the item becomes activated (defaults to 'x-menu-item-active') ]]></description>
		</attribute>
		<attribute>
			<name>canActivate</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[canActivate : Boolean
True if this item can be visually activated (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>hideOnClick</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideOnClick : Boolean
True to hide the containing menu after this item is clicked (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>menu</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.menu.Menu
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[A menu object. This is the container to which you add all other menu items. Menu can also serve a as a base class when you want a specialzed menu based off of another component (like Ext.menu.DateMenu for example). ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>defaults</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[defaults : Object
A config object that will be applied to all items added to this container either via the items config or via the add method. The defaults config can contain any number of name/value property pairs to be added to each item, and should be valid for the types of items being added to the menu. ]]></description>
		</attribute>
		<attribute>
			<name>items</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[items : Mixed
An array of items to be added to this menu. See add for a list of valid item types. ]]></description>
		</attribute>
		<attribute>
			<name>shadow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[shadow : Boolean/String
True or 'sides' for the default effect, 'frame' for 4-way shadow, and 'drop' for bottom-right shadow (defaults to 'sides') ]]></description>
		</attribute>
		<attribute>
			<name>defaultAlign</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[defaultAlign : String
The default {@link Ext.Element#alignTo) anchor position value for this menu relative to its element of origin (defaults to 'tl-bl?') ]]></description>
		</attribute>
		<attribute>
			<name>allowOtherMenus</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowOtherMenus : Boolean
True to allow multiple menus to be displayed at the same time (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>subMenuAlign</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[subMenuAlign : String
The Ext.Element.alignTo anchor position value to use for submenus of this menu (defaults to 'tl-tr?') ]]></description>
		</attribute>
		<attribute>
			<name>minWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[minWidth : Number
The minimum width of the menu in pixels (defaults to 120) ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>menuMgr</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.menu.MenuMgr
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Provides a common registry of all menu items on a page so that they can be easily accessed by id.This class is a singleton and cannot be created directly. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>separator</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.menu.Separator
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Adds a separator bar to a menu, used to divide logical groups of menu items. Generally you will add one of these by using '-' in you call to add() or in your items config rather than creating one directly. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>itemCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[itemCls : String The default CSS class to use for separators (defaults to 'x-menu-sep') ]]></description>
		</attribute>
		<attribute>
			<name>handler</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[handler : Function
A function that will handle the click event of this menu item (defaults to undefined) ]]></description>
		</attribute>
		<attribute>
			<name>scope</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[scope : Object
The scope in which the handler function will be called. ]]></description>
		</attribute>
		<attribute>
			<name>hideDelay</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[hideDelay : Number
Length of time in milliseconds to wait before hiding after a click (defaults to 100) ]]></description>
		</attribute>
		<attribute>
			<name>activeClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[activeClass : String
The CSS class to use when the item becomes activated (defaults to 'x-menu-item-active') ]]></description>
		</attribute>
		<attribute>
			<name>canActivate</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[canActivate : Boolean
True if this item can be visually activated (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>hideOnClick</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideOnClick : Boolean
True to hide the containing menu after this item is clicked (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>textItem</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.menu.TextItem
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Adds a static text string to a menu, usually used as either a heading or group separator. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>itemCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[itemCls : String
The default CSS class to use for text items (defaults to 'x-menu-text') ]]></description>
		</attribute>
		<attribute>
			<name>text</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[text : String
The text to display for this item (defaults to '') ]]></description>
		</attribute>
		<attribute>
			<name>handler</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[handler : Function
A function that will handle the click event of this menu item (defaults to undefined) ]]></description>
		</attribute>
		<attribute>
			<name>scope</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[scope : Object
The scope in which the handler function will be called. ]]></description>
		</attribute>
		<attribute>
			<name>hideDelay</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[hideDelay : Number
Length of time in milliseconds to wait before hiding after a click (defaults to 100) ]]></description>
		</attribute>
		<attribute>
			<name>activeClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[activeClass : String
The CSS class to use when the item becomes activated (defaults to 'x-menu-item-active') ]]></description>
		</attribute>
		<attribute>
			<name>canActivate</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[canActivate : Boolean
True if this item can be visually activated (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>hideOnClick</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideOnClick : Boolean
True to hide the containing menu after this item is clicked (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>cookieProvider</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.state.CookieProvider
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[The default Provider implementation which saves state via cookies.Usage: var cp = new Ext.state.CookieProvider({       path: '/cgi-bin/',       expires: new Date(new Date().getTime()+(1000*60*60*24*30)), //30 days       domain: 'extjs.com'   });   Ext.state.Manager.setProvider(cp);]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>domain</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[domain : String
The domain to save the cookie for. Note that you cannot specify a different domain than your page is on, but you can specify a sub-domain, or simply the domain itself like 'extjs.com' to include all sub-domains if you need to access cookies across different sub-domains (defaults to null which uses the same domain the page is running on including the 'www' like 'www.extjs.com') ]]></description>
		</attribute>
		<attribute>
			<name>expires</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[expires : Date
The cookie expiration date (defaults to 7 days from now) ]]></description>
		</attribute>
		<attribute>
			<name>path</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[path : String
The path for which the cookie is active (defaults to root '/' which makes it active for all pages in the site) ]]></description>
		</attribute>
		<attribute>
			<name>secure</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[secure : Boolean
True if the site is using SSL (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>manager</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.state.Manager
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[This is the global state manager. By default all components that are 'state aware' check this class for state information if you don't pass them a custom state provider. In order for this class to be useful, it must be initialized with a provider when your application initializes. // in your initialization functioninit : function(){   Ext.state.Manager.setProvider(new Ext.state.CookieProvider());   ...   // supposed you have a 'Ext.BorderLayout' href='output/Ext.BorderLayout.html'>Ext.BorderLayout   var layout = new Ext.BorderLayout(...);   layout.restoreState();   // or a {Ext.BasicDialog}   var dialog = new Ext.BasicDialog(...);   dialog.restoreState();]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>provider</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.state.Provider
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Abstract base class for state provider implementations. This class provides methods for encoding and decoding typed variables including dates and defines the Provider interface. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>asyncTreeNode</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.tree.AsyncTreeNode
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>loader</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[loader : TreeLoader
A TreeLoader to be used by this node (defaults to the loader defined on the tree) ]]></description>
		</attribute>
		<attribute>
			<name>disabled</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[disabled : Boolean
true to start the node disabled ]]></description>
		</attribute>
		<attribute>
			<name>iconCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[iconCls : String
A css class to be added to the nodes icon element for applying css background images ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
A css class to be added to the node ]]></description>
		</attribute>
		<attribute>
			<name>draggable</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[draggable : Boolean
True to make this node draggable (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>checked</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[checked : Boolean
True to render a checked checkbox for this node, false to render an unchecked checkbox (defaults to undefined with no checkbox rendered) ]]></description>
		</attribute>
		<attribute>
			<name>href</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[href : String
URL of the link used for the node (defaults to #) ]]></description>
		</attribute>
		<attribute>
			<name>hrefTarget</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hrefTarget : String
target frame for the link ]]></description>
		</attribute>
		<attribute>
			<name>allowChildren</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowChildren : Boolean
False to not allow this node to have child nodes (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>allowDrag</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDrag : Boolean
False to make this node undraggable if draggable = true (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>allowDrop</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDrop : Boolean
False if this node cannot have child nodes dropped on it (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>expandable</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[expandable : Boolean
If set to true, the node will always show a plus/minus icon, even when empty ]]></description>
		</attribute>
		<attribute>
			<name>expanded</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[expanded : Boolean
true to start the node expanded ]]></description>
		</attribute>
		<attribute>
			<name>qtip</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[qtip : String
An Ext QuickTip for the node ]]></description>
		</attribute>
		<attribute>
			<name>qtipCfg</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[qtipCfg : String
An Ext QuickTip config for the node (used instead of qtip) ]]></description>
		</attribute>
		<attribute>
			<name>singleClickExpand</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[singleClickExpand : Boolean
True for single click expand on this node ]]></description>
		</attribute>
		<attribute>
			<name>uiProvider</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[uiProvider : Function
A UI class to use for this node (defaults to Ext.tree.TreeNodeUI) ]]></description>
		</attribute>
		<attribute>
			<name>text</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[text : String
The text for this node ]]></description>
		</attribute>
		<attribute>
			<name>icon</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[icon : String
The path to an icon for the node. The preferred way to do this is to use the cls or iconCls attributes and add the icon via a CSS background image. ]]></description>
		</attribute>
		<attribute>
			<name>target</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[isTarget : Boolean
False to not allow this node to act as a drop target (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id:String
 The id for this node. If one is not specified, one is generated. ]]></description>
		</attribute>
		<attribute>
			<name>leaf</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[isLeaf :boolean
 true if this node is a leaf and does not have children ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>defaultSelectionModel</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.tree.DefaultSelectionModel
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[The default single selection for a TreePanel. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>multiSelectionModel</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.tree.MultiSelectionModel
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Multi selection for a TreePanel. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>rootTreeNodeUI</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.tree.RootTreeNodeUI
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[This class provides the default UI implementation for root Ext TreeNodes. The RootTreeNode UI implementation allows customizing the appearance of the root tree node.If you are customizing the Tree's user interface, you may need to extend this class, but you should never need to instantiate this class.]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>treeDragZone</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.tree.TreeDragZone
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>containerScroll</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[containerScroll : BooleanTrue to register this container with the Scrollmanager for auto scrolling during drag operations.]]></description>
		</attribute>
		<attribute>
			<name>hlColor</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hlColor : String The color to use when visually highlighting the drag source in the afterRepair method after a failed drop (defaults to 'c3daf9' - light blue) ]]></description>
		</attribute>
		<attribute>
			<name>ddGroup</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ddGroup : String A named drag drop group to which this object belongs. If a group is specified, then this object will only interact with other drag drop objects in the same group (defaults to undefined). ]]></description>
		</attribute>
		<attribute>
			<name>dropAllowed</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[dropAllowed : StringThe CSS class returned to the drag source when drop is allowed (defaults to 'x-dd-drop-ok'). ]]></description>
		</attribute>
		<attribute>
			<name>dropNotAllowed</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[dropNotAllowed : StringThe CSS class returned to the drag source when drop is not allowed (defaults to 'x-dd-drop-nodrop'). ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>treeDropZone</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.tree.TreeDropZone
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>allowContainerDrop</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>allowParentInsert</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>appendOnly</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>expandDelay</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>overClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[overClass : StringThe CSS class applied to the drop target element while the drag source is over it (defaults to ''). ]]></description>
		</attribute>
		<attribute>
			<name>ddGroup</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ddGroup : String A named drag drop group to which this object belongs. If a group is specified, then this object will only interact with other drag drop objects in the same group (defaults to undefined). ]]></description>
		</attribute>
		<attribute>
			<name>dropAllowed</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[dropAllowed : StringThe CSS class returned to the drag source when drop is allowed (defaults to 'x-dd-drop-ok'). ]]></description>
		</attribute>
		<attribute>
			<name>dropNotAllowed</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[dropNotAllowed : StringThe CSS class returned to the drag source when drop is not allowed (defaults to 'x-dd-drop-nodrop'). ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>treeEditor</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.tree.TreeEditor
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Provides editor functionality for inline tree node editing. Any valid Ext.form.Field can be used as the editor field. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>hideEl</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>shim</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>editDelay</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>maxWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>autosize</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autosize : Boolean/String
True for the editor to automatically adopt the size of the underlying field, 'width' to adopt the width only, or 'height' to adopt the height only (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>cancelOnEsc</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[cancelOnEsc : Boolean
True to cancel the edit when the escape key is pressed (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>completeOnEnter</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[completeOnEnter : Boolean
True to complete the edit when the enter key is pressed (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>constrain</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[constrain : Boolean
True to constrain the editor to the viewport ]]></description>
		</attribute>
		<attribute>
			<name>ignoreNoChange</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[ignoreNoChange : Boolean
True to skip the the edit completion process (no save, no events fired) if the user completes an edit and the value has not changed (defaults to false). Applies only to string values - edits for other data types will never be ignored. ]]></description>
		</attribute>
		<attribute>
			<name>revertInvalid</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[revertInvalid : Boolean
True to automatically revert the field value and cancel the edit when the user completes an edit and the field validation fails (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>shadow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[shadow : Boolean/String
'sides' for sides/bottom only, /frame' for 4-way shadow, and 'drop' for bottom-right shadow (defaults to 'frame') ]]></description>
		</attribute>
		<attribute>
			<name>swallowKeys</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[swallowKeys : Boolean
Handle the keydown/keypress events so they don't propagate (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>updateEl</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[updateEl : Boolean
True to update the innerHTML of the bound element when the update completes (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>value</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[value : Mixed
The data value of the underlying field (defaults to '') ]]></description>
		</attribute>
		<attribute>
			<name>alignment</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[alignment : String
The position to align to (see Ext.Element.alignTo for more details, defaults to 'c-c?'). ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>treeFilter</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.tree.TreeFilter
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Note this class is experimental and doesn't update the indent (lines) or expand collapse icons of the nodes ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>treeLoader</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.tree.TreeLoader
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[A TreeLoader provides for lazy loading of an Ext.tree.TreeNode's child nodes from a specified URL. The response must be a JavaScript Array definition whose elements are node definition objects. eg:[{        id: 1,        text: 'A leaf Node',        leaf: true    },{        id: 2,        text: 'A folder Node',        children: [{            id: 3,            text: 'A child Node',            leaf: true        }]   }]A server request is sent, and child nodes are loaded only when a node is expanded. The loading node's id is passed to the server under the parameter name 'node' to enable the server to produce the correct child nodes.To pass extra parameters, an event handler may be attached to the 'beforeload' event, and the parameters specified in the TreeLoader's baseParams property: myTreeLoader.on('beforeload', function(treeLoader, node) {        this.baseParams.category = node.attributes.category;    }, this);< This would pass an HTTP parameter called 'category' to the server containing the value of the Node's 'category' attribute. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>handler</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>url</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[url : String
Equivalent to dataUrl. ]]></description>
		</attribute>
		<attribute>
			<name>baseParams</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[baseParams : Object
(optional) An object containing properties which specify HTTP parameters to be passed to each request for child nodes. ]]></description>
		</attribute>
		<attribute>
			<name>dataUrl</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>baseAttrs</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[baseAttrs : Object
(optional) An object containing attributes to be added to all nodes created by this loader. If the attributes sent by the server have an attribute in this object, they take priority. ]]></description>
		</attribute>
		<attribute>
			<name>clearOnLoad</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[clearOnLoad : Boolean
(optional) Default to true. Remove previously existing child nodes before loading. ]]></description>
		</attribute>
		<attribute>
			<name>preloadChildren</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[preloadChildren : Boolean
If set to true, the loader recursively loads 'children' attributes when doing the first load on nodes. ]]></description>
		</attribute>
		<attribute>
			<name>uiProviders</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[uiProviders : Object
(optional) An object containing properties which specify custom Ext.tree.TreeNodeUI implementations. If the optional ...]]></description>
		</attribute>
		<attribute>
			<name>textField</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>idField</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>leafField</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>clsField</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>childrenField</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>beforeload</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>load</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>loadexception</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>requestMethod</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[requestMethod : String
The HTTP request method for loading data (defaults to 'POST'). ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>treeNode</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.tree.TreeNode
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>disabled</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[disabled : Boolean
true to start the node disabled ]]></description>
		</attribute>
		<attribute>
			<name>iconCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[iconCls : String
A css class to be added to the nodes icon element for applying css background images ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
A css class to be added to the node ]]></description>
		</attribute>
		<attribute>
			<name>draggable</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[draggable : Boolean
True to make this node draggable (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>checked</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[checked : Boolean
True to render a checked checkbox for this node, false to render an unchecked checkbox (defaults to undefined with no checkbox rendered) ]]></description>
		</attribute>
		<attribute>
			<name>href</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[href : String
URL of the link used for the node (defaults to #) ]]></description>
		</attribute>
		<attribute>
			<name>hrefTarget</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hrefTarget : String
target frame for the link ]]></description>
		</attribute>
		<attribute>
			<name>allowChildren</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowChildren : Boolean
False to not allow this node to have child nodes (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>allowDrag</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDrag : Boolean
False to make this node undraggable if draggable = true (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>allowDrop</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDrop : Boolean
False if this node cannot have child nodes dropped on it (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>expandable</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[expandable : Boolean
If set to true, the node will always show a plus/minus icon, even when empty ]]></description>
		</attribute>
		<attribute>
			<name>expanded</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[expanded : Boolean
true to start the node expanded ]]></description>
		</attribute>
		<attribute>
			<name>qtip</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[qtip : String
An Ext QuickTip for the node ]]></description>
		</attribute>
		<attribute>
			<name>qtipCfg</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[qtipCfg : String
An Ext QuickTip config for the node (used instead of qtip) ]]></description>
		</attribute>
		<attribute>
			<name>singleClickExpand</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[singleClickExpand : Boolean
True for single click expand on this node ]]></description>
		</attribute>
		<attribute>
			<name>uiProvider</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[uiProvider : Function
A UI class to use for this node (defaults to Ext.tree.TreeNodeUI) ]]></description>
		</attribute>
		<attribute>
			<name>text</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[text : String
The text for this node ]]></description>
		</attribute>
		<attribute>
			<name>icon</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[icon : String
The path to an icon for the node. The preferred way to do this is to use the cls or iconCls attributes and add the icon via a CSS background image. ]]></description>
		</attribute>
		<attribute>
			<name>target</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[isTarget : Boolean
False to not allow this node to act as a drop target (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id:String
 The id for this node. If one is not specified, one is generated. ]]></description>
		</attribute>
		<attribute>
			<name>leaf</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[isLeaf :boolean
 true if this node is a leaf and does not have children ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>treeNodeUI</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.tree.TreeNodeUI
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[This class provides the default UI implementation for Ext TreeNodes. The TreeNode UI implementation is separate from the tree implementation, and allows customizing of the appearance of tree nodes.If you are customizing the Tree's user interface, you may need to extend this class, but you should never need to instantiate this class.This class provides access to the user interface components of an Ext TreeNode, through Ext.tree.TreeNode.getUI]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>treePanel</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.tree.TreePanel
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[The TreePanel provides tree-structured UI representation of tree-structured data.TreeNodes added to the TreePanel may each contain metadata used by your application in their attributes property.A TreePanel must have a root node before it is rendered. This may either be specified using the root config option, or using the setRootNode method. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>animate</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[animate : Boolean
true to enable animated expand/collapse (defaults to the value of Ext.enableFx) ]]></description>
		</attribute>
		<attribute>
			<name>pathSeparator</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[pathSeparator : String
The token used to separate sub-paths in path strings (defaults to '/') ]]></description>
		</attribute>
		<attribute>
			<name>ddGroup</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ddGroup : String
The DD group this TreePanel belongs to ]]></description>
		</attribute>
		<attribute>
			<name>containerScroll</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[containerScroll : Boolean
true to register this container with ScrollManager ]]></description>
		</attribute>
		<attribute>
			<name>hlColor</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hlColor : String
The color of the node highlight (defaults to C3DAF9)]]></description>
		</attribute>
		<attribute>
			<name>selModel</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[selModel : Boolean
A tree selection model to use with this TreePanel (defaults to a Ext.tree.DefaultSelectionModel) ]]></description>
		</attribute>
		<attribute>
			<name>loader</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[loader : Ext.tree.TreeLoader
A Ext.tree.TreeLoader for use with this TreePanel ]]></description>
		</attribute>
		<attribute>
			<name>ddAppendOnly</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ddAppendOnly : String
True if the tree should only allow append drops (use for trees which are sorted) ]]></description>
		</attribute>
		<attribute>
			<name>ddScroll</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[ddScroll : Boolean
true to enable body scrolling ]]></description>
		</attribute>
		<attribute>
			<name>dragConfig</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[dragConfig : Object
Custom config to pass to the Ext.tree.TreeDragZone instance ]]></description>
		</attribute>
		<attribute>
			<name>dropConfig</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[dropConfig : Object
Custom config to pass to the Ext.tree.TreeDropZone instance]]></description>
		</attribute>
		<attribute>
			<name>enableDD</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enableDD : Boolean
true to enable drag and drop ]]></description>
		</attribute>
		<attribute>
			<name>enableDrag</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enableDrag : Boolean
true to enable just drag ]]></description>
		</attribute>
		<attribute>
			<name>enableDrop</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[enableDrop : Boolean
true to enable just drop ]]></description>
		</attribute>
		<attribute>
			<name>hlDrop</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hlDrop : Boolean
false to disable node highlight on drop (defaults to the value of Ext.enableFx) ]]></description>
		</attribute>
		<attribute>
			<name>lines</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[lines : Boolean
false to disable tree lines (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>singleExpand</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[singleExpand : Boolean
true if only 1 node per branch may be expanded ]]></description>
		</attribute>
		<attribute>
			<name>checkModel</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>onlyLeafCheckable</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>rootVisible</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[rootVisible : Boolean
false to hide the root node (defaults to true) ]]></description>
		</attribute>
		<attribute>
			<name>root</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[root : Ext.tree.TreeNode
The root node for the tree.]]></description>
		</attribute>
		<attribute>
			<name>iconCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[iconCls : String
A CSS class that will provide a background image to be used as the panel header icon (defaults to ''). ]]></description>
		</attribute>
		<attribute>
			<name>shadow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[minButtonWidth : Number
Minimum width in pixels of all buttons in this panel (defaults to 75) ]]></description>
		</attribute>
		<attribute>
			<name>shadowOffset</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[shadowOffset : Number
The number of pixels to offset the shadow if displayed (defaults to 4). Note that this option only applies when floating = true. ]]></description>
		</attribute>
		<attribute>
			<name>shim</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[shim : Boolean
False to disable the iframe shim in browsers which need one (defaults to true). Note that this option only applies when floating = true. ]]></description>
		</attribute>
		<attribute>
			<name>animCollapse</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[animCollapse : Boolean
True to animate the transition when the panel is collapsed, false to skip the animation (defaults to true if the Ext.Fx class is available, otherwise false). ]]></description>
		</attribute>
		<attribute>
			<name>autoLoad</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[autoLoad : Object/String/Function
A valid url spec according to the Updater Ext.Updater.update method. If autoLoad is not null, the panel will attempt to load its contents immediately upon render.The URL will become the default URL for this panel's body element, so it may be refreshed at any time.]]></description>
		</attribute>
		<attribute>
			<name>autoScroll</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoScroll : Boolean
True to use overflow:'auto' on the panel's body element and show scroll bars automatically when necessary, false to clip any overflowing content (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>baseCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[baseCls : String
The base CSS class to apply to this panel's element (defaults to 'x-panel').]]></description>
		</attribute>
		<attribute>
			<name>bbar</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[bbar : Object/Array
The bottom toolbar of the panel. This can be a Ext.Toolbar object, a toolbar config, or an array of buttons/button configs to be added to the toolbar. Note that this is not available as a property after render. To access the bottom toolbar after render, use getBottomToolbar. ]]></description>
		</attribute>
		<attribute>
			<name>bodyBorder</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[bodyBorder : Boolean
True to display an interior border on the body element of the panel, false to hide it (defaults to true). This only applies when border == true. If border == true and bodyBorder == false, the border will display as a 1px wide inset border, giving the entire body element an inset appearance. ]]></description>
		</attribute>
		<attribute>
			<name>bodyStyle</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[bodyStyle : String/Object/Function
Custom CSS styles to be applied to the body element in the format expected by Ext.Element.applyStyles (defaults to null). ]]></description>
		</attribute>
		<attribute>
			<name>buttonAlign</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[buttonAlign : String
The alignment of any buttons added to this panel. Valid values are 'right,' 'left' and 'center' (defaults to 'right'). ]]></description>
		</attribute>
		<attribute>
			<name>buttons</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[buttons : Array
An array of Ext.Button configs used to add buttons to the footer of this panel. ]]></description>
		</attribute>
		<attribute>
			<name>collapseFirst</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[collapseFirst : Boolean
True to make sure the collapse/expand toggle button always renders first (to the left of) any other tools in the panel's title bar, false to render it last (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>collapsed</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[collapsed : Boolean
True to render the panel collapsed, false to render it expanded (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>collapsedCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[collapsedCls : String
A CSS class to add to the panel's element after it has been collapsed (defaults to 'x-panel-collapsed'). ]]></description>
		</attribute>
		<attribute>
			<name>collapsible</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[collapsible : Boolean
True to make the panel collapsible and have the expand/collapse toggle button automatically rendered into the header tool button area, false to keep the panel statically sized with no button (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>contentEl</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[contentEl : String
The id of an existing HTML node to use as the panel's body content (defaults to ''). ]]></description>
		</attribute>
		<attribute>
			<name>draggable</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[draggable : Boolean
True to enable dragging of this Panel (defaults to false). For custom drag/drop implementations, an Ext.Panel.DD config could also be passed in this config instead of true, although Ext.Panel.DD is an internal, undocumented class]]></description>
		</attribute>
		<attribute>
			<name>elements</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[elements : String
A comma-delimited list of panel elements to initialize when the panel is rendered. Normally, this list will be generated automatically based on the items added to the panel at config time, but sometimes it might be useful to make sure a structural element is rendered even if not specified at config time (for example, you may want to add a button or toolbar dynamically after the panel has been rendered). Adding those elements to this list will allocate the required placeholders in the panel when it is rendered. Valid values areheader tbar (top bar)body bbar (bottom bar)footer Defaults to 'body'. ]]></description>
		</attribute>
		<attribute>
			<name>footer</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[footer : Boolean
True to create the footer element explicitly, false to skip creating it. By default, when footer is not specified, if one or more buttons have been added to the panel the footer will be created automatically, otherwise it will not. ]]></description>
		</attribute>
		<attribute>
			<name>header</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[header : Boolean
True to create the header element explicitly, false to skip creating it. By default, when header is not specified, if a title is set the header will be created automatically, otherwise it will not. If a title is set but header is explicitly set to false, the header will not be rendered. ]]></description>
		</attribute>
		<attribute>
			<name>headerAsText</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[headerAsText : Boolean
True to display the panel title in the header, false to hide it (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>hideCollapseTool</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideCollapseTool : Boolean
True to hide the expand/collapse toggle button when collapsible = true, false to display it (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>html</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[html : String/Object
An HTML fragment, or a DomHelper specification to use as the panel's body content (defaults to ''). ]]></description>
		</attribute>
		<attribute>
			<name>keys</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[keys : Object/Array
A KeyMap config object (in the format expected by Ext.KeyMap.addBinding used to assign custom key handling to this panel (defaults to null). ]]></description>
		</attribute>
		<attribute>
			<name>maskDisabled</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[maskDisabled : Boolean
True to mask the panel when it is disabled, false to not mask it (defaults to true). Either way, the panel will always tell its contained elements to disable themselves when it is disabled, but masking the panel can provide an additional visual cue that the panel is disabled. ]]></description>
		</attribute>
		<attribute>
			<name>minButtonWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>tbar</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tbar : Object/Array
The top toolbar of the panel. This can be either an Ext.Toolbar object or an array of buttons/button configs to be added to the toolbar. Note that this is not available as a property after render. To access the top toolbar after render, use getTopToolbar. ]]></description>
		</attribute>
		<attribute>
			<name>titleCollapse</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[titleCollapse : Boolean
True to allow expanding and collapsing the panel (when collapsible = true) by clicking anywhere in the header bar, false to allow it only by clicking to tool button (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>tools</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tools : Array
An array of tool button configs to be added to the header tool area. Each tool config may contain the following properties:id : String Required. The type of tool to create. Values may betoggle (Created by default when collapsible is true)close minimizemaximize restore gear pin unpin right left up downrefreshminus plus help searchsave handler : FunctionRequired. The function to call when clicked. Arguments passed are:event : Ext.EventObject The click event.toolEl : Ext.ElementThe tool Element.Panel : Ext.Panel The host Panelscope : Object The scope in which to call the handler.qtip : String/Object A tip string, or a config argument to Ext.QuickTip.registerhidden : Boolean True to initially render hidden.on : Object A listener config object specifiying event listeners in the format of an argument to addListenerExample usage: tools:[{    id:'refresh',    // hidden:true,    handler: function(event, toolEl, panel){        // refresh logic    }}]Note that apart from the toggle tool which is provided when a panel is collapsible, these tools only provide the visual button. Any required functionality must be provided by adding handlers that implement the necessary behavior. ]]></description>
		</attribute>
		<attribute>
			<name>region</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>title</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[title : String
The title text to display in the panel header (defaults to ''). When a title is specified the header element will automatically be created and displayed unless header is explicitly set to false. If you don't want to specify a title at config time, but you may want one later, you must either specify a non-empty title (a blank space ' ' will do) or header:true so that the container element will get created. ]]></description>
		</attribute>
		<attribute>
			<name>frame</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[frame : Boolean
True to render the panel with custom rounded borders, false to render with plain 1px square borders (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>border</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[border : Boolean
True to display the borders of the panel's body element, false to hide them (defaults to true). By default, the border is a 2px wide inset border, but this can be further altered by setting bodyBorder to false. ]]></description>
		</attribute>
		<attribute>
			<name>floating</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[floating : Boolean
True to float the panel (absolute position it with automatic shimming and shadow), false to display it inline where it is rendered (defaults to false). Note that by default, setting floating to true will cause the panel to display at negative offsets so that it is hidden -- because the panel is absolute positioned, the position must be set explicitly after render (e.g., myPanel.setPosition(100,100);). Also, when floating a panel you should always assign a fixed width, otherwise it will be auto width and will expand to fill to the right edge of the viewport. ]]></description>
		</attribute>
		<attribute>
			<name>activeItem</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[activeItem : String/Number
A string component id or the numeric index of the component that should be initially activated within the container's layout on render. For example, activeItem: 'item-1' or activeItem: 0 (index 0 = the first item in the container's collection). activeItem only applies to layout styles that can display items one at a time (like Ext.layout.Accordion, Ext.layout.CardLayout and Ext.layout.FitLayout). Related to Ext.layout.ContainerLayout.activeItem. ]]></description>
		</attribute>
		<attribute>
			<name>autoDestroy</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoDestroy : BooleanIf true the container will automatically destroy any contained component that is removed from it, else destruction must be handled manually (defaults to true).]]></description>
		</attribute>
		<attribute>
			<name>bufferResize</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[bufferResize : Boolean/Number
When set to true (100 milliseconds) or a number of milliseconds, the layout assigned for this container will buffer the frequency it calculates and does a re-layout of components. This is useful for heavy containers or containers with a large amount of sub components that frequent calls to layout are expensive. ]]></description>
		</attribute>
		<attribute>
			<name>defaultType</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[defaultType : String
The default type of container represented by this object as registered in Ext.ComponentMgr (defaults to 'panel'). ]]></description>
		</attribute>
		<attribute>
			<name>defaults</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[defaults : Object
A config object that will be applied to all components added to this container either via the items config or via the add or insert methods. The defaults config can contain any number of name/value property pairs to be added to each item, and should be valid for the types of items being added to the container. For example, to automatically apply padding to the body of each of a set of contained Ext.Panel items, you could pass: defaults: {bodyStyle:'padding:15px'}. ]]></description>
		</attribute>
		<attribute>
			<name>hideBorders</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideBorders : Boolean
True to hide the borders of each contained component, false to defer to the component's existing border settings (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>items</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[items : Mixed
A single item, or an array of child Components to be added to this container. Each item can be any type of object based on Ext.Component.Component config objects may also be specified in order to avoid the overhead of constructing a real Component object if lazy rendering might mean that the added Component will not be rendered immediately. To take advantage of this 'lazy instantiation', set the Ext.Component.xtype config property to the registered type of the Component wanted.For a list of all available xtypes, see Ext.Component. If a single item is being passed, it should be passed directly as an object reference (e.g., items: {...}). Multiple items should be passed as an array of objects (e.g., items: [{...}, {...}]). ]]></description>
		</attribute>
		<attribute>
			<name>layoutConfig</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[layoutConfig : Object
This is a config object containing properties specific to the chosen layout (to be used in conjunction with the layout config value). For complete details regarding the valid config options for each layout type, see the layout class corresponding to the type specified:Ext.layout.Accordion Ext.layout.AnchorLayoutExt.layout.BorderLayout Ext.layout.CardLayout Ext.layout.ColumnLayoutExt.layout.FitLayout Ext.layout.FormLayout Ext.layout.TableLayout]]></description>
		</attribute>
		<attribute>
			<name>monitorResize</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[monitorResize : Boolean
True to automatically monitor window resize events to handle anything that is sensitive to the current size of the viewport. This value is typically managed by the chosen layout and should not need to be set manually. ]]></description>
		</attribute>
		<attribute>
			<name>layout</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[layout : String
The layout type to be used in this container. If not specified, a default Ext.layout.ContainerLayout will be created and used. Valid values are: accordion, anchor, border, card, column, fit, form and table. Specific config values for the chosen layout type can be specified using layoutConfig. ]]></description>
		</attribute>
		<attribute>
			<name>autoHeight</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoHeight : Boolean
True to use height:'auto', false to use fixed height (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>autoWidth</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoWidth : Boolean
True to use width:'auto', false to use fixed width (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>height</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[height : Number
The height of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>width</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[width : Number
The width of this component in pixels (defaults to auto). ]]></description>
		</attribute>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[id : String
The unique id of this component (defaults to an auto-assigned id).]]></description>
		</attribute>
		<attribute>
			<name>allowDomMove</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[allowDomMove : Boolean
Whether the component can move the Dom node when rendering (defaults to true). ]]></description>
		</attribute>
		<attribute>
			<name>applyTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[applyTo : Mixed
The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in the document that specifies some structural markup for this component. When applyTo is used, constituent parts of the component can also be specified by id or CSS class name within the main element, and the component being created may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is not required. If applyTo is specified, any value passed for renderTo will be ignored and the target element's parent node will automatically be used as the component's container. ]]></description>
		</attribute>
		<attribute>
			<name>autoShow</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[autoShow : Boolean
True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove them on render (defaults to false). ]]></description>
		</attribute>
		<attribute>
			<name>cls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[cls : String
An optional extra CSS class that will be added to this component's Element (defaults to ''). This can be useful for adding customized styles to the component or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>ctCls</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[ctCls : String
An optional extra CSS class that will be added to this component's container (defaults to ''). This can be useful for adding customized styles to the container or any of its children using standard CSS rules. ]]></description>
		</attribute>
		<attribute>
			<name>disabledClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[disabledClass : String
CSS class added to the component when it is disabled (defaults to 'x-item-disabled'). ]]></description>
		</attribute>
		<attribute>
			<name>hideMode</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[hideMode : String
How this component should hidden. Supported values are 'visibility' (css visibility), 'offsets' (negative offset position) and 'display' (css display) - defaults to 'display'. ]]></description>
		</attribute>
		<attribute>
			<name>hideParent</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[hideParent : Boolean
True to hide and show the component's container when hide/show is called on the component, false to hide and show the component itself (defaults to false). For example, this can be used as a shortcut for a hide button on a window by setting hide:true on the button when adding it to its parent container. ]]></description>
		</attribute>
		<attribute>
			<name>plugins</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[plugins : Object/Array
An object or array of objects that will provide custom functionality for this component. The only requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component is created, if any plugins are available, the component will call the init method on each plugin, passing a reference to itself. Each plugin can then call methods or respond to events on the component as needed to provide its functionality. ]]></description>
		</attribute>
		<attribute>
			<name>renderTo</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[renderTo : Mixed
The id of the node, a DOM node or an existing Element that will be the container to render this component into. Using this config, a call to render() is not required. ]]></description>
		</attribute>
		<attribute>
			<name>stateEvents</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateEvents : Array
An array of events that, when fired, should trigger this component to save its state (defaults to none). These can be any types of events supported by this component, including browser or custom events (e.g., ['click', 'customerchange']). ]]></description>
		</attribute>
		<attribute>
			<name>stateId</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[stateId : String
The unique id for this component to use for state management purposes (defaults to the component id). ]]></description>
		</attribute>
		<attribute>
			<name>xtype</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[xtype : String
The registered xtype to create. This config option is not used when passing a config object into a constructor. This config option is used only when lazy instantiation is being used, and a child item of a Container is being specified not as a fully instantiated Component, but as a Component config object. The xtype will be looked up at render time up to determine what type of child Component to create.The predefined xtypes are listed here. ]]></description>
		</attribute>
		<attribute>
			<name>style</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[style : String
A custom style specification to be applied to this component's Element. Should be a valid argument to Ext.Element.applyStyles. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>treeSorter</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.tree.TreeSorter
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Provides sorting of nodes in a TreePanel ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>caseSensitive</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[caseSensitive : Boolean
true for case sensitive sort (defaults to false) ]]></description>
		</attribute>
		<attribute>
			<name>dir</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[dir : String
The direction to sort (asc or desc) (defaults to asc) ]]></description>
		</attribute>
		<attribute>
			<name>folderSort</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[folderSort : Boolean
True to sort leaf nodes under non leaf nodes]]></description>
		</attribute>
		<attribute>
			<name>leafAttr</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[leafAttr : String
The attribute used to determine leaf nodes in folder sort (defaults to 'leaf') ]]></description>
		</attribute>
		<attribute>
			<name>sortType</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[sortType : Function
A custom 'casting' function used to convert node values before sorting ]]></description>
		</attribute>
		<attribute>
			<name>property</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[property : String
The named attribute on the node to sort by (defaults to text) ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>cSS</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.util.CSS
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Utility class for manipulating CSS rulesThis class is a singleton and cannot be created directly. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>clickRepeater</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.util.ClickRepeater
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[A wrapper class which can be applied to any element. Fires a 'click' event while the mouse is pressed. The interval between firings may be specified in the config but defaults to 20 milliseconds. Optionally, a CSS class may be applied to the element during the time it is pressed. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>accelerate</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[accelerate : Boolean
True if autorepeating should start slowly and accelerate. 'interval' and 'delay' are ignored. ]]></description>
		</attribute>
		<attribute>
			<name>el</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[el : Mixed
The element to act as a button. ]]></description>
		</attribute>
		<attribute>
			<name>interval</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[interval : Number
The interval between firings of the 'click' event. Default 20 ms. ]]></description>
		</attribute>
		<attribute>
			<name>pressClass</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[pressClass : String
A CSS class name to be applied to the element while pressed.]]></description>
		</attribute>
		<attribute>
			<name>preventDefault</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[preventDefault : Boolean
True to prevent the default click event ]]></description>
		</attribute>
		<attribute>
			<name>stopDefault</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Boolean</type>
			<description><![CDATA[stopDefault : Boolean
True to stop the default click event ]]></description>
		</attribute>
		<attribute>
			<name>delay</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.Integer</type>
			<description><![CDATA[delay : Number
The initial delay before the repeating event begins firing. Similar to an autorepeat key delay. ]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>delayedTask</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.util.DelayedTask
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Provides a convenient method of performing setTimeout where a new timeout cancels the old timeout. An example would be performing validation on a keypress. You can use this class to buffer the keypress events for a certain number of milliseconds, and perform only if they stop for that amount of time.]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>format</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.util.Format
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Reusable data formatting functionsThis class is a singleton and cannot be created directly. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>jSON</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.util.JSON
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Modified version of Douglas Crockford's json.js that doesn't mess with the Object prototype http://www.json.org/js.htmlThis class is a singleton and cannot be created directly. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>mixedCollection</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.util.MixedCollection
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[A Collection class that maintains both numeric indexes and keys and exposes events. ]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>observable</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.util.Observable
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Abstract base class that provides a common interface for publishing events. Subclasses are expected to to have a property 'events' with all the events defined.For example: Employee = function(name){    this.name = name;    this.addEvents({        'fired' : true,        'quit' : true    }); } Ext.extend(Employee, Ext.util.Observable);]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>listeners</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[listeners : Object
A config object containing one or more event handlers to be added to this object during initialization. This should be a valid listeners config object as specified in the addListener example for attaching multiple handlers at once. ]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>taskRunner</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.util.TaskRunner
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Provides the ability to execute one or more arbitrary tasks in a multithreaded manner. Generally, you can use the singleton Ext.TaskMgr instead, but if needed, you can create separate instances of TaskRunner. Any number of separate tasks can be started at any time and will run independently of each other. Example usage:// Start a simple clock task that updates a div once per secondvar task = {    run: function(){        Ext.fly('clock').update(new Date().format('g:i:s A'));    },    interval: 1000 //1 second}var runner = new Ext.util.TaskRunner();runner.start(task);]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>textMetrics</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.ext.util.TextMetrics
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[Provides precise pixel measurements for blocks of text so that you can determine exactly how high and wide, in pixels, a given block of text will be.This class is a singleton and cannot be created directly.]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>import</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.Import
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
	</tag>
	<tag>
		<name>script</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.Script
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>before</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>boolean</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>style</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.Style
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
	</tag>
	<tag>
		<name>testTag</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.TestTag
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
	</tag>
	<tag>
		<name>ui</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.UI
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>styles</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>scripts</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>title</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>data</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.property.Data
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>plugins</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.property.Plugins
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>columns</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.property.Columns
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>items</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.property.Items
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>html</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.property.Html
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>buttons</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.property.Buttons
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>fields</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.property.Fields
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>type</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[type : java.lang.Class
 ���������, �磺com.sf.domain.User, �����Խ�ͨ����Ԫ��Ϣ�����Ӧ��fields]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>tbar</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.property.Tbar
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>tools</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.property.Tools
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>listeners</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.property.Listeners
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>stateEvents</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.property.StateEvents
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>defaults</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.property.Defaults
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
	<tag>
		<name>bbar</name>
		<tag-class>
			com.googlecode.struts4rcp.server.view.extjs.property.Bbar
		</tag-class>
		<body-content>JSP</body-content>
		<description><![CDATA[]]></description>
		<attribute>
			<name>id</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[tag id]]></description>
		</attribute>
		<attribute>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
		<attribute>
			<name>key</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.lang.String</type>
			<description><![CDATA[]]></description>
		</attribute>
	</tag>
</taglib>
